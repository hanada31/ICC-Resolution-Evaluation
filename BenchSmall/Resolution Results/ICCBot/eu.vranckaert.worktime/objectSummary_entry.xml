<?xml version="1.0" encoding="UTF-8"?>

<root> 
  <Component source="eu.vranckaert.worktime.utils.donations.DonationsFragment"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.DonationsFragment$4: void onLoadResource(android.webkit.WebView,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.DonationsFragment$4: void onLoadResource(android.webkit.WebView,java.lang.String)&gt;,void onLoadResource(android.webkit.WebView,java.lang.String)"/>  
      <source name="eu.vranckaert.worktime.utils.donations.DonationsFragment"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.DonationsFragment$4: void onLoadResource(android.webkit.WebView,java.lang.String)&gt;"/>  
        <node method="DonationsFragment$4 onLoadResource" type="CreateMethod" unit="$r3 = new android.content.Intent"/>  
        <node method="DonationsFragment$4 onLoadResource" type="PassOutIntent" unit="virtualinvoke $r5.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r3)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="roboguice.activity.event.OnActivityResultEvent"> 
    <intentSummary> 
      <method value="&lt;roboguice.activity.event.OnActivityResultEvent: android.content.Intent getData()&gt;"/>  
      <methodtrace value="&lt;roboguice.activity.event.OnActivityResultEvent: android.content.Intent getData()&gt;,android.content.Intent getData()"/>  
      <source name="roboguice.activity.event.OnActivityResultEvent"/>  
      <nodes> 
        <node method="&lt;roboguice.activity.event.OnActivityResultEvent: android.content.Intent getData()&gt;"/>  
        <node method="OnActivityResultEvent getData" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent getData" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: void openEditTaskActivity(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: void openEditTaskActivity(eu.vranckaert.worktime.model.Task)&gt;,void openEditTaskActivity(eu.vranckaert.worktime.model.Task)"/>  
      <source name="eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.tasks.AddEditTaskActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: void openEditTaskActivity(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="ProjectDetailsActivity openEditTaskActivity" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="ProjectDetailsActivity openEditTaskActivity" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/tasks/AddEditTaskActivity;&quot;)"/>  
        <node method="ProjectDetailsActivity openEditTaskActivity" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: void startActivityForResult(android.content.Intent,int)&gt;(r2, 9)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.donations.DonationsFragment"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.DonationsFragment$4: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.DonationsFragment$4: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)&gt;,boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)"/>  
      <source name="eu.vranckaert.worktime.utils.donations.DonationsFragment"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.DonationsFragment$4: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)&gt;"/>  
        <node method="DonationsFragment$4 shouldOverrideUrlLoading" type="CreateMethod" unit="$r3 = new android.content.Intent"/>  
        <node method="DonationsFragment$4 shouldOverrideUrlLoading" type="PassOutIntent" unit="virtualinvoke $r4.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r3)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.jakewharton.notificationcompat2.NotificationCompatBase"> 
    <intentSummary> 
      <method value="&lt;com.jakewharton.notificationcompat2.NotificationCompatBase: android.app.Notification build(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
      <methodtrace value="&lt;com.jakewharton.notificationcompat2.NotificationCompatBase: android.app.Notification build(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,android.app.Notification build(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)"/>  
      <source name="com.jakewharton.notificationcompat2.NotificationCompatBase"/>  
      <nodes> 
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatBase: android.app.Notification build(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="NotificationCompatBase build" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatBase build" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatBase build" type="PassOutIntent" unit="virtualinvoke $r2.&lt;android.app.Notification: void setLatestEventInfo(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,android.app.PendingIntent)&gt;($r3, $r4, $r5, $r6)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.jakewharton.notificationcompat2.NotificationCompat2"> 
    <intentSummary> 
      <method value="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder setDeleteIntent(android.app.PendingIntent)&gt;"/>  
      <methodtrace value="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder setDeleteIntent(android.app.PendingIntent)&gt;,com.jakewharton.notificationcompat2.NotificationCompat2$Builder setDeleteIntent(android.app.PendingIntent)"/>  
      <source name="com.jakewharton.notificationcompat2.NotificationCompat2"/>  
      <nodes> 
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder setDeleteIntent(android.app.PendingIntent)&gt;"/>  
        <node method="NotificationCompat2$Builder setDeleteIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompat2$Builder setDeleteIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder setDeleteIntent(android.app.PendingIntent)&gt;"/>  
      <methodtrace value="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder setDeleteIntent(android.app.PendingIntent)&gt;,com.jakewharton.notificationcompat2.NotificationCompat2$Builder setDeleteIntent(android.app.PendingIntent)"/>  
      <source name="com.jakewharton.notificationcompat2.NotificationCompat2"/>  
      <nodes> 
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder setDeleteIntent(android.app.PendingIntent)&gt;"/>  
        <node method="NotificationCompat2$Builder setDeleteIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompat2$Builder setDeleteIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;,void handleReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationSplitActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="SplitBroadCastReceiver handleReceive" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="SplitBroadCastReceiver handleReceive" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationSplitActivity;&quot;)"/>  
        <node method="SplitBroadCastReceiver handleReceive" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(1417674752)"/>  
        <node method="SplitBroadCastReceiver handleReceive" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;,void handleReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="SplitBroadCastReceiver handleReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="SplitBroadCastReceiver handleReceive" type="SetAttribute" unit="if r5 == null goto virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(1417674752)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.preferences.PreferencesActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.PreferencesActivity$1: boolean onPreferenceClick(android.preference.Preference)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.PreferencesActivity$1: boolean onPreferenceClick(android.preference.Preference)&gt;,boolean onPreferenceClick(android.preference.Preference)"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.PreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.preferences.ResetApplicationPreferencesActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.PreferencesActivity$1: boolean onPreferenceClick(android.preference.Preference)&gt;"/>  
        <node method="PreferencesActivity$1 onPreferenceClick" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PreferencesActivity$1 onPreferenceClick" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Leu/vranckaert/worktime/activities/preferences/ResetApplicationPreferencesActivity;&quot;)"/>  
        <node method="PreferencesActivity$1 onPreferenceClick" type="PassOutIntent" unit="virtualinvoke $r3.&lt;eu.vranckaert.worktime.activities.preferences.PreferencesActivity: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.projects.ManageProjectsActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: void openCopyProjectActivity(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: void openCopyProjectActivity(eu.vranckaert.worktime.model.Project)&gt;,void openCopyProjectActivity(eu.vranckaert.worktime.model.Project)"/>  
      <source name="eu.vranckaert.worktime.activities.projects.ManageProjectsActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.projects.CopyProjectActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: void openCopyProjectActivity(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="ManageProjectsActivity openCopyProjectActivity" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="ManageProjectsActivity openCopyProjectActivity" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Leu/vranckaert/worktime/activities/projects/CopyProjectActivity;&quot;)"/>  
        <node method="ManageProjectsActivity openCopyProjectActivity" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: void startActivityForResult(android.content.Intent,int)&gt;(r2, 12)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;,void handleReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="ActionDialogBroadCastReceiver handleReceive" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="ActionDialogBroadCastReceiver handleReceive" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationActionActivity;&quot;)"/>  
        <node method="ActionDialogBroadCastReceiver handleReceive" type="SetAttribute" unit="virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(1417674752)"/>  
        <node method="ActionDialogBroadCastReceiver handleReceive" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;($r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;,void handleReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="ActionDialogBroadCastReceiver handleReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="ActionDialogBroadCastReceiver handleReceive" type="SetAttribute" unit="if r8 == null goto virtualinvoke $r2.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(1417674752)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.alarm.AlarmUtil"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;,android.app.PendingIntent getSyncOperation(android.content.Context,int)"/>  
      <source name="eu.vranckaert.worktime.utils.alarm.AlarmUtil"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.model.notification.NotificationAction"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.model.notification.NotificationAction: void setIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.model.notification.NotificationAction: void setIntent(android.content.Intent)&gt;,void setIntent(android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.model.notification.NotificationAction"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.model.notification.NotificationAction: void setIntent(android.content.Intent)&gt;"/>  
        <node method="NotificationAction setIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction setIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="NotificationAction setIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="NotificationAction setIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction setIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="NotificationAction setIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction setIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="NotificationAction setIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="NotificationAction setIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction setIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.model.notification.NotificationAction: void setIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.model.notification.NotificationAction: void setIntent(android.content.Intent)&gt;,void setIntent(android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.model.notification.NotificationAction"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.model.notification.NotificationAction: void setIntent(android.content.Intent)&gt;"/>  
        <node method="NotificationAction setIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="NotificationAction setIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction setIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="NotificationAction setIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="NotificationAction setIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction setIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.preferences.PreferencesActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.PreferencesActivity$3: boolean onPreferenceClick(android.preference.Preference)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.PreferencesActivity$3: boolean onPreferenceClick(android.preference.Preference)&gt;,boolean onPreferenceClick(android.preference.Preference)"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.PreferencesActivity"/>  
      <destinition name="java.lang.Class"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.PreferencesActivity$3: boolean onPreferenceClick(android.preference.Preference)&gt;"/>  
        <node method="PreferencesActivity$3 onPreferenceClick" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PreferencesActivity$3 onPreferenceClick" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r4, $r3)"/>  
        <node method="PreferencesActivity$3 onPreferenceClick" type="PassOutIntent" unit="virtualinvoke $r4.&lt;eu.vranckaert.worktime.activities.preferences.PreferencesActivity: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.jakewharton.notificationcompat2.NotificationCompatHC"> 
    <intentSummary> 
      <method value="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
      <methodtrace value="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)"/>  
      <source name="com.jakewharton.notificationcompat2.NotificationCompatHC"/>  
      <nodes> 
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;($r8, $z0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
      <methodtrace value="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)"/>  
      <source name="com.jakewharton.notificationcompat2.NotificationCompatHC"/>  
      <nodes> 
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setDeleteIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;($r8, $z0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
      <methodtrace value="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)"/>  
      <source name="com.jakewharton.notificationcompat2.NotificationCompatHC"/>  
      <nodes> 
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setDeleteIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;($r8, $z0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.jakewharton.notificationcompat2.NotificationCompatHC"> 
    <intentSummary> 
      <method value="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification build(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
      <methodtrace value="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification build(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)"/>  
      <source name="com.jakewharton.notificationcompat2.NotificationCompatHC"/>  
      <nodes> 
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification build(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;($r8, $z0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification build(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
      <methodtrace value="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification build(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)"/>  
      <source name="com.jakewharton.notificationcompat2.NotificationCompatHC"/>  
      <nodes> 
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification build(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setDeleteIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;($r8, $z0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification build(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
      <methodtrace value="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification build(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)"/>  
      <source name="com.jakewharton.notificationcompat2.NotificationCompatHC"/>  
      <nodes> 
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification build(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setDeleteIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;($r8, $z0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.model.notification.NotificationAction"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.model.notification.NotificationAction: android.content.Intent getIntent()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.model.notification.NotificationAction: android.content.Intent getIntent()&gt;,android.content.Intent getIntent()"/>  
      <source name="eu.vranckaert.worktime.model.notification.NotificationAction"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.model.notification.NotificationAction: android.content.Intent getIntent()&gt;"/>  
        <node method="NotificationAction getIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction getIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="NotificationAction getIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="NotificationAction getIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction getIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="NotificationAction getIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction getIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="NotificationAction getIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="NotificationAction getIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction getIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.account.AccountLoginActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$2: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$2: void onClick(android.view.View)&gt;,void onClick(android.view.View)"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountLoginActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountRegisterActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$2: void onClick(android.view.View)&gt;"/>  
        <node method="AccountLoginActivity$2 onClick" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="AccountLoginActivity$2 onClick" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Leu/vranckaert/worktime/activities/account/AccountRegisterActivity;&quot;)"/>  
        <node method="AccountLoginActivity$2 onClick" type="PassOutIntent" unit="virtualinvoke $r3.&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity: void startActivityForResult(android.content.Intent,int)&gt;(r2, 15)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.notifcationbar.StatusBarOthersActionHandleActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.notifcationbar.StatusBarOthersActionHandleActivity: void launchTimeRegistrationActionsDialog()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.notifcationbar.StatusBarOthersActionHandleActivity: void launchTimeRegistrationActionsDialog()&gt;,void launchTimeRegistrationActionsDialog()"/>  
      <source name="eu.vranckaert.worktime.activities.notifcationbar.StatusBarOthersActionHandleActivity"/>  
      <destinition name="eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver"/>  
      <sender action="eu.vranckaert.worktime.time_registration_action_dialog"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.notifcationbar.StatusBarOthersActionHandleActivity: void launchTimeRegistrationActionsDialog()&gt;"/>  
        <node method="StatusBarOthersActionHandleActivity launchTimeRegistrationActionsDialog" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="StatusBarOthersActionHandleActivity launchTimeRegistrationActionsDialog" type="SetAttribute" unit="virtualinvoke r1.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;eu.vranckaert.worktime.time_registration_action_dialog&quot;)"/>  
        <node method="StatusBarOthersActionHandleActivity launchTimeRegistrationActionsDialog" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.notifcationbar.StatusBarOthersActionHandleActivity: void sendBroadcast(android.content.Intent)&gt;(r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.donations.google.BillingService"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$1: void onClick(android.content.DialogInterface,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$1: void onClick(android.content.DialogInterface,int)&gt;,void onClick(android.content.DialogInterface,int)"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$1: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="BillingService$1 onClick" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="BillingService$1 onClick" type="PassOutIntent" unit="virtualinvoke $r4.&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity: void showTaskChooser()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity: void showTaskChooser()&gt;,void showTaskChooser()"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.tasks.SelectTaskActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity: void showTaskChooser()&gt;"/>  
        <node method="TimeRegistrationPunchInActivity showTaskChooser" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="TimeRegistrationPunchInActivity showTaskChooser" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/tasks/SelectTaskActivity;&quot;)"/>  
        <node method="TimeRegistrationPunchInActivity showTaskChooser" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity: void startActivityForResult(android.content.Intent,int)&gt;(r1, 13)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.donations.google.BillingReceiver"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingReceiver: void purchaseStateChanged(android.content.Context,java.lang.String,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingReceiver: void purchaseStateChanged(android.content.Context,java.lang.String,java.lang.String)&gt;,void purchaseStateChanged(android.content.Context,java.lang.String,java.lang.String)"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingReceiver"/>  
      <destinition name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <sender action="com.android.vending.billing.PURCHASE_STATE_CHANGED"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingReceiver: void purchaseStateChanged(android.content.Context,java.lang.String,java.lang.String)&gt;"/>  
        <node method="BillingReceiver purchaseStateChanged" type="CreateMethod" unit="r4 = new android.content.Intent"/>  
        <node method="BillingReceiver purchaseStateChanged" type="SetAttribute" unit="specialinvoke r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.android.vending.billing.PURCHASE_STATE_CHANGED&quot;)"/>  
        <node method="BillingReceiver purchaseStateChanged" type="SetAttribute" unit="virtualinvoke r4.&lt;android.content.Intent: android.content.Intent setClass(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Leu/vranckaert/worktime/utils/donations/google/BillingService;&quot;)"/>  
        <node method="BillingReceiver purchaseStateChanged" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;(r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.donations.google.BillingService"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: android.os.IBinder onBind(android.content.Intent)&gt;,android.os.IBinder onBind(android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
        <node method="BillingService onBind" type="ReceiveIntentFromParatMethod" unit="parameter0 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: android.os.IBinder onBind(android.content.Intent)&gt;,android.os.IBinder onBind(android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
        <node method="BillingService onBind" type="ReceiveIntentFromRetValue" unit="parameter0 = virtualinvoke this.&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.widget.Configuration2x1Activity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.widget.Configuration2x1Activity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.widget.Configuration2x1Activity: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.activities.widget.Configuration2x1Activity"/>  
      <destinition name="eu.vranckaert.worktime.activities.tasks.SelectTaskActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.widget.Configuration2x1Activity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="Configuration2x1Activity onActivityResult" type="CreateMethod" unit="$r1 = new android.content.Intent"/>  
        <node method="Configuration2x1Activity onActivityResult" type="SetAttribute" unit="specialinvoke $r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/tasks/SelectTaskActivity;&quot;)"/>  
        <node method="Configuration2x1Activity onActivityResult" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.widget.Configuration2x1Activity: void startActivityForResult(android.content.Intent,int)&gt;($r1, 13)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.widget.Configuration2x1Activity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.widget.Configuration2x1Activity: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.activities.widget.Configuration2x1Activity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.widget.Configuration2x1Activity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="Configuration2x1Activity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.widget.Configuration2x1Activity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.widget.Configuration2x1Activity: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.activities.widget.Configuration2x1Activity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.widget.Configuration2x1Activity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="Configuration2x1Activity onActivityResult" type="CreateMethod" unit="$r1 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.widget.Configuration2x1Activity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.widget.Configuration2x1Activity: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.activities.widget.Configuration2x1Activity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.widget.Configuration2x1Activity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="Configuration2x1Activity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.account.AccountProfileActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountProfileActivity$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountProfileActivity$1: void onClick(android.view.View)&gt;,void onClick(android.view.View)"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountProfileActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncHistoryActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountProfileActivity$1: void onClick(android.view.View)&gt;"/>  
        <node method="AccountProfileActivity$1 onClick" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="AccountProfileActivity$1 onClick" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncHistoryActivity;&quot;)"/>  
        <node method="AccountProfileActivity$1 onClick" type="PassOutIntent" unit="virtualinvoke $r3.&lt;eu.vranckaert.worktime.activities.account.AccountProfileActivity: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.file.DirectoryPicker"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.file.DirectoryPicker: void returnDir(java.io.File)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.file.DirectoryPicker: void returnDir(java.io.File)&gt;,void returnDir(java.io.File)"/>  
      <source name="eu.vranckaert.worktime.utils.file.DirectoryPicker"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.file.DirectoryPicker: void returnDir(java.io.File)&gt;"/>  
        <node method="DirectoryPicker returnDir" type="CreateMethod" unit="r2 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.preferences.PreferencesActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.PreferencesActivity$2: boolean onPreferenceClick(android.preference.Preference)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.PreferencesActivity$2: boolean onPreferenceClick(android.preference.Preference)&gt;,boolean onPreferenceClick(android.preference.Preference)"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.PreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.preferences.ResetPreferencesActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.PreferencesActivity$2: boolean onPreferenceClick(android.preference.Preference)&gt;"/>  
        <node method="PreferencesActivity$2 onPreferenceClick" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PreferencesActivity$2 onPreferenceClick" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Leu/vranckaert/worktime/activities/preferences/ResetPreferencesActivity;&quot;)"/>  
        <node method="PreferencesActivity$2 onPreferenceClick" type="PassOutIntent" unit="virtualinvoke $r3.&lt;eu.vranckaert.worktime.activities.preferences.PreferencesActivity: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationListActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationListActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationListActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;,boolean onOptionsItemSelected(android.view.MenuItem)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationListActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.reporting.ReportingCriteriaActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationListActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
        <node method="TimeRegistrationListActivity onOptionsItemSelected" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="TimeRegistrationListActivity onOptionsItemSelected" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/reporting/ReportingCriteriaActivity;&quot;)"/>  
        <node method="TimeRegistrationListActivity onOptionsItemSelected" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationListActivity: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationListActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationListActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;,boolean onOptionsItemSelected(android.view.MenuItem)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationListActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationAddActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationListActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
        <node method="TimeRegistrationListActivity onOptionsItemSelected" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="TimeRegistrationListActivity onOptionsItemSelected" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationAddActivity;&quot;)"/>  
        <node method="TimeRegistrationListActivity onOptionsItemSelected" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationListActivity: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.jakewharton.notificationcompat2.NotificationCompat2"> 
    <intentSummary> 
      <method value="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder setContentIntent(android.app.PendingIntent)&gt;"/>  
      <methodtrace value="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder setContentIntent(android.app.PendingIntent)&gt;,com.jakewharton.notificationcompat2.NotificationCompat2$Builder setContentIntent(android.app.PendingIntent)"/>  
      <source name="com.jakewharton.notificationcompat2.NotificationCompat2"/>  
      <nodes> 
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder setContentIntent(android.app.PendingIntent)&gt;"/>  
        <node method="NotificationCompat2$Builder setContentIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompat2$Builder setContentIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder setContentIntent(android.app.PendingIntent)&gt;"/>  
      <methodtrace value="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder setContentIntent(android.app.PendingIntent)&gt;,com.jakewharton.notificationcompat2.NotificationCompat2$Builder setContentIntent(android.app.PendingIntent)"/>  
      <source name="com.jakewharton.notificationcompat2.NotificationCompat2"/>  
      <nodes> 
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder setContentIntent(android.app.PendingIntent)&gt;"/>  
        <node method="NotificationCompat2$Builder setContentIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompat2$Builder setContentIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.about.AboutListElement"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.about.AboutListElement: void setIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.about.AboutListElement: void setIntent(android.content.Intent)&gt;,void setIntent(android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.activities.about.AboutListElement"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.about.AboutListElement: void setIntent(android.content.Intent)&gt;"/>  
        <node method="AboutListElement setIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="AboutListElement setIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="AboutListElement setIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="AboutListElement setIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.about.AboutListElement: void setIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.about.AboutListElement: void setIntent(android.content.Intent)&gt;,void setIntent(android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.activities.about.AboutListElement"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.about.AboutListElement: void setIntent(android.content.Intent)&gt;"/>  
        <node method="AboutListElement setIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="AboutListElement setIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="AboutListElement setIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationListActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationListActivity: boolean onContextItemSelected(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationListActivity: boolean onContextItemSelected(android.view.MenuItem)&gt;,boolean onContextItemSelected(android.view.MenuItem)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationListActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationListActivity: boolean onContextItemSelected(android.view.MenuItem)&gt;"/>  
        <node method="TimeRegistrationListActivity onContextItemSelected" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="TimeRegistrationListActivity onContextItemSelected" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationActionActivity;&quot;)"/>  
        <node method="TimeRegistrationListActivity onContextItemSelected" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationListActivity: void startActivityForResult(android.content.Intent,int)&gt;(r2, 2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.projects.ManageProjectsActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: void openEditProjectActivity(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: void openEditProjectActivity(eu.vranckaert.worktime.model.Project)&gt;,void openEditProjectActivity(eu.vranckaert.worktime.model.Project)"/>  
      <source name="eu.vranckaert.worktime.activities.projects.ManageProjectsActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.projects.AddEditProjectActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: void openEditProjectActivity(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="ManageProjectsActivity openEditProjectActivity" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="ManageProjectsActivity openEditProjectActivity" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Leu/vranckaert/worktime/activities/projects/AddEditProjectActivity;&quot;)"/>  
        <node method="ManageProjectsActivity openEditProjectActivity" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: void startActivityForResult(android.content.Intent,int)&gt;(r2, 8)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: void openEditProjectActivity(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: void openEditProjectActivity(eu.vranckaert.worktime.model.Project)&gt;,void openEditProjectActivity(eu.vranckaert.worktime.model.Project)"/>  
      <source name="eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.projects.AddEditProjectActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: void openEditProjectActivity(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="ProjectDetailsActivity openEditProjectActivity" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="ProjectDetailsActivity openEditProjectActivity" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Leu/vranckaert/worktime/activities/projects/AddEditProjectActivity;&quot;)"/>  
        <node method="ProjectDetailsActivity openEditProjectActivity" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: void startActivityForResult(android.content.Intent,int)&gt;(r2, 8)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: void openAddTaskActivity()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: void openAddTaskActivity()&gt;,void openAddTaskActivity()"/>  
      <source name="eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.tasks.AddEditTaskActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: void openAddTaskActivity()&gt;"/>  
        <node method="ProjectDetailsActivity openAddTaskActivity" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="ProjectDetailsActivity openAddTaskActivity" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/tasks/AddEditTaskActivity;&quot;)"/>  
        <node method="ProjectDetailsActivity openAddTaskActivity" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: void startActivityForResult(android.content.Intent,int)&gt;(r1, 7)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: void openReportingCriteriaActivity(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: void openReportingCriteriaActivity(eu.vranckaert.worktime.model.Project)&gt;,void openReportingCriteriaActivity(eu.vranckaert.worktime.model.Project)"/>  
      <source name="eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.reporting.ReportingCriteriaActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: void openReportingCriteriaActivity(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="ProjectDetailsActivity openReportingCriteriaActivity" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="ProjectDetailsActivity openReportingCriteriaActivity" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Leu/vranckaert/worktime/activities/reporting/ReportingCriteriaActivity;&quot;)"/>  
        <node method="ProjectDetailsActivity openReportingCriteriaActivity" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.donations.google.BillingReceiver"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingReceiver: void checkResponseCode(android.content.Context,long,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingReceiver: void checkResponseCode(android.content.Context,long,int)&gt;,void checkResponseCode(android.content.Context,long,int)"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingReceiver"/>  
      <destinition name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <sender action="com.android.vending.billing.RESPONSE_CODE"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingReceiver: void checkResponseCode(android.content.Context,long,int)&gt;"/>  
        <node method="BillingReceiver checkResponseCode" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="BillingReceiver checkResponseCode" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.android.vending.billing.RESPONSE_CODE&quot;)"/>  
        <node method="BillingReceiver checkResponseCode" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setClass(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Leu/vranckaert/worktime/utils/donations/google/BillingService;&quot;)"/>  
        <node method="BillingReceiver checkResponseCode" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.context.IntentUtil"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void goBack(android.content.Context,java.lang.Class)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void goBack(android.content.Context,java.lang.Class)&gt;,void goBack(android.content.Context,java.lang.Class)"/>  
      <source name="eu.vranckaert.worktime.utils.context.IntentUtil"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void goBack(android.content.Context,java.lang.Class)&gt;"/>  
        <node method="IntentUtil goBack" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="IntentUtil goBack" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, $r1)"/>  
        <node method="IntentUtil goBack" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(67108864)"/>  
        <node method="IntentUtil goBack" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.notifcationbar.StatusBarSplitActionHandleActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.notifcationbar.StatusBarSplitActionHandleActivity: void launchTimeRegistrationActionsDialog()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.notifcationbar.StatusBarSplitActionHandleActivity: void launchTimeRegistrationActionsDialog()&gt;,void launchTimeRegistrationActionsDialog()"/>  
      <source name="eu.vranckaert.worktime.activities.notifcationbar.StatusBarSplitActionHandleActivity"/>  
      <destinition name="eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver"/>  
      <sender action="eu.vranckaert.worktime.time_registration_action_split"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.notifcationbar.StatusBarSplitActionHandleActivity: void launchTimeRegistrationActionsDialog()&gt;"/>  
        <node method="StatusBarSplitActionHandleActivity launchTimeRegistrationActionsDialog" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="StatusBarSplitActionHandleActivity launchTimeRegistrationActionsDialog" type="SetAttribute" unit="virtualinvoke r1.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;eu.vranckaert.worktime.time_registration_action_split&quot;)"/>  
        <node method="StatusBarSplitActionHandleActivity launchTimeRegistrationActionsDialog" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.notifcationbar.StatusBarSplitActionHandleActivity: void sendBroadcast(android.content.Intent)&gt;(r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.context.IntentUtil"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void goHome(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void goHome(android.content.Context)&gt;,void goHome(android.content.Context), &lt;eu.vranckaert.worktime.utils.context.IntentUtil: void goBack(android.content.Context,java.lang.Class)&gt;"/>  
      <source name="eu.vranckaert.worktime.utils.context.IntentUtil"/>  
      <destinition name="eu.vranckaert.worktime.activities.HomeActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void goHome(android.content.Context)&gt;"/>  
        <node method="IntentUtil goBack" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, $r1)"/>  
        <node method="IntentUtil goBack" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="IntentUtil goBack" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, $r1)"/>  
        <node method="IntentUtil goBack" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(67108864)"/>  
        <node method="IntentUtil goBack" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.donations.google.BillingReceiver"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingReceiver: void notify(android.content.Context,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingReceiver: void notify(android.content.Context,java.lang.String)&gt;,void notify(android.content.Context,java.lang.String)"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingReceiver"/>  
      <destinition name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <sender action="com.example.dungeons.GET_PURCHASE_INFORMATION"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingReceiver: void notify(android.content.Context,java.lang.String)&gt;"/>  
        <node method="BillingReceiver notify" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="BillingReceiver notify" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.example.dungeons.GET_PURCHASE_INFORMATION&quot;)"/>  
        <node method="BillingReceiver notify" type="SetAttribute" unit="virtualinvoke r3.&lt;android.content.Intent: android.content.Intent setClass(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Leu/vranckaert/worktime/utils/donations/google/BillingService;&quot;)"/>  
        <node method="BillingReceiver notify" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;(r3)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.donations.google.BillingService"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;,boolean bindToMarketBillingService()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <destinition name="interICC_com.android.vending.billing.MarketBillingService.BIND, "/>  
      <sender action="com.android.vending.billing.MarketBillingService.BIND"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
        <node method="BillingService bindToMarketBillingService" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="BillingService bindToMarketBillingService" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.android.vending.billing.MarketBillingService.BIND&quot;)"/>  
        <node method="BillingService bindToMarketBillingService" type="PassOutIntent" unit="$z0 = virtualinvoke r0.&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)&gt;($r2, r0, 1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;,boolean bindToMarketBillingService()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <sender action="com.android.vending.billing.MarketBillingService.BIND"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
        <node method="BillingService bindToMarketBillingService" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="BillingService bindToMarketBillingService" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.android.vending.billing.MarketBillingService.BIND&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;,boolean bindToMarketBillingService()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
        <node method="BillingService bindToMarketBillingService" type="CreateMethod" unit="$r2 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.punchbar.PunchBarClickListener"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.punchbar.PunchBarClickListener: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.punchbar.PunchBarClickListener: void onClick(android.view.View)&gt;,void onClick(android.view.View)"/>  
      <source name="eu.vranckaert.worktime.activities.punchbar.PunchBarClickListener"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationDetailActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.punchbar.PunchBarClickListener: void onClick(android.view.View)&gt;"/>  
        <node method="PunchBarClickListener onClick" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="PunchBarClickListener onClick" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r4, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationDetailActivity;&quot;)"/>  
        <node method="PunchBarClickListener onClick" type="PassOutIntent" unit="virtualinvoke $r4.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.file.DirectoryPicker"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.file.DirectoryPicker: void access$100(eu.vranckaert.worktime.utils.file.DirectoryPicker,java.io.File)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.file.DirectoryPicker: void access$100(eu.vranckaert.worktime.utils.file.DirectoryPicker,java.io.File)&gt;,&lt;eu.vranckaert.worktime.utils.file.DirectoryPicker: void returnDir(java.io.File)&gt;,void returnDir(java.io.File)"/>  
      <source name="eu.vranckaert.worktime.utils.file.DirectoryPicker"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.file.DirectoryPicker: void access$100(eu.vranckaert.worktime.utils.file.DirectoryPicker,java.io.File)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.file.DirectoryPicker: void returnDir(java.io.File)&gt;"/>  
        <node method="DirectoryPicker returnDir" type="CreateMethod" unit="r2 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.donations.DonationsActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.DonationsActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.DonationsActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="eu.vranckaert.worktime.utils.donations.DonationsActivity"/>  
      <destinition name="eu.vranckaert.worktime.utils.donations.DonationsFragment"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.DonationsActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="DonationsActivity onCreate" type="setContentView" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.utils.donations.DonationsActivity: void setContentView(int)&gt;(2130903077)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.HomeActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.HomeActivity: void launchActivity(java.lang.Class)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.HomeActivity: void launchActivity(java.lang.Class)&gt;,void launchActivity(java.lang.Class)"/>  
      <source name="eu.vranckaert.worktime.activities.HomeActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.HomeActivity: void launchActivity(java.lang.Class)&gt;"/>  
        <node method="HomeActivity launchActivity" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="HomeActivity launchActivity" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, $r1)"/>  
        <node method="HomeActivity launchActivity" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.HomeActivity: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.about.AboutListElement"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.about.AboutListElement: android.content.Intent getIntent()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.about.AboutListElement: android.content.Intent getIntent()&gt;,android.content.Intent getIntent()"/>  
      <source name="eu.vranckaert.worktime.activities.about.AboutListElement"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.about.AboutListElement: android.content.Intent getIntent()&gt;"/>  
        <node method="AboutListElement getIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="AboutListElement getIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="AboutListElement getIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="AboutListElement getIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: void openReportingCriteriaActivity(eu.vranckaert.worktime.model.Project,eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: void openReportingCriteriaActivity(eu.vranckaert.worktime.model.Project,eu.vranckaert.worktime.model.Task)&gt;,void openReportingCriteriaActivity(eu.vranckaert.worktime.model.Project,eu.vranckaert.worktime.model.Task)"/>  
      <source name="eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.reporting.ReportingCriteriaActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: void openReportingCriteriaActivity(eu.vranckaert.worktime.model.Project,eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="ProjectDetailsActivity openReportingCriteriaActivity" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="ProjectDetailsActivity openReportingCriteriaActivity" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r4, class &quot;Leu/vranckaert/worktime/activities/reporting/ReportingCriteriaActivity;&quot;)"/>  
        <node method="ProjectDetailsActivity openReportingCriteriaActivity" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: void startActivity(android.content.Intent)&gt;(r3)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity: void showProjectChooser()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity: void showProjectChooser()&gt;,void showProjectChooser()"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.projects.SelectProjectActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity: void showProjectChooser()&gt;"/>  
        <node method="TimeRegistrationPunchInActivity showProjectChooser" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="TimeRegistrationPunchInActivity showProjectChooser" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/projects/SelectProjectActivity;&quot;)"/>  
        <node method="TimeRegistrationPunchInActivity showProjectChooser" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity: void startActivityForResult(android.content.Intent,int)&gt;(r1, 11)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGenericPreferenceActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGenericPreferenceActivity$SyncCheck: void onProgressUpdate(java.lang.Void[])&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGenericPreferenceActivity$SyncCheck: void onProgressUpdate(java.lang.Void[])&gt;,void onProgressUpdate(java.lang.Void[])"/>  
      <source name="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGenericPreferenceActivity"/>  
      <destinition name="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockingActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGenericPreferenceActivity$SyncCheck: void onProgressUpdate(java.lang.Void[])&gt;"/>  
        <node method="SyncLockedGenericPreferenceActivity$SyncCheck onProgressUpdate" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="SyncLockedGenericPreferenceActivity$SyncCheck onProgressUpdate" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r4, class &quot;Leu/vranckaert/worktime/utils/view/actionbar/synclock/SyncLockingActivity;&quot;)"/>  
        <node method="SyncLockedGenericPreferenceActivity$SyncCheck onProgressUpdate" type="PassOutIntent" unit="virtualinvoke $r3.&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGenericPreferenceActivity: void startActivityForResult(android.content.Intent,int)&gt;($r2, 16)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGenericPreferenceActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGenericPreferenceActivity$SyncCheck: void onProgressUpdate(java.lang.Object[])&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGenericPreferenceActivity$SyncCheck: void onProgressUpdate(java.lang.Object[])&gt;,&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGenericPreferenceActivity$SyncCheck: void onProgressUpdate(java.lang.Void[])&gt;,void onProgressUpdate(java.lang.Void[])"/>  
      <source name="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGenericPreferenceActivity"/>  
      <destinition name="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockingActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGenericPreferenceActivity$SyncCheck: void onProgressUpdate(java.lang.Object[])&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGenericPreferenceActivity$SyncCheck: void onProgressUpdate(java.lang.Void[])&gt;"/>  
        <node method="SyncLockedGenericPreferenceActivity$SyncCheck onProgressUpdate" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="SyncLockedGenericPreferenceActivity$SyncCheck onProgressUpdate" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r4, class &quot;Leu/vranckaert/worktime/utils/view/actionbar/synclock/SyncLockingActivity;&quot;)"/>  
        <node method="SyncLockedGenericPreferenceActivity$SyncCheck onProgressUpdate" type="PassOutIntent" unit="virtualinvoke $r3.&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGenericPreferenceActivity: void startActivityForResult(android.content.Intent,int)&gt;($r2, 16)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.projects.ManageProjectsActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: void openAddProjectActivity()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: void openAddProjectActivity()&gt;,void openAddProjectActivity()"/>  
      <source name="eu.vranckaert.worktime.activities.projects.ManageProjectsActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.projects.AddEditProjectActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: void openAddProjectActivity()&gt;"/>  
        <node method="ManageProjectsActivity openAddProjectActivity" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="ManageProjectsActivity openAddProjectActivity" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Leu/vranckaert/worktime/activities/projects/AddEditProjectActivity;&quot;)"/>  
        <node method="ManageProjectsActivity openAddProjectActivity" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: void startActivityForResult(android.content.Intent,int)&gt;(r1, 6)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.view.actionbar.SimpleMenu"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.view.actionbar.SimpleMenu: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,android.view.MenuItem[])&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.view.actionbar.SimpleMenu: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,android.view.MenuItem[])&gt;,int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,android.view.MenuItem[])"/>  
      <source name="eu.vranckaert.worktime.utils.view.actionbar.SimpleMenu"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.view.actionbar.SimpleMenu: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,android.view.MenuItem[])&gt;"/>  
        <node method="SimpleMenu addIntentOptions" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter4: android.content.Intent[]"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.view.actionbar.SimpleMenu: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,android.view.MenuItem[])&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.view.actionbar.SimpleMenu: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,android.view.MenuItem[])&gt;,int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,android.view.MenuItem[])"/>  
      <source name="eu.vranckaert.worktime.utils.view.actionbar.SimpleMenu"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.view.actionbar.SimpleMenu: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,android.view.MenuItem[])&gt;"/>  
        <node method="SimpleMenu addIntentOptions" type="ReceiveIntentFromParatMethod" unit="$r3 := @parameter5: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.HomeActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.HomeActivity: void onProjectsClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.HomeActivity: void onProjectsClick(android.view.View)&gt;,void onProjectsClick(android.view.View), &lt;eu.vranckaert.worktime.activities.HomeActivity: void launchActivity(java.lang.Class)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.HomeActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.projects.ManageProjectsActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.HomeActivity: void onProjectsClick(android.view.View)&gt;"/>  
        <node method="HomeActivity launchActivity" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, $r1)"/>  
        <node method="HomeActivity launchActivity" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="HomeActivity launchActivity" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, $r1)"/>  
        <node method="HomeActivity launchActivity" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.HomeActivity: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.jakewharton.notificationcompat2.NotificationCompatICS"> 
    <intentSummary> 
      <method value="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
      <methodtrace value="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)"/>  
      <source name="com.jakewharton.notificationcompat2.NotificationCompatICS"/>  
      <nodes> 
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;($r8, $z0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
      <methodtrace value="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)"/>  
      <source name="com.jakewharton.notificationcompat2.NotificationCompatICS"/>  
      <nodes> 
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setDeleteIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;($r8, $z0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
      <methodtrace value="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)"/>  
      <source name="com.jakewharton.notificationcompat2.NotificationCompatICS"/>  
      <nodes> 
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setDeleteIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;($r8, $z0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.projects.SelectProjectActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.projects.SelectProjectActivity$2: void onClick(android.content.DialogInterface,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.projects.SelectProjectActivity$2: void onClick(android.content.DialogInterface,int)&gt;,void onClick(android.content.DialogInterface,int)"/>  
      <source name="eu.vranckaert.worktime.activities.projects.SelectProjectActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.projects.AddEditProjectActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.projects.SelectProjectActivity$2: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="SelectProjectActivity$2 onClick" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="SelectProjectActivity$2 onClick" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r6, class &quot;Leu/vranckaert/worktime/activities/projects/AddEditProjectActivity;&quot;)"/>  
        <node method="SelectProjectActivity$2 onClick" type="PassOutIntent" unit="virtualinvoke $r6.&lt;eu.vranckaert.worktime.activities.projects.SelectProjectActivity: void startActivityForResult(android.content.Intent,int)&gt;(r2, 6)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.projects.SelectProjectActivity$2: void onClick(android.content.DialogInterface,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.projects.SelectProjectActivity$2: void onClick(android.content.DialogInterface,int)&gt;,void onClick(android.content.DialogInterface,int)"/>  
      <source name="eu.vranckaert.worktime.activities.projects.SelectProjectActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.projects.SelectProjectActivity$2: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="SelectProjectActivity$2 onClick" type="CreateMethod" unit="r2 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.jakewharton.notificationcompat2.NotificationCompatJB"> 
    <intentSummary> 
      <method value="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
      <methodtrace value="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)"/>  
      <source name="com.jakewharton.notificationcompat2.NotificationCompatJB"/>  
      <nodes> 
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;($r8, $z0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
      <methodtrace value="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)"/>  
      <source name="com.jakewharton.notificationcompat2.NotificationCompatJB"/>  
      <nodes> 
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setDeleteIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;($r8, $z0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
      <methodtrace value="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)"/>  
      <source name="com.jakewharton.notificationcompat2.NotificationCompatJB"/>  
      <nodes> 
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setDeleteIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;($r8, $z0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.jakewharton.notificationcompat2.NotificationCompatJB"> 
    <intentSummary> 
      <method value="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigTextStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle)&gt;"/>  
      <methodtrace value="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigTextStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)"/>  
      <source name="com.jakewharton.notificationcompat2.NotificationCompatJB"/>  
      <nodes> 
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigTextStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;($r8, $z0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigTextStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle)&gt;"/>  
      <methodtrace value="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigTextStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)"/>  
      <source name="com.jakewharton.notificationcompat2.NotificationCompatJB"/>  
      <nodes> 
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigTextStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setDeleteIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;($r8, $z0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigTextStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle)&gt;"/>  
      <methodtrace value="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigTextStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)"/>  
      <source name="com.jakewharton.notificationcompat2.NotificationCompatJB"/>  
      <nodes> 
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigTextStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setDeleteIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;($r8, $z0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationDetailActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationDetailActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationDetailActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;,boolean onOptionsItemSelected(android.view.MenuItem)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationDetailActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationDetailActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
        <node method="TimeRegistrationDetailActivity onOptionsItemSelected" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="TimeRegistrationDetailActivity onOptionsItemSelected" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationActionActivity;&quot;)"/>  
        <node method="TimeRegistrationDetailActivity onOptionsItemSelected" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationDetailActivity: void startActivityForResult(android.content.Intent,int)&gt;(r2, 2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGuiceActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGuiceActivity$SyncCheck: void onProgressUpdate(java.lang.Void[])&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGuiceActivity$SyncCheck: void onProgressUpdate(java.lang.Void[])&gt;,void onProgressUpdate(java.lang.Void[])"/>  
      <source name="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGuiceActivity"/>  
      <destinition name="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockingActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGuiceActivity$SyncCheck: void onProgressUpdate(java.lang.Void[])&gt;"/>  
        <node method="SyncLockedGuiceActivity$SyncCheck onProgressUpdate" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="SyncLockedGuiceActivity$SyncCheck onProgressUpdate" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r4, class &quot;Leu/vranckaert/worktime/utils/view/actionbar/synclock/SyncLockingActivity;&quot;)"/>  
        <node method="SyncLockedGuiceActivity$SyncCheck onProgressUpdate" type="PassOutIntent" unit="virtualinvoke $r3.&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGuiceActivity: void startActivityForResult(android.content.Intent,int)&gt;($r2, 16)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.tasks.SelectTaskActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.tasks.SelectTaskActivity$2: void onClick(android.content.DialogInterface,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.tasks.SelectTaskActivity$2: void onClick(android.content.DialogInterface,int)&gt;,void onClick(android.content.DialogInterface,int)"/>  
      <source name="eu.vranckaert.worktime.activities.tasks.SelectTaskActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.tasks.AddEditTaskActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.tasks.SelectTaskActivity$2: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="SelectTaskActivity$2 onClick" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="SelectTaskActivity$2 onClick" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r6, class &quot;Leu/vranckaert/worktime/activities/tasks/AddEditTaskActivity;&quot;)"/>  
        <node method="SelectTaskActivity$2 onClick" type="PassOutIntent" unit="virtualinvoke $r6.&lt;eu.vranckaert.worktime.activities.tasks.SelectTaskActivity: void startActivityForResult(android.content.Intent,int)&gt;(r2, 7)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.tasks.SelectTaskActivity$2: void onClick(android.content.DialogInterface,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.tasks.SelectTaskActivity$2: void onClick(android.content.DialogInterface,int)&gt;,void onClick(android.content.DialogInterface,int)"/>  
      <source name="eu.vranckaert.worktime.activities.tasks.SelectTaskActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.tasks.SelectTaskActivity$2: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="SelectTaskActivity$2 onClick" type="CreateMethod" unit="r2 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.account.AccountSyncService"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: android.os.IBinder onBind(android.content.Intent)&gt;,android.os.IBinder onBind(android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
        <node method="AccountSyncService onBind" type="ReceiveIntentFromParatMethod" unit="parameter0 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: android.os.IBinder onBind(android.content.Intent)&gt;,android.os.IBinder onBind(android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: android.os.IBinder onBind(android.content.Intent)&gt;"/>  
        <node method="AccountSyncService onBind" type="ReceiveIntentFromRetValue" unit="parameter0 = virtualinvoke this.&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.HomeActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.HomeActivity: void onTimeRegistrationsClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.HomeActivity: void onTimeRegistrationsClick(android.view.View)&gt;,void onTimeRegistrationsClick(android.view.View), &lt;eu.vranckaert.worktime.activities.HomeActivity: void launchActivity(java.lang.Class)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.HomeActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationListActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.HomeActivity: void onTimeRegistrationsClick(android.view.View)&gt;"/>  
        <node method="HomeActivity launchActivity" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, $r1)"/>  
        <node method="HomeActivity launchActivity" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="HomeActivity launchActivity" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, $r1)"/>  
        <node method="HomeActivity launchActivity" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.HomeActivity: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.about.AboutActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.about.AboutActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.about.AboutActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;,&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void goBack(android.content.Context,java.lang.Class)&gt;,void goBack(android.content.Context,java.lang.Class)"/>  
      <source name="eu.vranckaert.worktime.activities.about.AboutActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.about.AboutActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void goBack(android.content.Context,java.lang.Class)&gt;"/>  
        <node method="IntentUtil goBack" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="IntentUtil goBack" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, $r1)"/>  
        <node method="IntentUtil goBack" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(67108864)"/>  
        <node method="IntentUtil goBack" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.about.AboutActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.about.AboutActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;,boolean onOptionsItemSelected(android.view.MenuItem), &lt;eu.vranckaert.worktime.utils.context.IntentUtil: void goHome(android.content.Context)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.about.AboutActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.about.AboutActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.preferences.PreferencesActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.PreferencesActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.PreferencesActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;,boolean onOptionsItemSelected(android.view.MenuItem), &lt;eu.vranckaert.worktime.utils.context.IntentUtil: void goHome(android.content.Context)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.PreferencesActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.PreferencesActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.PreferencesActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.PreferencesActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;,&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void goBack(android.content.Context,java.lang.Class)&gt;,void goBack(android.content.Context,java.lang.Class)"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.PreferencesActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.PreferencesActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void goBack(android.content.Context,java.lang.Class)&gt;"/>  
        <node method="IntentUtil goBack" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="IntentUtil goBack" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, $r1)"/>  
        <node method="IntentUtil goBack" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(67108864)"/>  
        <node method="IntentUtil goBack" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.file.DirectoryPicker"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.file.DirectoryPicker$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.file.DirectoryPicker$1: void onClick(android.view.View)&gt;,&lt;eu.vranckaert.worktime.utils.file.DirectoryPicker: void access$100(eu.vranckaert.worktime.utils.file.DirectoryPicker,java.io.File)&gt;,&lt;eu.vranckaert.worktime.utils.file.DirectoryPicker: void returnDir(java.io.File)&gt;,void returnDir(java.io.File)"/>  
      <source name="eu.vranckaert.worktime.utils.file.DirectoryPicker"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.file.DirectoryPicker$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.file.DirectoryPicker: void access$100(eu.vranckaert.worktime.utils.file.DirectoryPicker,java.io.File)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.file.DirectoryPicker: void returnDir(java.io.File)&gt;"/>  
        <node method="DirectoryPicker returnDir" type="CreateMethod" unit="r2 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedPreferenceActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedPreferenceActivity$SyncCheck: void onProgressUpdate(java.lang.Void[])&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedPreferenceActivity$SyncCheck: void onProgressUpdate(java.lang.Void[])&gt;,void onProgressUpdate(java.lang.Void[])"/>  
      <source name="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedPreferenceActivity"/>  
      <destinition name="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockingActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedPreferenceActivity$SyncCheck: void onProgressUpdate(java.lang.Void[])&gt;"/>  
        <node method="SyncLockedPreferenceActivity$SyncCheck onProgressUpdate" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="SyncLockedPreferenceActivity$SyncCheck onProgressUpdate" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r4, class &quot;Leu/vranckaert/worktime/utils/view/actionbar/synclock/SyncLockingActivity;&quot;)"/>  
        <node method="SyncLockedPreferenceActivity$SyncCheck onProgressUpdate" type="PassOutIntent" unit="virtualinvoke $r3.&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedPreferenceActivity: void startActivityForResult(android.content.Intent,int)&gt;($r2, 16)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.HomeActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.HomeActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.HomeActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;,boolean onOptionsItemSelected(android.view.MenuItem), &lt;eu.vranckaert.worktime.activities.HomeActivity: void launchActivity(java.lang.Class)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.HomeActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.about.AboutActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.HomeActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
        <node method="HomeActivity launchActivity" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, $r1)"/>  
        <node method="HomeActivity launchActivity" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="HomeActivity launchActivity" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, $r1)"/>  
        <node method="HomeActivity launchActivity" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.HomeActivity: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.HomeActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.HomeActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;,boolean onOptionsItemSelected(android.view.MenuItem), &lt;eu.vranckaert.worktime.activities.HomeActivity: void launchActivity(java.lang.Class)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.HomeActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountLoginActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.HomeActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
        <node method="HomeActivity launchActivity" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, $r1)"/>  
        <node method="HomeActivity launchActivity" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="HomeActivity launchActivity" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, $r1)"/>  
        <node method="HomeActivity launchActivity" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.HomeActivity: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.jakewharton.notificationcompat2.NotificationCompatJB"> 
    <intentSummary> 
      <method value="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification build(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
      <methodtrace value="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification build(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)"/>  
      <source name="com.jakewharton.notificationcompat2.NotificationCompatJB"/>  
      <nodes> 
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification build(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;($r8, $z0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification build(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
      <methodtrace value="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification build(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)"/>  
      <source name="com.jakewharton.notificationcompat2.NotificationCompatJB"/>  
      <nodes> 
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification build(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setDeleteIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;($r8, $z0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification build(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
      <methodtrace value="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification build(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)"/>  
      <source name="com.jakewharton.notificationcompat2.NotificationCompatJB"/>  
      <nodes> 
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification build(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setDeleteIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;($r8, $z0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedListActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedListActivity$SyncCheck: void onProgressUpdate(java.lang.Void[])&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedListActivity$SyncCheck: void onProgressUpdate(java.lang.Void[])&gt;,void onProgressUpdate(java.lang.Void[])"/>  
      <source name="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedListActivity"/>  
      <destinition name="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockingActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedListActivity$SyncCheck: void onProgressUpdate(java.lang.Void[])&gt;"/>  
        <node method="SyncLockedListActivity$SyncCheck onProgressUpdate" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="SyncLockedListActivity$SyncCheck onProgressUpdate" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r4, class &quot;Leu/vranckaert/worktime/utils/view/actionbar/synclock/SyncLockingActivity;&quot;)"/>  
        <node method="SyncLockedListActivity$SyncCheck onProgressUpdate" type="PassOutIntent" unit="virtualinvoke $r3.&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedListActivity: void startActivityForResult(android.content.Intent,int)&gt;($r2, 16)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.HomeActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.HomeActivity: void onReportingClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.HomeActivity: void onReportingClick(android.view.View)&gt;,void onReportingClick(android.view.View), &lt;eu.vranckaert.worktime.activities.HomeActivity: void launchActivity(java.lang.Class)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.HomeActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.reporting.ReportingCriteriaActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.HomeActivity: void onReportingClick(android.view.View)&gt;"/>  
        <node method="HomeActivity launchActivity" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, $r1)"/>  
        <node method="HomeActivity launchActivity" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="HomeActivity launchActivity" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, $r1)"/>  
        <node method="HomeActivity launchActivity" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.HomeActivity: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.jakewharton.notificationcompat2.NotificationCompatJB"> 
    <intentSummary> 
      <method value="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigPictureStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigPictureStyle)&gt;"/>  
      <methodtrace value="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigPictureStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigPictureStyle)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)"/>  
      <source name="com.jakewharton.notificationcompat2.NotificationCompatJB"/>  
      <nodes> 
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigPictureStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigPictureStyle)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;($r8, $z0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigPictureStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigPictureStyle)&gt;"/>  
      <methodtrace value="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigPictureStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigPictureStyle)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)"/>  
      <source name="com.jakewharton.notificationcompat2.NotificationCompatJB"/>  
      <nodes> 
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigPictureStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigPictureStyle)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setDeleteIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;($r8, $z0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigPictureStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigPictureStyle)&gt;"/>  
      <methodtrace value="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigPictureStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigPictureStyle)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)"/>  
      <source name="com.jakewharton.notificationcompat2.NotificationCompatJB"/>  
      <nodes> 
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigPictureStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigPictureStyle)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setDeleteIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;($r8, $z0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.jakewharton.notificationcompat2.NotificationCompatICS"> 
    <intentSummary> 
      <method value="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification build(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
      <methodtrace value="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification build(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)"/>  
      <source name="com.jakewharton.notificationcompat2.NotificationCompatICS"/>  
      <nodes> 
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification build(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;($r8, $z0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification build(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
      <methodtrace value="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification build(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)"/>  
      <source name="com.jakewharton.notificationcompat2.NotificationCompatICS"/>  
      <nodes> 
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification build(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setDeleteIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;($r8, $z0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification build(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
      <methodtrace value="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification build(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)"/>  
      <source name="com.jakewharton.notificationcompat2.NotificationCompatICS"/>  
      <nodes> 
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification build(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setDeleteIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;($r8, $z0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedActivity$SyncCheck: void onProgressUpdate(java.lang.Void[])&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedActivity$SyncCheck: void onProgressUpdate(java.lang.Void[])&gt;,void onProgressUpdate(java.lang.Void[])"/>  
      <source name="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedActivity"/>  
      <destinition name="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockingActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedActivity$SyncCheck: void onProgressUpdate(java.lang.Void[])&gt;"/>  
        <node method="SyncLockedActivity$SyncCheck onProgressUpdate" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="SyncLockedActivity$SyncCheck onProgressUpdate" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r4, class &quot;Leu/vranckaert/worktime/utils/view/actionbar/synclock/SyncLockingActivity;&quot;)"/>  
        <node method="SyncLockedActivity$SyncCheck onProgressUpdate" type="PassOutIntent" unit="virtualinvoke $r3.&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedActivity: void startActivityForResult(android.content.Intent,int)&gt;($r2, 16)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.jakewharton.notificationcompat2.NotificationCompatJB"> 
    <intentSummary> 
      <method value="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildInboxStyle(com.jakewharton.notificationcompat2.NotificationCompat2$InboxStyle)&gt;"/>  
      <methodtrace value="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildInboxStyle(com.jakewharton.notificationcompat2.NotificationCompat2$InboxStyle)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)"/>  
      <source name="com.jakewharton.notificationcompat2.NotificationCompatJB"/>  
      <nodes> 
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildInboxStyle(com.jakewharton.notificationcompat2.NotificationCompat2$InboxStyle)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;($r8, $z0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildInboxStyle(com.jakewharton.notificationcompat2.NotificationCompat2$InboxStyle)&gt;"/>  
      <methodtrace value="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildInboxStyle(com.jakewharton.notificationcompat2.NotificationCompat2$InboxStyle)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)"/>  
      <source name="com.jakewharton.notificationcompat2.NotificationCompatJB"/>  
      <nodes> 
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildInboxStyle(com.jakewharton.notificationcompat2.NotificationCompat2$InboxStyle)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setDeleteIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;($r8, $z0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildInboxStyle(com.jakewharton.notificationcompat2.NotificationCompat2$InboxStyle)&gt;"/>  
      <methodtrace value="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildInboxStyle(com.jakewharton.notificationcompat2.NotificationCompat2$InboxStyle)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)"/>  
      <source name="com.jakewharton.notificationcompat2.NotificationCompatJB"/>  
      <nodes> 
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildInboxStyle(com.jakewharton.notificationcompat2.NotificationCompat2$InboxStyle)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setDeleteIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;($r8, $z0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.donations.google.BillingService"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;,boolean bindToMarketBillingService()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <destinition name="interICC_com.android.vending.billing.MarketBillingService.BIND, "/>  
      <sender action="com.android.vending.billing.MarketBillingService.BIND"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
        <node method="BillingService bindToMarketBillingService" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="BillingService bindToMarketBillingService" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.android.vending.billing.MarketBillingService.BIND&quot;)"/>  
        <node method="BillingService bindToMarketBillingService" type="PassOutIntent" unit="$z0 = virtualinvoke r0.&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)&gt;($r2, r0, 1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;,boolean bindToMarketBillingService()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <sender action="com.android.vending.billing.MarketBillingService.BIND"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
        <node method="BillingService bindToMarketBillingService" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="BillingService bindToMarketBillingService" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.android.vending.billing.MarketBillingService.BIND&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;,boolean bindToMarketBillingService()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
        <node method="BillingService bindToMarketBillingService" type="CreateMethod" unit="$r2 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.HomeActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.HomeActivity: void onPreferencesClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.HomeActivity: void onPreferencesClick(android.view.View)&gt;,void onPreferencesClick(android.view.View), &lt;eu.vranckaert.worktime.activities.HomeActivity: void launchActivity(java.lang.Class)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.HomeActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.preferences.PreferencesActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.HomeActivity: void onPreferencesClick(android.view.View)&gt;"/>  
        <node method="HomeActivity launchActivity" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, $r1)"/>  
        <node method="HomeActivity launchActivity" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="HomeActivity launchActivity" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, $r1)"/>  
        <node method="HomeActivity launchActivity" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.HomeActivity: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedListActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedListActivity$SyncCheck: void onProgressUpdate(java.lang.Object[])&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedListActivity$SyncCheck: void onProgressUpdate(java.lang.Object[])&gt;,&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedListActivity$SyncCheck: void onProgressUpdate(java.lang.Void[])&gt;,void onProgressUpdate(java.lang.Void[])"/>  
      <source name="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedListActivity"/>  
      <destinition name="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockingActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedListActivity$SyncCheck: void onProgressUpdate(java.lang.Object[])&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedListActivity$SyncCheck: void onProgressUpdate(java.lang.Void[])&gt;"/>  
        <node method="SyncLockedListActivity$SyncCheck onProgressUpdate" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="SyncLockedListActivity$SyncCheck onProgressUpdate" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r4, class &quot;Leu/vranckaert/worktime/utils/view/actionbar/synclock/SyncLockingActivity;&quot;)"/>  
        <node method="SyncLockedListActivity$SyncCheck onProgressUpdate" type="PassOutIntent" unit="virtualinvoke $r3.&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedListActivity: void startActivityForResult(android.content.Intent,int)&gt;($r2, 16)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGuiceActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGuiceActivity$SyncCheck: void onProgressUpdate(java.lang.Object[])&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGuiceActivity$SyncCheck: void onProgressUpdate(java.lang.Object[])&gt;,&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGuiceActivity$SyncCheck: void onProgressUpdate(java.lang.Void[])&gt;,void onProgressUpdate(java.lang.Void[])"/>  
      <source name="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGuiceActivity"/>  
      <destinition name="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockingActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGuiceActivity$SyncCheck: void onProgressUpdate(java.lang.Object[])&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGuiceActivity$SyncCheck: void onProgressUpdate(java.lang.Void[])&gt;"/>  
        <node method="SyncLockedGuiceActivity$SyncCheck onProgressUpdate" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="SyncLockedGuiceActivity$SyncCheck onProgressUpdate" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r4, class &quot;Leu/vranckaert/worktime/utils/view/actionbar/synclock/SyncLockingActivity;&quot;)"/>  
        <node method="SyncLockedGuiceActivity$SyncCheck onProgressUpdate" type="PassOutIntent" unit="virtualinvoke $r3.&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGuiceActivity: void startActivityForResult(android.content.Intent,int)&gt;($r2, 16)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedWizardActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedWizardActivity$SyncCheck: void onProgressUpdate(java.lang.Void[])&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedWizardActivity$SyncCheck: void onProgressUpdate(java.lang.Void[])&gt;,void onProgressUpdate(java.lang.Void[])"/>  
      <source name="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedWizardActivity"/>  
      <destinition name="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockingActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedWizardActivity$SyncCheck: void onProgressUpdate(java.lang.Void[])&gt;"/>  
        <node method="SyncLockedWizardActivity$SyncCheck onProgressUpdate" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="SyncLockedWizardActivity$SyncCheck onProgressUpdate" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r4, class &quot;Leu/vranckaert/worktime/utils/view/actionbar/synclock/SyncLockingActivity;&quot;)"/>  
        <node method="SyncLockedWizardActivity$SyncCheck onProgressUpdate" type="PassOutIntent" unit="virtualinvoke $r3.&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedWizardActivity: void startActivityForResult(android.content.Intent,int)&gt;($r2, 16)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedPreferenceActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedPreferenceActivity$SyncCheck: void onProgressUpdate(java.lang.Object[])&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedPreferenceActivity$SyncCheck: void onProgressUpdate(java.lang.Object[])&gt;,&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedPreferenceActivity$SyncCheck: void onProgressUpdate(java.lang.Void[])&gt;,void onProgressUpdate(java.lang.Void[])"/>  
      <source name="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedPreferenceActivity"/>  
      <destinition name="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockingActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedPreferenceActivity$SyncCheck: void onProgressUpdate(java.lang.Object[])&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedPreferenceActivity$SyncCheck: void onProgressUpdate(java.lang.Void[])&gt;"/>  
        <node method="SyncLockedPreferenceActivity$SyncCheck onProgressUpdate" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="SyncLockedPreferenceActivity$SyncCheck onProgressUpdate" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r4, class &quot;Leu/vranckaert/worktime/utils/view/actionbar/synclock/SyncLockingActivity;&quot;)"/>  
        <node method="SyncLockedPreferenceActivity$SyncCheck onProgressUpdate" type="PassOutIntent" unit="virtualinvoke $r3.&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedPreferenceActivity: void startActivityForResult(android.content.Intent,int)&gt;($r2, 16)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.jakewharton.notificationcompat2.NotificationCompat2"> 
    <intentSummary> 
      <method value="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;,com.jakewharton.notificationcompat2.NotificationCompat2$Builder setFullScreenIntent(android.app.PendingIntent,boolean)"/>  
      <source name="com.jakewharton.notificationcompat2.NotificationCompat2"/>  
      <nodes> 
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;"/>  
        <node method="NotificationCompat2$Builder setFullScreenIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompat2$Builder setFullScreenIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;"/>  
      <methodtrace value="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;,com.jakewharton.notificationcompat2.NotificationCompat2$Builder setFullScreenIntent(android.app.PendingIntent,boolean)"/>  
      <source name="com.jakewharton.notificationcompat2.NotificationCompat2"/>  
      <nodes> 
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;"/>  
        <node method="NotificationCompat2$Builder setFullScreenIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompat2$Builder setFullScreenIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.donations.DonationsFragment"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.DonationsFragment: void donatePayPalOnClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.DonationsFragment: void donatePayPalOnClick(android.view.View)&gt;,void donatePayPalOnClick(android.view.View)"/>  
      <source name="eu.vranckaert.worktime.utils.donations.DonationsFragment"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.DonationsFragment: void donatePayPalOnClick(android.view.View)&gt;"/>  
        <node method="DonationsFragment donatePayPalOnClick" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="DonationsFragment donatePayPalOnClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.utils.donations.DonationsFragment: void startActivity(android.content.Intent)&gt;(r3)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.punchbar.PunchBarUtil"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.punchbar.PunchBarUtil: void onPunchButtonClick(android.app.Activity,eu.vranckaert.worktime.service.TimeRegistrationService)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.punchbar.PunchBarUtil: void onPunchButtonClick(android.app.Activity,eu.vranckaert.worktime.service.TimeRegistrationService)&gt;,void onPunchButtonClick(android.app.Activity,eu.vranckaert.worktime.service.TimeRegistrationService)"/>  
      <source name="eu.vranckaert.worktime.utils.punchbar.PunchBarUtil"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.punchbar.PunchBarUtil: void onPunchButtonClick(android.app.Activity,eu.vranckaert.worktime.service.TimeRegistrationService)&gt;"/>  
        <node method="PunchBarUtil onPunchButtonClick" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="PunchBarUtil onPunchButtonClick" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationPunchInActivity;&quot;)"/>  
        <node method="PunchBarUtil onPunchButtonClick" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.app.Activity: void startActivityForResult(android.content.Intent,int)&gt;(r3, 4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.punchbar.PunchBarUtil: void onPunchButtonClick(android.app.Activity,eu.vranckaert.worktime.service.TimeRegistrationService)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.punchbar.PunchBarUtil: void onPunchButtonClick(android.app.Activity,eu.vranckaert.worktime.service.TimeRegistrationService)&gt;,void onPunchButtonClick(android.app.Activity,eu.vranckaert.worktime.service.TimeRegistrationService)"/>  
      <source name="eu.vranckaert.worktime.utils.punchbar.PunchBarUtil"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.punchbar.PunchBarUtil: void onPunchButtonClick(android.app.Activity,eu.vranckaert.worktime.service.TimeRegistrationService)&gt;"/>  
        <node method="PunchBarUtil onPunchButtonClick" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="PunchBarUtil onPunchButtonClick" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationActionActivity;&quot;)"/>  
        <node method="PunchBarUtil onPunchButtonClick" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.app.Activity: void startActivityForResult(android.content.Intent,int)&gt;(r3, 5)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedActivity$SyncCheck: void onProgressUpdate(java.lang.Object[])&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedActivity$SyncCheck: void onProgressUpdate(java.lang.Object[])&gt;,&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedActivity$SyncCheck: void onProgressUpdate(java.lang.Void[])&gt;,void onProgressUpdate(java.lang.Void[])"/>  
      <source name="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedActivity"/>  
      <destinition name="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockingActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedActivity$SyncCheck: void onProgressUpdate(java.lang.Object[])&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedActivity$SyncCheck: void onProgressUpdate(java.lang.Void[])&gt;"/>  
        <node method="SyncLockedActivity$SyncCheck onProgressUpdate" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="SyncLockedActivity$SyncCheck onProgressUpdate" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r4, class &quot;Leu/vranckaert/worktime/utils/view/actionbar/synclock/SyncLockingActivity;&quot;)"/>  
        <node method="SyncLockedActivity$SyncCheck onProgressUpdate" type="PassOutIntent" unit="virtualinvoke $r3.&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedActivity: void startActivityForResult(android.content.Intent,int)&gt;($r2, 16)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.HomeActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.HomeActivity: void onPunchButtonClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.HomeActivity: void onPunchButtonClick(android.view.View)&gt;,&lt;eu.vranckaert.worktime.utils.punchbar.PunchBarUtil: void onPunchButtonClick(android.app.Activity,eu.vranckaert.worktime.service.TimeRegistrationService)&gt;,void onPunchButtonClick(android.app.Activity,eu.vranckaert.worktime.service.TimeRegistrationService)"/>  
      <source name="eu.vranckaert.worktime.activities.HomeActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.HomeActivity: void onPunchButtonClick(android.view.View)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.punchbar.PunchBarUtil: void onPunchButtonClick(android.app.Activity,eu.vranckaert.worktime.service.TimeRegistrationService)&gt;"/>  
        <node method="PunchBarUtil onPunchButtonClick" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="PunchBarUtil onPunchButtonClick" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationPunchInActivity;&quot;)"/>  
        <node method="PunchBarUtil onPunchButtonClick" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.app.Activity: void startActivityForResult(android.content.Intent,int)&gt;(r3, 4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.HomeActivity: void onPunchButtonClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.HomeActivity: void onPunchButtonClick(android.view.View)&gt;,&lt;eu.vranckaert.worktime.utils.punchbar.PunchBarUtil: void onPunchButtonClick(android.app.Activity,eu.vranckaert.worktime.service.TimeRegistrationService)&gt;,void onPunchButtonClick(android.app.Activity,eu.vranckaert.worktime.service.TimeRegistrationService)"/>  
      <source name="eu.vranckaert.worktime.activities.HomeActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.HomeActivity: void onPunchButtonClick(android.view.View)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.punchbar.PunchBarUtil: void onPunchButtonClick(android.app.Activity,eu.vranckaert.worktime.service.TimeRegistrationService)&gt;"/>  
        <node method="PunchBarUtil onPunchButtonClick" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="PunchBarUtil onPunchButtonClick" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationActionActivity;&quot;)"/>  
        <node method="PunchBarUtil onPunchButtonClick" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.app.Activity: void startActivityForResult(android.content.Intent,int)&gt;(r3, 5)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationDetailActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationDetailActivity: void onPunchButtonClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationDetailActivity: void onPunchButtonClick(android.view.View)&gt;,&lt;eu.vranckaert.worktime.utils.punchbar.PunchBarUtil: void onPunchButtonClick(android.app.Activity,eu.vranckaert.worktime.service.TimeRegistrationService)&gt;,void onPunchButtonClick(android.app.Activity,eu.vranckaert.worktime.service.TimeRegistrationService)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationDetailActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationDetailActivity: void onPunchButtonClick(android.view.View)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.punchbar.PunchBarUtil: void onPunchButtonClick(android.app.Activity,eu.vranckaert.worktime.service.TimeRegistrationService)&gt;"/>  
        <node method="PunchBarUtil onPunchButtonClick" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="PunchBarUtil onPunchButtonClick" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationPunchInActivity;&quot;)"/>  
        <node method="PunchBarUtil onPunchButtonClick" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.app.Activity: void startActivityForResult(android.content.Intent,int)&gt;(r3, 4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationDetailActivity: void onPunchButtonClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationDetailActivity: void onPunchButtonClick(android.view.View)&gt;,&lt;eu.vranckaert.worktime.utils.punchbar.PunchBarUtil: void onPunchButtonClick(android.app.Activity,eu.vranckaert.worktime.service.TimeRegistrationService)&gt;,void onPunchButtonClick(android.app.Activity,eu.vranckaert.worktime.service.TimeRegistrationService)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationDetailActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationDetailActivity: void onPunchButtonClick(android.view.View)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.punchbar.PunchBarUtil: void onPunchButtonClick(android.app.Activity,eu.vranckaert.worktime.service.TimeRegistrationService)&gt;"/>  
        <node method="PunchBarUtil onPunchButtonClick" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="PunchBarUtil onPunchButtonClick" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationActionActivity;&quot;)"/>  
        <node method="PunchBarUtil onPunchButtonClick" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.app.Activity: void startActivityForResult(android.content.Intent,int)&gt;(r3, 5)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedWizardActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedWizardActivity$SyncCheck: void onProgressUpdate(java.lang.Object[])&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedWizardActivity$SyncCheck: void onProgressUpdate(java.lang.Object[])&gt;,&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedWizardActivity$SyncCheck: void onProgressUpdate(java.lang.Void[])&gt;,void onProgressUpdate(java.lang.Void[])"/>  
      <source name="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedWizardActivity"/>  
      <destinition name="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockingActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedWizardActivity$SyncCheck: void onProgressUpdate(java.lang.Object[])&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedWizardActivity$SyncCheck: void onProgressUpdate(java.lang.Void[])&gt;"/>  
        <node method="SyncLockedWizardActivity$SyncCheck onProgressUpdate" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="SyncLockedWizardActivity$SyncCheck onProgressUpdate" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r4, class &quot;Leu/vranckaert/worktime/utils/view/actionbar/synclock/SyncLockingActivity;&quot;)"/>  
        <node method="SyncLockedWizardActivity$SyncCheck onProgressUpdate" type="PassOutIntent" unit="virtualinvoke $r3.&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedWizardActivity: void startActivityForResult(android.content.Intent,int)&gt;($r2, 16)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationListActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationListActivity: void onPunchButtonClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationListActivity: void onPunchButtonClick(android.view.View)&gt;,&lt;eu.vranckaert.worktime.utils.punchbar.PunchBarUtil: void onPunchButtonClick(android.app.Activity,eu.vranckaert.worktime.service.TimeRegistrationService)&gt;,void onPunchButtonClick(android.app.Activity,eu.vranckaert.worktime.service.TimeRegistrationService)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationListActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationListActivity: void onPunchButtonClick(android.view.View)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.punchbar.PunchBarUtil: void onPunchButtonClick(android.app.Activity,eu.vranckaert.worktime.service.TimeRegistrationService)&gt;"/>  
        <node method="PunchBarUtil onPunchButtonClick" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="PunchBarUtil onPunchButtonClick" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationPunchInActivity;&quot;)"/>  
        <node method="PunchBarUtil onPunchButtonClick" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.app.Activity: void startActivityForResult(android.content.Intent,int)&gt;(r3, 4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationListActivity: void onPunchButtonClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationListActivity: void onPunchButtonClick(android.view.View)&gt;,&lt;eu.vranckaert.worktime.utils.punchbar.PunchBarUtil: void onPunchButtonClick(android.app.Activity,eu.vranckaert.worktime.service.TimeRegistrationService)&gt;,void onPunchButtonClick(android.app.Activity,eu.vranckaert.worktime.service.TimeRegistrationService)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationListActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationListActivity: void onPunchButtonClick(android.view.View)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.punchbar.PunchBarUtil: void onPunchButtonClick(android.app.Activity,eu.vranckaert.worktime.service.TimeRegistrationService)&gt;"/>  
        <node method="PunchBarUtil onPunchButtonClick" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="PunchBarUtil onPunchButtonClick" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationActionActivity;&quot;)"/>  
        <node method="PunchBarUtil onPunchButtonClick" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.app.Activity: void startActivityForResult(android.content.Intent,int)&gt;(r3, 5)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.donations.DonationsFragment"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.DonationsFragment$2: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.DonationsFragment$2: void onClick(android.view.View)&gt;,&lt;eu.vranckaert.worktime.utils.donations.DonationsFragment: void donatePayPalOnClick(android.view.View)&gt;,void donatePayPalOnClick(android.view.View)"/>  
      <source name="eu.vranckaert.worktime.utils.donations.DonationsFragment"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.DonationsFragment$2: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.DonationsFragment: void donatePayPalOnClick(android.view.View)&gt;"/>  
        <node method="DonationsFragment donatePayPalOnClick" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="DonationsFragment donatePayPalOnClick" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.utils.donations.DonationsFragment: void startActivity(android.content.Intent)&gt;(r3)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.projects.ManageProjectsActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: void onPunchButtonClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: void onPunchButtonClick(android.view.View)&gt;,&lt;eu.vranckaert.worktime.utils.punchbar.PunchBarUtil: void onPunchButtonClick(android.app.Activity,eu.vranckaert.worktime.service.TimeRegistrationService)&gt;,void onPunchButtonClick(android.app.Activity,eu.vranckaert.worktime.service.TimeRegistrationService)"/>  
      <source name="eu.vranckaert.worktime.activities.projects.ManageProjectsActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: void onPunchButtonClick(android.view.View)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.punchbar.PunchBarUtil: void onPunchButtonClick(android.app.Activity,eu.vranckaert.worktime.service.TimeRegistrationService)&gt;"/>  
        <node method="PunchBarUtil onPunchButtonClick" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="PunchBarUtil onPunchButtonClick" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationPunchInActivity;&quot;)"/>  
        <node method="PunchBarUtil onPunchButtonClick" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.app.Activity: void startActivityForResult(android.content.Intent,int)&gt;(r3, 4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: void onPunchButtonClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: void onPunchButtonClick(android.view.View)&gt;,&lt;eu.vranckaert.worktime.utils.punchbar.PunchBarUtil: void onPunchButtonClick(android.app.Activity,eu.vranckaert.worktime.service.TimeRegistrationService)&gt;,void onPunchButtonClick(android.app.Activity,eu.vranckaert.worktime.service.TimeRegistrationService)"/>  
      <source name="eu.vranckaert.worktime.activities.projects.ManageProjectsActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: void onPunchButtonClick(android.view.View)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.punchbar.PunchBarUtil: void onPunchButtonClick(android.app.Activity,eu.vranckaert.worktime.service.TimeRegistrationService)&gt;"/>  
        <node method="PunchBarUtil onPunchButtonClick" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="PunchBarUtil onPunchButtonClick" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationActionActivity;&quot;)"/>  
        <node method="PunchBarUtil onPunchButtonClick" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.app.Activity: void startActivityForResult(android.content.Intent,int)&gt;(r3, 5)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: void onPunchButtonClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: void onPunchButtonClick(android.view.View)&gt;,&lt;eu.vranckaert.worktime.utils.punchbar.PunchBarUtil: void onPunchButtonClick(android.app.Activity,eu.vranckaert.worktime.service.TimeRegistrationService)&gt;,void onPunchButtonClick(android.app.Activity,eu.vranckaert.worktime.service.TimeRegistrationService)"/>  
      <source name="eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: void onPunchButtonClick(android.view.View)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.punchbar.PunchBarUtil: void onPunchButtonClick(android.app.Activity,eu.vranckaert.worktime.service.TimeRegistrationService)&gt;"/>  
        <node method="PunchBarUtil onPunchButtonClick" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="PunchBarUtil onPunchButtonClick" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationPunchInActivity;&quot;)"/>  
        <node method="PunchBarUtil onPunchButtonClick" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.app.Activity: void startActivityForResult(android.content.Intent,int)&gt;(r3, 4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: void onPunchButtonClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: void onPunchButtonClick(android.view.View)&gt;,&lt;eu.vranckaert.worktime.utils.punchbar.PunchBarUtil: void onPunchButtonClick(android.app.Activity,eu.vranckaert.worktime.service.TimeRegistrationService)&gt;,void onPunchButtonClick(android.app.Activity,eu.vranckaert.worktime.service.TimeRegistrationService)"/>  
      <source name="eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: void onPunchButtonClick(android.view.View)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.punchbar.PunchBarUtil: void onPunchButtonClick(android.app.Activity,eu.vranckaert.worktime.service.TimeRegistrationService)&gt;"/>  
        <node method="PunchBarUtil onPunchButtonClick" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="PunchBarUtil onPunchButtonClick" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationActionActivity;&quot;)"/>  
        <node method="PunchBarUtil onPunchButtonClick" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.app.Activity: void startActivityForResult(android.content.Intent,int)&gt;(r3, 5)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.activity.GenericPreferencesActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.activity.GenericPreferencesActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.activity.GenericPreferencesActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="eu.vranckaert.worktime.utils.activity.GenericPreferencesActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.activity.GenericPreferencesActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="GenericPreferencesActivity onCreate" type="setContentView" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.utils.activity.GenericPreferencesActivity: void setContentView(int)&gt;(2130903054)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void onCreate(android.os.Bundle)&gt;,&lt;eu.vranckaert.worktime.utils.activity.GenericPreferencesActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.activity.GenericPreferencesActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="GenericPreferencesActivity onCreate" type="setContentView" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.utils.activity.GenericPreferencesActivity: void setContentView(int)&gt;(2130903054)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.account.AccountLoginActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountLoginActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="AccountLoginActivity onCreate" type="setContentView" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity: void setContentView(int)&gt;(2130903043)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountLoginActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="AccountLoginActivity onCreate" type="setContentView" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity: void setContentView(int)&gt;(2130903043)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountLoginActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountProfileActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="AccountLoginActivity onCreate" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="AccountLoginActivity onCreate" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountProfileActivity;&quot;)"/>  
        <node method="AccountLoginActivity onCreate" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity: void startActivityForResult(android.content.Intent,int)&gt;(r2, 14)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.context.IntentUtil"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.util.List,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.util.List,java.lang.String)&gt;,void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.util.List,java.lang.String)"/>  
      <source name="eu.vranckaert.worktime.utils.context.IntentUtil"/>  
      <destinition name="interICC_android.intent.action.SEND_MULTIPLE, "/>  
      <sender action="android.intent.action.SEND_MULTIPLE" type="text/plain"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.util.List,java.lang.String)&gt;"/>  
        <node method="IntentUtil sendSomething" type="CreateMethod" unit="r5 = new android.content.Intent"/>  
        <node method="IntentUtil sendSomething" type="SetAttribute" unit="specialinvoke r5.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.SEND_MULTIPLE&quot;)"/>  
        <node method="IntentUtil sendSomething" type="SetAttribute" unit="virtualinvoke r5.&lt;android.content.Intent: android.content.Intent setType(java.lang.String)&gt;(&quot;text/plain&quot;)"/>  
        <node method="IntentUtil sendSomething" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.app.Activity: void startActivity(android.content.Intent)&gt;(r5)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGenericPreferenceActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGenericPreferenceActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGenericPreferenceActivity: void onCreate(android.os.Bundle)&gt;,&lt;eu.vranckaert.worktime.utils.activity.GenericPreferencesActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGenericPreferenceActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGenericPreferenceActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.activity.GenericPreferencesActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="GenericPreferencesActivity onCreate" type="setContentView" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.utils.activity.GenericPreferencesActivity: void setContentView(int)&gt;(2130903054)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.projects.ManageProjectsActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;,&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void goBack(android.content.Context,java.lang.Class)&gt;,void goBack(android.content.Context,java.lang.Class)"/>  
      <source name="eu.vranckaert.worktime.activities.projects.ManageProjectsActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void goBack(android.content.Context,java.lang.Class)&gt;"/>  
        <node method="IntentUtil goBack" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="IntentUtil goBack" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, $r1)"/>  
        <node method="IntentUtil goBack" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(67108864)"/>  
        <node method="IntentUtil goBack" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;,&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: void openAddProjectActivity()&gt;,void openAddProjectActivity()"/>  
      <source name="eu.vranckaert.worktime.activities.projects.ManageProjectsActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.projects.AddEditProjectActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: void openAddProjectActivity()&gt;"/>  
        <node method="ManageProjectsActivity openAddProjectActivity" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="ManageProjectsActivity openAddProjectActivity" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Leu/vranckaert/worktime/activities/projects/AddEditProjectActivity;&quot;)"/>  
        <node method="ManageProjectsActivity openAddProjectActivity" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: void startActivityForResult(android.content.Intent,int)&gt;(r1, 6)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;,boolean onOptionsItemSelected(android.view.MenuItem), &lt;eu.vranckaert.worktime.utils.context.IntentUtil: void goHome(android.content.Context)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.projects.ManageProjectsActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.providers.MyAppWidgetProvider"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x2_Project: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.providers.MyAppWidgetProvider"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.providers.MyAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="MyAppWidgetProvider onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.providers.WorkTimeWidgetProvider_2x1_ProjectTask: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.donations.google.BillingService"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;,boolean bindToMarketBillingService()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <destinition name="interICC_com.android.vending.billing.MarketBillingService.BIND, "/>  
      <sender action="com.android.vending.billing.MarketBillingService.BIND"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
        <node method="BillingService bindToMarketBillingService" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="BillingService bindToMarketBillingService" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.android.vending.billing.MarketBillingService.BIND&quot;)"/>  
        <node method="BillingService bindToMarketBillingService" type="PassOutIntent" unit="$z0 = virtualinvoke r0.&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)&gt;($r2, r0, 1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;,boolean bindToMarketBillingService()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <sender action="com.android.vending.billing.MarketBillingService.BIND"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
        <node method="BillingService bindToMarketBillingService" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="BillingService bindToMarketBillingService" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.android.vending.billing.MarketBillingService.BIND&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;,boolean bindToMarketBillingService()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
        <node method="BillingService bindToMarketBillingService" type="CreateMethod" unit="$r2 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.donations.google.BillingService"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: boolean runRequest()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;,boolean bindToMarketBillingService()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <destinition name="interICC_com.android.vending.billing.MarketBillingService.BIND, "/>  
      <sender action="com.android.vending.billing.MarketBillingService.BIND"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
        <node method="BillingService bindToMarketBillingService" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="BillingService bindToMarketBillingService" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.android.vending.billing.MarketBillingService.BIND&quot;)"/>  
        <node method="BillingService bindToMarketBillingService" type="PassOutIntent" unit="$z0 = virtualinvoke r0.&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)&gt;($r2, r0, 1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: boolean runRequest()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;,boolean bindToMarketBillingService()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <sender action="com.android.vending.billing.MarketBillingService.BIND"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
        <node method="BillingService bindToMarketBillingService" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="BillingService bindToMarketBillingService" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.android.vending.billing.MarketBillingService.BIND&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: boolean runRequest()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;,boolean bindToMarketBillingService()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
        <node method="BillingService bindToMarketBillingService" type="CreateMethod" unit="$r2 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.donations.google.BillingService"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean requestPurchase(java.lang.String,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean requestPurchase(java.lang.String,java.lang.String)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;,boolean bindToMarketBillingService()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <destinition name="interICC_com.android.vending.billing.MarketBillingService.BIND, "/>  
      <sender action="com.android.vending.billing.MarketBillingService.BIND"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean requestPurchase(java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
        <node method="BillingService bindToMarketBillingService" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="BillingService bindToMarketBillingService" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.android.vending.billing.MarketBillingService.BIND&quot;)"/>  
        <node method="BillingService bindToMarketBillingService" type="PassOutIntent" unit="$z0 = virtualinvoke r0.&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)&gt;($r2, r0, 1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean requestPurchase(java.lang.String,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean requestPurchase(java.lang.String,java.lang.String)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;,boolean bindToMarketBillingService()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <sender action="com.android.vending.billing.MarketBillingService.BIND"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean requestPurchase(java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
        <node method="BillingService bindToMarketBillingService" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="BillingService bindToMarketBillingService" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.android.vending.billing.MarketBillingService.BIND&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean requestPurchase(java.lang.String,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean requestPurchase(java.lang.String,java.lang.String)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;,boolean bindToMarketBillingService()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean requestPurchase(java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
        <node method="BillingService bindToMarketBillingService" type="CreateMethod" unit="$r2 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.donations.DonationsFragment"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.DonationsFragment: void donateGoogleOnClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.DonationsFragment: void donateGoogleOnClick(android.view.View)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean requestPurchase(java.lang.String,java.lang.String)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;,boolean bindToMarketBillingService()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.DonationsFragment"/>  
      <destinition name="interICC_com.android.vending.billing.MarketBillingService.BIND, "/>  
      <sender action="com.android.vending.billing.MarketBillingService.BIND"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.DonationsFragment: void donateGoogleOnClick(android.view.View)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean requestPurchase(java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
        <node method="BillingService bindToMarketBillingService" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="BillingService bindToMarketBillingService" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.android.vending.billing.MarketBillingService.BIND&quot;)"/>  
        <node method="BillingService bindToMarketBillingService" type="PassOutIntent" unit="$z0 = virtualinvoke r0.&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)&gt;($r2, r0, 1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.DonationsFragment: void donateGoogleOnClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.DonationsFragment: void donateGoogleOnClick(android.view.View)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean requestPurchase(java.lang.String,java.lang.String)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;,boolean bindToMarketBillingService()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.DonationsFragment"/>  
      <sender action="com.android.vending.billing.MarketBillingService.BIND"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.DonationsFragment: void donateGoogleOnClick(android.view.View)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean requestPurchase(java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
        <node method="BillingService bindToMarketBillingService" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="BillingService bindToMarketBillingService" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.android.vending.billing.MarketBillingService.BIND&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.DonationsFragment: void donateGoogleOnClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.DonationsFragment: void donateGoogleOnClick(android.view.View)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean requestPurchase(java.lang.String,java.lang.String)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;,boolean bindToMarketBillingService()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.DonationsFragment"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.DonationsFragment: void donateGoogleOnClick(android.view.View)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean requestPurchase(java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
        <node method="BillingService bindToMarketBillingService" type="CreateMethod" unit="$r2 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.alarm.AlarmUtil"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;,void removeAllSyncAlarms(android.content.Context), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.utils.alarm.AlarmUtil"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;,void removeAllSyncAlarms(android.content.Context), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.utils.alarm.AlarmUtil"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.alarm.AlarmUtil"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;,void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;, &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.utils.alarm.AlarmUtil"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;,android.app.PendingIntent getSyncOperation(android.content.Context,int)"/>  
      <source name="eu.vranckaert.worktime.utils.alarm.AlarmUtil"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;,void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;"/>  
      <source name="eu.vranckaert.worktime.utils.alarm.AlarmUtil"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;,void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;, &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.utils.alarm.AlarmUtil"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="ReceiveIntentFromRetValue" unit="$r7 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="PassOutIntent" unit="virtualinvoke $r6.&lt;android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)&gt;(0, l1, $l0, $r7)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.wizard.WizardActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.wizard.WizardActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.wizard.WizardActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="eu.vranckaert.worktime.utils.wizard.WizardActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.wizard.WizardActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="WizardActivity onCreate" type="setContentView" unit="specialinvoke r0.&lt;eu.vranckaert.worktime.utils.view.actionbar.ActionBarGuiceActivity: void setContentView(int)&gt;(2130903089)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedWizardActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedWizardActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedWizardActivity: void onCreate(android.os.Bundle)&gt;,&lt;eu.vranckaert.worktime.utils.wizard.WizardActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedWizardActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedWizardActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.wizard.WizardActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="WizardActivity onCreate" type="setContentView" unit="specialinvoke r0.&lt;eu.vranckaert.worktime.utils.view.actionbar.ActionBarGuiceActivity: void setContentView(int)&gt;(2130903089)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.donations.google.PurchaseObserver"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.PurchaseObserver: void startBuyPageActivity(android.app.PendingIntent,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.PurchaseObserver: void startBuyPageActivity(android.app.PendingIntent,android.content.Intent)&gt;,void startBuyPageActivity(android.app.PendingIntent,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.PurchaseObserver"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.PurchaseObserver: void startBuyPageActivity(android.app.PendingIntent,android.content.Intent)&gt;"/>  
        <node method="PurchaseObserver startBuyPageActivity" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="PurchaseObserver startBuyPageActivity" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent)&gt;($r7, 0, $r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.PurchaseObserver: void startBuyPageActivity(android.app.PendingIntent,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.PurchaseObserver: void startBuyPageActivity(android.app.PendingIntent,android.content.Intent)&gt;,void startBuyPageActivity(android.app.PendingIntent,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.PurchaseObserver"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.PurchaseObserver: void startBuyPageActivity(android.app.PendingIntent,android.content.Intent)&gt;"/>  
        <node method="PurchaseObserver startBuyPageActivity" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.PurchaseObserver: void startBuyPageActivity(android.app.PendingIntent,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.PurchaseObserver: void startBuyPageActivity(android.app.PendingIntent,android.content.Intent)&gt;,void startBuyPageActivity(android.app.PendingIntent,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.PurchaseObserver"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.PurchaseObserver: void startBuyPageActivity(android.app.PendingIntent,android.content.Intent)&gt;"/>  
        <node method="PurchaseObserver startBuyPageActivity" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.PurchaseObserver: void startBuyPageActivity(android.app.PendingIntent,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.PurchaseObserver: void startBuyPageActivity(android.app.PendingIntent,android.content.Intent)&gt;,void startBuyPageActivity(android.app.PendingIntent,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.PurchaseObserver"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.PurchaseObserver: void startBuyPageActivity(android.app.PendingIntent,android.content.Intent)&gt;"/>  
        <node method="PurchaseObserver startBuyPageActivity" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="PurchaseObserver startBuyPageActivity" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent)&gt;($r7, 0, $r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.jakewharton.notificationcompat2.NotificationCompat2"> 
    <intentSummary> 
      <method value="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder addAction(int,java.lang.CharSequence,android.app.PendingIntent)&gt;"/>  
      <methodtrace value="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder addAction(int,java.lang.CharSequence,android.app.PendingIntent)&gt;,com.jakewharton.notificationcompat2.NotificationCompat2$Builder addAction(int,java.lang.CharSequence,android.app.PendingIntent)"/>  
      <source name="com.jakewharton.notificationcompat2.NotificationCompat2"/>  
      <nodes> 
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder addAction(int,java.lang.CharSequence,android.app.PendingIntent)&gt;"/>  
        <node method="NotificationCompat2$Builder addAction" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.jakewharton.notificationcompat2.NotificationCompat2"> 
    <intentSummary> 
      <method value="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle: android.app.Notification build()&gt;"/>  
      <methodtrace value="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle: android.app.Notification build()&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigTextStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)"/>  
      <source name="com.jakewharton.notificationcompat2.NotificationCompat2"/>  
      <nodes> 
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle: android.app.Notification build()&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigTextStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;($r8, $z0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle: android.app.Notification build()&gt;"/>  
      <methodtrace value="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle: android.app.Notification build()&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigTextStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)"/>  
      <source name="com.jakewharton.notificationcompat2.NotificationCompat2"/>  
      <nodes> 
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle: android.app.Notification build()&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigTextStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setDeleteIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;($r8, $z0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle: android.app.Notification build()&gt;"/>  
      <methodtrace value="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle: android.app.Notification build()&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigTextStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)"/>  
      <source name="com.jakewharton.notificationcompat2.NotificationCompat2"/>  
      <nodes> 
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle: android.app.Notification build()&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigTextStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setDeleteIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;($r8, $z0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;,void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[]), &lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder setContentIntent(android.app.PendingIntent)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromParatMethod" unit="$r4 := @parameter3: android.content.Intent"/>  
        <node method="NotificationCompat2$Builder setContentIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder addAction(int,java.lang.CharSequence,android.app.PendingIntent)&gt;,com.jakewharton.notificationcompat2.NotificationCompat2$Builder addAction(int,java.lang.CharSequence,android.app.PendingIntent)"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder addAction(int,java.lang.CharSequence,android.app.PendingIntent)&gt;"/>  
        <node method="NotificationCompat2$Builder addAction" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;,void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[]), &lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder setContentIntent(android.app.PendingIntent)&gt;, &lt;eu.vranckaert.worktime.model.notification.NotificationAction: android.content.Intent getIntent()&gt;, &lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder addAction(int,java.lang.CharSequence,android.app.PendingIntent)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromParatMethod" unit="$r4 := @parameter3: android.content.Intent"/>  
        <node method="NotificationCompat2$Builder setContentIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;,void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[]), &lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder setContentIntent(android.app.PendingIntent)&gt;, &lt;eu.vranckaert.worktime.model.notification.NotificationAction: android.content.Intent getIntent()&gt;, &lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder addAction(int,java.lang.CharSequence,android.app.PendingIntent)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromRetValue" unit="$r4 = virtualinvoke r9.&lt;eu.vranckaert.worktime.model.notification.NotificationAction: android.content.Intent getIntent()&gt;()"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="NotificationCompat2$Builder addAction" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder setContentIntent(android.app.PendingIntent)&gt;,com.jakewharton.notificationcompat2.NotificationCompat2$Builder setContentIntent(android.app.PendingIntent)"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder setContentIntent(android.app.PendingIntent)&gt;"/>  
        <node method="NotificationCompat2$Builder setContentIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompat2$Builder setContentIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle: android.app.Notification build()&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigTextStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle: android.app.Notification build()&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigTextStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;($r8, $z0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle: android.app.Notification build()&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigTextStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle: android.app.Notification build()&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigTextStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setDeleteIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;($r8, $z0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder setContentIntent(android.app.PendingIntent)&gt;,com.jakewharton.notificationcompat2.NotificationCompat2$Builder setContentIntent(android.app.PendingIntent)"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder setContentIntent(android.app.PendingIntent)&gt;"/>  
        <node method="NotificationCompat2$Builder setContentIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompat2$Builder setContentIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle: android.app.Notification build()&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigTextStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle: android.app.Notification build()&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigTextStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setDeleteIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;($r8, $z0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForRestore(boolean,java.lang.String,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForRestore(boolean,java.lang.String,java.lang.String)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder addAction(int,java.lang.CharSequence,android.app.PendingIntent)&gt;,com.jakewharton.notificationcompat2.NotificationCompat2$Builder addAction(int,java.lang.CharSequence,android.app.PendingIntent)"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForRestore(boolean,java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder addAction(int,java.lang.CharSequence,android.app.PendingIntent)&gt;"/>  
        <node method="NotificationCompat2$Builder addAction" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForRestore(boolean,java.lang.String,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForRestore(boolean,java.lang.String,java.lang.String)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;,void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[]), &lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder setContentIntent(android.app.PendingIntent)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForRestore(boolean,java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromParatMethod" unit="$r4 := @parameter3: android.content.Intent"/>  
        <node method="NotificationCompat2$Builder setContentIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForRestore(boolean,java.lang.String,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForRestore(boolean,java.lang.String,java.lang.String)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;,void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[]), &lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder setContentIntent(android.app.PendingIntent)&gt;, &lt;eu.vranckaert.worktime.model.notification.NotificationAction: android.content.Intent getIntent()&gt;, &lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder addAction(int,java.lang.CharSequence,android.app.PendingIntent)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForRestore(boolean,java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromParatMethod" unit="$r4 := @parameter3: android.content.Intent"/>  
        <node method="NotificationCompat2$Builder setContentIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForRestore(boolean,java.lang.String,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForRestore(boolean,java.lang.String,java.lang.String)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;,void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[]), &lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder setContentIntent(android.app.PendingIntent)&gt;, &lt;eu.vranckaert.worktime.model.notification.NotificationAction: android.content.Intent getIntent()&gt;, &lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder addAction(int,java.lang.CharSequence,android.app.PendingIntent)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForRestore(boolean,java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromRetValue" unit="$r4 = virtualinvoke r9.&lt;eu.vranckaert.worktime.model.notification.NotificationAction: android.content.Intent getIntent()&gt;()"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="NotificationCompat2$Builder addAction" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForRestore(boolean,java.lang.String,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForRestore(boolean,java.lang.String,java.lang.String)&gt;,&lt;eu.vranckaert.worktime.model.notification.NotificationAction: android.content.Intent getIntent()&gt;,android.content.Intent getIntent()"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForRestore(boolean,java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.model.notification.NotificationAction: android.content.Intent getIntent()&gt;"/>  
        <node method="NotificationAction getIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction getIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="NotificationAction getIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="NotificationAction getIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction getIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="NotificationAction getIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction getIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="NotificationAction getIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="NotificationAction getIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction getIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForRestore(boolean,java.lang.String,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForRestore(boolean,java.lang.String,java.lang.String)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder setContentIntent(android.app.PendingIntent)&gt;,com.jakewharton.notificationcompat2.NotificationCompat2$Builder setContentIntent(android.app.PendingIntent)"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForRestore(boolean,java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder setContentIntent(android.app.PendingIntent)&gt;"/>  
        <node method="NotificationCompat2$Builder setContentIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompat2$Builder setContentIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForRestore(boolean,java.lang.String,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForRestore(boolean,java.lang.String,java.lang.String)&gt;,void addStatusBarNotificationForRestore(boolean,java.lang.String,java.lang.String), &lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForRestore(boolean,java.lang.String,java.lang.String)&gt;"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForRestore" type="CreateMethod" unit="$r13 = new android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromParatMethod" unit="$r4 := @parameter3: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromRetValue" unit="$r4 = virtualinvoke r9.&lt;eu.vranckaert.worktime.model.notification.NotificationAction: android.content.Intent getIntent()&gt;()"/>  
        <node method="NotificationCompat2$Builder setContentIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForRestore" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForRestore" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForRestore" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForRestore" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="NotificationCompat2$Builder addAction" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.app.PendingIntent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForRestore(boolean,java.lang.String,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForRestore(boolean,java.lang.String,java.lang.String)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle: android.app.Notification build()&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigTextStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForRestore(boolean,java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle: android.app.Notification build()&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigTextStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;($r8, $z0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForRestore(boolean,java.lang.String,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForRestore(boolean,java.lang.String,java.lang.String)&gt;,void addStatusBarNotificationForRestore(boolean,java.lang.String,java.lang.String), &lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForRestore(boolean,java.lang.String,java.lang.String)&gt;"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForRestore" type="CreateMethod" unit="$r13 = new android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromParatMethod" unit="$r4 := @parameter3: android.content.Intent"/>  
        <node method="NotificationCompat2$Builder setContentIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForRestore" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForRestore" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForRestore" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForRestore" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForRestore" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForRestore(boolean,java.lang.String,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForRestore(boolean,java.lang.String,java.lang.String)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle: android.app.Notification build()&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigTextStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForRestore(boolean,java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle: android.app.Notification build()&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigTextStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setDeleteIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;($r8, $z0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForRestore(boolean,java.lang.String,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForRestore(boolean,java.lang.String,java.lang.String)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder setContentIntent(android.app.PendingIntent)&gt;,com.jakewharton.notificationcompat2.NotificationCompat2$Builder setContentIntent(android.app.PendingIntent)"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForRestore(boolean,java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder setContentIntent(android.app.PendingIntent)&gt;"/>  
        <node method="NotificationCompat2$Builder setContentIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompat2$Builder setContentIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForRestore(boolean,java.lang.String,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForRestore(boolean,java.lang.String,java.lang.String)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle: android.app.Notification build()&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigTextStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForRestore(boolean,java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle: android.app.Notification build()&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigTextStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setDeleteIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;($r8, $z0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchOutActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="CreateMethod" unit="r18 = new android.content.Intent"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="SetAttribute" unit="specialinvoke r18.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationPunchOutActivity;&quot;)"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void startActivityForResult(android.content.Intent,int)&gt;(r18, 3)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationRestartActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="CreateMethod" unit="r18 = new android.content.Intent"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="SetAttribute" unit="specialinvoke r18.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationRestartActivity;&quot;)"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void startActivityForResult(android.content.Intent,int)&gt;(r18, 3)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationSetCommentActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="CreateMethod" unit="r18 = new android.content.Intent"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="SetAttribute" unit="specialinvoke r18.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationSetCommentActivity;&quot;)"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void startActivityForResult(android.content.Intent,int)&gt;(r18, 3)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationEditProjectAndTaskActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="CreateMethod" unit="r18 = new android.content.Intent"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="SetAttribute" unit="specialinvoke r18.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationEditProjectAndTaskActivity;&quot;)"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void startActivityForResult(android.content.Intent,int)&gt;(r18, 3)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationDetailActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="CreateMethod" unit="r18 = new android.content.Intent"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="SetAttribute" unit="specialinvoke r18.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationDetailActivity;&quot;)"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void startActivityForResult(android.content.Intent,int)&gt;(r18, 1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationEditEndTimeActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="CreateMethod" unit="r18 = new android.content.Intent"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="SetAttribute" unit="specialinvoke r18.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationEditEndTimeActivity;&quot;)"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void startActivityForResult(android.content.Intent,int)&gt;(r18, 3)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationEditStartTimeActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="CreateMethod" unit="r18 = new android.content.Intent"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="SetAttribute" unit="specialinvoke r18.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationEditStartTimeActivity;&quot;)"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void startActivityForResult(android.content.Intent,int)&gt;(r18, 3)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationDeleteActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="CreateMethod" unit="r18 = new android.content.Intent"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="SetAttribute" unit="specialinvoke r18.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationDeleteActivity;&quot;)"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void startActivityForResult(android.content.Intent,int)&gt;(r18, 3)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationDeleteActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="CreateMethod" unit="r18 = new android.content.Intent"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="SetAttribute" unit="specialinvoke r18.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationDeleteActivity;&quot;)"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void startActivityForResult(android.content.Intent,int)&gt;(r18, 3)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationSplitActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="CreateMethod" unit="r18 = new android.content.Intent"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="SetAttribute" unit="specialinvoke r18.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationSplitActivity;&quot;)"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void startActivityForResult(android.content.Intent,int)&gt;(r18, 3)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void access$800(eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity,eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void access$800(eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity,eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchOutActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void access$800(eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity,eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="CreateMethod" unit="r18 = new android.content.Intent"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="SetAttribute" unit="specialinvoke r18.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationPunchOutActivity;&quot;)"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void startActivityForResult(android.content.Intent,int)&gt;(r18, 3)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void access$800(eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity,eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void access$800(eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity,eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationRestartActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void access$800(eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity,eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="CreateMethod" unit="r18 = new android.content.Intent"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="SetAttribute" unit="specialinvoke r18.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationRestartActivity;&quot;)"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void startActivityForResult(android.content.Intent,int)&gt;(r18, 3)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void access$800(eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity,eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void access$800(eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity,eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationSetCommentActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void access$800(eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity,eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="CreateMethod" unit="r18 = new android.content.Intent"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="SetAttribute" unit="specialinvoke r18.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationSetCommentActivity;&quot;)"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void startActivityForResult(android.content.Intent,int)&gt;(r18, 3)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void access$800(eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity,eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void access$800(eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity,eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationEditProjectAndTaskActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void access$800(eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity,eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="CreateMethod" unit="r18 = new android.content.Intent"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="SetAttribute" unit="specialinvoke r18.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationEditProjectAndTaskActivity;&quot;)"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void startActivityForResult(android.content.Intent,int)&gt;(r18, 3)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void access$800(eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity,eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void access$800(eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity,eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationDetailActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void access$800(eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity,eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="CreateMethod" unit="r18 = new android.content.Intent"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="SetAttribute" unit="specialinvoke r18.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationDetailActivity;&quot;)"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void startActivityForResult(android.content.Intent,int)&gt;(r18, 1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void access$800(eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity,eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void access$800(eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity,eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationEditEndTimeActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void access$800(eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity,eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="CreateMethod" unit="r18 = new android.content.Intent"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="SetAttribute" unit="specialinvoke r18.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationEditEndTimeActivity;&quot;)"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void startActivityForResult(android.content.Intent,int)&gt;(r18, 3)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void access$800(eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity,eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void access$800(eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity,eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationEditStartTimeActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void access$800(eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity,eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="CreateMethod" unit="r18 = new android.content.Intent"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="SetAttribute" unit="specialinvoke r18.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationEditStartTimeActivity;&quot;)"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void startActivityForResult(android.content.Intent,int)&gt;(r18, 3)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void access$800(eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity,eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void access$800(eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity,eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationDeleteActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void access$800(eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity,eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="CreateMethod" unit="r18 = new android.content.Intent"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="SetAttribute" unit="specialinvoke r18.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationDeleteActivity;&quot;)"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void startActivityForResult(android.content.Intent,int)&gt;(r18, 3)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void access$800(eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity,eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void access$800(eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity,eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationDeleteActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void access$800(eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity,eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="CreateMethod" unit="r18 = new android.content.Intent"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="SetAttribute" unit="specialinvoke r18.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationDeleteActivity;&quot;)"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void startActivityForResult(android.content.Intent,int)&gt;(r18, 3)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void access$800(eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity,eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void access$800(eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity,eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationSplitActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void access$800(eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity,eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="CreateMethod" unit="r18 = new android.content.Intent"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="SetAttribute" unit="specialinvoke r18.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationSplitActivity;&quot;)"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void startActivityForResult(android.content.Intent,int)&gt;(r18, 3)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity$3: void onClick(android.content.DialogInterface,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity$3: void onClick(android.content.DialogInterface,int)&gt;,&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void access$800(eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity,eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchOutActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity$3: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void access$800(eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity,eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="CreateMethod" unit="r18 = new android.content.Intent"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="SetAttribute" unit="specialinvoke r18.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationPunchOutActivity;&quot;)"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void startActivityForResult(android.content.Intent,int)&gt;(r18, 3)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity$3: void onClick(android.content.DialogInterface,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity$3: void onClick(android.content.DialogInterface,int)&gt;,&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void access$800(eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity,eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationRestartActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity$3: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void access$800(eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity,eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="CreateMethod" unit="r18 = new android.content.Intent"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="SetAttribute" unit="specialinvoke r18.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationRestartActivity;&quot;)"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void startActivityForResult(android.content.Intent,int)&gt;(r18, 3)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity$3: void onClick(android.content.DialogInterface,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity$3: void onClick(android.content.DialogInterface,int)&gt;,&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void access$800(eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity,eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationSetCommentActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity$3: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void access$800(eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity,eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="CreateMethod" unit="r18 = new android.content.Intent"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="SetAttribute" unit="specialinvoke r18.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationSetCommentActivity;&quot;)"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void startActivityForResult(android.content.Intent,int)&gt;(r18, 3)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity$3: void onClick(android.content.DialogInterface,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity$3: void onClick(android.content.DialogInterface,int)&gt;,&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void access$800(eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity,eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationEditProjectAndTaskActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity$3: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void access$800(eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity,eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="CreateMethod" unit="r18 = new android.content.Intent"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="SetAttribute" unit="specialinvoke r18.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationEditProjectAndTaskActivity;&quot;)"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void startActivityForResult(android.content.Intent,int)&gt;(r18, 3)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity$3: void onClick(android.content.DialogInterface,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity$3: void onClick(android.content.DialogInterface,int)&gt;,&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void access$800(eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity,eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationDetailActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity$3: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void access$800(eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity,eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="CreateMethod" unit="r18 = new android.content.Intent"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="SetAttribute" unit="specialinvoke r18.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationDetailActivity;&quot;)"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void startActivityForResult(android.content.Intent,int)&gt;(r18, 1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity$3: void onClick(android.content.DialogInterface,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity$3: void onClick(android.content.DialogInterface,int)&gt;,&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void access$800(eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity,eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationEditEndTimeActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity$3: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void access$800(eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity,eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="CreateMethod" unit="r18 = new android.content.Intent"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="SetAttribute" unit="specialinvoke r18.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationEditEndTimeActivity;&quot;)"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void startActivityForResult(android.content.Intent,int)&gt;(r18, 3)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity$3: void onClick(android.content.DialogInterface,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity$3: void onClick(android.content.DialogInterface,int)&gt;,&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void access$800(eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity,eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationEditStartTimeActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity$3: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void access$800(eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity,eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="CreateMethod" unit="r18 = new android.content.Intent"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="SetAttribute" unit="specialinvoke r18.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationEditStartTimeActivity;&quot;)"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void startActivityForResult(android.content.Intent,int)&gt;(r18, 3)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity$3: void onClick(android.content.DialogInterface,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity$3: void onClick(android.content.DialogInterface,int)&gt;,&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void access$800(eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity,eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationDeleteActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity$3: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void access$800(eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity,eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="CreateMethod" unit="r18 = new android.content.Intent"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="SetAttribute" unit="specialinvoke r18.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationDeleteActivity;&quot;)"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void startActivityForResult(android.content.Intent,int)&gt;(r18, 3)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity$3: void onClick(android.content.DialogInterface,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity$3: void onClick(android.content.DialogInterface,int)&gt;,&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void access$800(eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity,eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationDeleteActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity$3: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void access$800(eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity,eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="CreateMethod" unit="r18 = new android.content.Intent"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="SetAttribute" unit="specialinvoke r18.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationDeleteActivity;&quot;)"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void startActivityForResult(android.content.Intent,int)&gt;(r18, 3)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity$3: void onClick(android.content.DialogInterface,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity$3: void onClick(android.content.DialogInterface,int)&gt;,&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void access$800(eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity,eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationSplitActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity$3: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void access$800(eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity,eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="CreateMethod" unit="r18 = new android.content.Intent"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="SetAttribute" unit="specialinvoke r18.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationSplitActivity;&quot;)"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void startActivityForResult(android.content.Intent,int)&gt;(r18, 3)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="roboguice.service.RoboService"> 
    <intentSummary> 
      <method value="&lt;roboguice.service.RoboService: void onStart(android.content.Intent,int)&gt;"/>  
      <methodtrace value="&lt;roboguice.service.RoboService: void onStart(android.content.Intent,int)&gt;,void onStart(android.content.Intent,int)"/>  
      <source name="roboguice.service.RoboService"/>  
      <nodes> 
        <node method="&lt;roboguice.service.RoboService: void onStart(android.content.Intent,int)&gt;"/>  
        <node method="RoboService onStart" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.account.AccountProfileActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountProfileActivity: void logout()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountProfileActivity: void logout()&gt;,void logout(), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountProfileActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountProfileActivity: void logout()&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountProfileActivity: void logout()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountProfileActivity: void logout()&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;,android.app.PendingIntent getSyncOperation(android.content.Context,int)"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountProfileActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountProfileActivity: void logout()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.account.AccountProfileActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountProfileActivity: void access$000(eu.vranckaert.worktime.activities.account.AccountProfileActivity)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountProfileActivity: void access$000(eu.vranckaert.worktime.activities.account.AccountProfileActivity)&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountProfileActivity: void logout()&gt;,void logout(), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountProfileActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountProfileActivity: void access$000(eu.vranckaert.worktime.activities.account.AccountProfileActivity)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountProfileActivity: void logout()&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountProfileActivity: void access$000(eu.vranckaert.worktime.activities.account.AccountProfileActivity)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountProfileActivity: void access$000(eu.vranckaert.worktime.activities.account.AccountProfileActivity)&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountProfileActivity: void logout()&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;,android.app.PendingIntent getSyncOperation(android.content.Context,int)"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountProfileActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountProfileActivity: void access$000(eu.vranckaert.worktime.activities.account.AccountProfileActivity)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountProfileActivity: void logout()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.account.AccountProfileActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountProfileActivity$4: void onClick(android.content.DialogInterface,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountProfileActivity$4: void onClick(android.content.DialogInterface,int)&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountProfileActivity: void access$000(eu.vranckaert.worktime.activities.account.AccountProfileActivity)&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountProfileActivity: void logout()&gt;,void logout(), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountProfileActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountProfileActivity$4: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountProfileActivity: void access$000(eu.vranckaert.worktime.activities.account.AccountProfileActivity)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountProfileActivity: void logout()&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountProfileActivity$4: void onClick(android.content.DialogInterface,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountProfileActivity$4: void onClick(android.content.DialogInterface,int)&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountProfileActivity: void access$000(eu.vranckaert.worktime.activities.account.AccountProfileActivity)&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountProfileActivity: void logout()&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;,android.app.PendingIntent getSyncOperation(android.content.Context,int)"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountProfileActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountProfileActivity$4: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountProfileActivity: void access$000(eu.vranckaert.worktime.activities.account.AccountProfileActivity)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountProfileActivity: void logout()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.donations.google.BillingService"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean confirmNotifications(int,java.lang.String[])&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean confirmNotifications(int,java.lang.String[])&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;,boolean bindToMarketBillingService()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <destinition name="interICC_com.android.vending.billing.MarketBillingService.BIND, "/>  
      <sender action="com.android.vending.billing.MarketBillingService.BIND"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean confirmNotifications(int,java.lang.String[])&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
        <node method="BillingService bindToMarketBillingService" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="BillingService bindToMarketBillingService" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.android.vending.billing.MarketBillingService.BIND&quot;)"/>  
        <node method="BillingService bindToMarketBillingService" type="PassOutIntent" unit="$z0 = virtualinvoke r0.&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)&gt;($r2, r0, 1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean confirmNotifications(int,java.lang.String[])&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean confirmNotifications(int,java.lang.String[])&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;,boolean bindToMarketBillingService()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <sender action="com.android.vending.billing.MarketBillingService.BIND"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean confirmNotifications(int,java.lang.String[])&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
        <node method="BillingService bindToMarketBillingService" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="BillingService bindToMarketBillingService" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.android.vending.billing.MarketBillingService.BIND&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean confirmNotifications(int,java.lang.String[])&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean confirmNotifications(int,java.lang.String[])&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;,boolean bindToMarketBillingService()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean confirmNotifications(int,java.lang.String[])&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
        <node method="BillingService bindToMarketBillingService" type="CreateMethod" unit="$r2 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.donations.google.BillingService"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean getPurchaseInformation(int,java.lang.String[])&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean getPurchaseInformation(int,java.lang.String[])&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;,boolean bindToMarketBillingService()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <destinition name="interICC_com.android.vending.billing.MarketBillingService.BIND, "/>  
      <sender action="com.android.vending.billing.MarketBillingService.BIND"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean getPurchaseInformation(int,java.lang.String[])&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
        <node method="BillingService bindToMarketBillingService" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="BillingService bindToMarketBillingService" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.android.vending.billing.MarketBillingService.BIND&quot;)"/>  
        <node method="BillingService bindToMarketBillingService" type="PassOutIntent" unit="$z0 = virtualinvoke r0.&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)&gt;($r2, r0, 1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean getPurchaseInformation(int,java.lang.String[])&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean getPurchaseInformation(int,java.lang.String[])&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;,boolean bindToMarketBillingService()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <sender action="com.android.vending.billing.MarketBillingService.BIND"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean getPurchaseInformation(int,java.lang.String[])&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
        <node method="BillingService bindToMarketBillingService" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="BillingService bindToMarketBillingService" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.android.vending.billing.MarketBillingService.BIND&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean getPurchaseInformation(int,java.lang.String[])&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean getPurchaseInformation(int,java.lang.String[])&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;,boolean bindToMarketBillingService()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean getPurchaseInformation(int,java.lang.String[])&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
        <node method="BillingService bindToMarketBillingService" type="CreateMethod" unit="$r2 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.donations.google.BillingService"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void purchaseStateChanged(int,java.lang.String,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void purchaseStateChanged(int,java.lang.String,java.lang.String)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean confirmNotifications(int,java.lang.String[])&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;,boolean bindToMarketBillingService()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <destinition name="interICC_com.android.vending.billing.MarketBillingService.BIND, "/>  
      <sender action="com.android.vending.billing.MarketBillingService.BIND"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void purchaseStateChanged(int,java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean confirmNotifications(int,java.lang.String[])&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
        <node method="BillingService bindToMarketBillingService" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="BillingService bindToMarketBillingService" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.android.vending.billing.MarketBillingService.BIND&quot;)"/>  
        <node method="BillingService bindToMarketBillingService" type="PassOutIntent" unit="$z0 = virtualinvoke r0.&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)&gt;($r2, r0, 1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void purchaseStateChanged(int,java.lang.String,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void purchaseStateChanged(int,java.lang.String,java.lang.String)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean confirmNotifications(int,java.lang.String[])&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;,boolean bindToMarketBillingService()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <sender action="com.android.vending.billing.MarketBillingService.BIND"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void purchaseStateChanged(int,java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean confirmNotifications(int,java.lang.String[])&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
        <node method="BillingService bindToMarketBillingService" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="BillingService bindToMarketBillingService" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.android.vending.billing.MarketBillingService.BIND&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void purchaseStateChanged(int,java.lang.String,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void purchaseStateChanged(int,java.lang.String,java.lang.String)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean confirmNotifications(int,java.lang.String[])&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;,boolean bindToMarketBillingService()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void purchaseStateChanged(int,java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean confirmNotifications(int,java.lang.String[])&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
        <node method="BillingService bindToMarketBillingService" type="CreateMethod" unit="$r2 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.donations.google.BillingService"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void handleCommand(android.content.Intent,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void handleCommand(android.content.Intent,int)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean getPurchaseInformation(int,java.lang.String[])&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;,boolean bindToMarketBillingService()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <destinition name="interICC_com.android.vending.billing.MarketBillingService.BIND, "/>  
      <sender action="com.android.vending.billing.MarketBillingService.BIND"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void handleCommand(android.content.Intent,int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean getPurchaseInformation(int,java.lang.String[])&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
        <node method="BillingService bindToMarketBillingService" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="BillingService bindToMarketBillingService" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.android.vending.billing.MarketBillingService.BIND&quot;)"/>  
        <node method="BillingService bindToMarketBillingService" type="PassOutIntent" unit="$z0 = virtualinvoke r0.&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)&gt;($r2, r0, 1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void handleCommand(android.content.Intent,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void handleCommand(android.content.Intent,int)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean getPurchaseInformation(int,java.lang.String[])&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;,boolean bindToMarketBillingService()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <sender action="com.android.vending.billing.MarketBillingService.BIND"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void handleCommand(android.content.Intent,int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean getPurchaseInformation(int,java.lang.String[])&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
        <node method="BillingService bindToMarketBillingService" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="BillingService bindToMarketBillingService" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.android.vending.billing.MarketBillingService.BIND&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void handleCommand(android.content.Intent,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void handleCommand(android.content.Intent,int)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean getPurchaseInformation(int,java.lang.String[])&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;,boolean bindToMarketBillingService()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void handleCommand(android.content.Intent,int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean getPurchaseInformation(int,java.lang.String[])&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
        <node method="BillingService bindToMarketBillingService" type="CreateMethod" unit="$r2 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.donations.google.BillingService"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: int onStartCommand(android.content.Intent,int,int)&gt;,int onStartCommand(android.content.Intent,int,int)"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
        <node method="BillingService onStartCommand" type="ReceiveIntentFromRetValue" unit="$r1 = virtualinvoke r0.&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: int onStartCommand(android.content.Intent,int,int)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void handleCommand(android.content.Intent,int)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean getPurchaseInformation(int,java.lang.String[])&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;,boolean bindToMarketBillingService()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <destinition name="interICC_com.android.vending.billing.MarketBillingService.BIND, "/>  
      <sender action="com.android.vending.billing.MarketBillingService.BIND"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void handleCommand(android.content.Intent,int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean getPurchaseInformation(int,java.lang.String[])&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
        <node method="BillingService bindToMarketBillingService" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="BillingService bindToMarketBillingService" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.android.vending.billing.MarketBillingService.BIND&quot;)"/>  
        <node method="BillingService bindToMarketBillingService" type="PassOutIntent" unit="$z0 = virtualinvoke r0.&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)&gt;($r2, r0, 1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: int onStartCommand(android.content.Intent,int,int)&gt;,int onStartCommand(android.content.Intent,int,int), &lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void handleCommand(android.content.Intent,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
        <node method="BillingService onStartCommand" type="ReceiveIntentFromRetValue" unit="$r1 = virtualinvoke r0.&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: int onStartCommand(android.content.Intent,int,int)&gt;,int onStartCommand(android.content.Intent,int,int)"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
        <node method="BillingService onStartCommand" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: int onStartCommand(android.content.Intent,int,int)&gt;,int onStartCommand(android.content.Intent,int,int), &lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void handleCommand(android.content.Intent,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
        <node method="BillingService onStartCommand" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: int onStartCommand(android.content.Intent,int,int)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void handleCommand(android.content.Intent,int)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean getPurchaseInformation(int,java.lang.String[])&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;,boolean bindToMarketBillingService()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <sender action="com.android.vending.billing.MarketBillingService.BIND"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void handleCommand(android.content.Intent,int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean getPurchaseInformation(int,java.lang.String[])&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
        <node method="BillingService bindToMarketBillingService" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="BillingService bindToMarketBillingService" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.android.vending.billing.MarketBillingService.BIND&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: int onStartCommand(android.content.Intent,int,int)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void handleCommand(android.content.Intent,int)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean getPurchaseInformation(int,java.lang.String[])&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;,boolean bindToMarketBillingService()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: int onStartCommand(android.content.Intent,int,int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void handleCommand(android.content.Intent,int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean getPurchaseInformation(int,java.lang.String[])&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
        <node method="BillingService bindToMarketBillingService" type="CreateMethod" unit="$r2 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="roboguice.activity.event.OnActivityResultEvent"> 
    <intentSummary> 
      <method value="&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;,void &lt;init&gt;(int,int,android.content.Intent)"/>  
      <source name="roboguice.activity.event.OnActivityResultEvent"/>  
      <nodes> 
        <node method="&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;,void &lt;init&gt;(int,int,android.content.Intent)"/>  
      <source name="roboguice.activity.event.OnActivityResultEvent"/>  
      <nodes> 
        <node method="&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="roboguice.activity.RoboAccountAuthenticatorActivity"> 
    <intentSummary> 
      <method value="&lt;roboguice.activity.RoboAccountAuthenticatorActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.activity.RoboAccountAuthenticatorActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;,void &lt;init&gt;(int,int,android.content.Intent)"/>  
      <source name="roboguice.activity.RoboAccountAuthenticatorActivity"/>  
      <nodes> 
        <node method="&lt;roboguice.activity.RoboAccountAuthenticatorActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.activity.RoboAccountAuthenticatorActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.activity.RoboAccountAuthenticatorActivity: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent), &lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
      <source name="roboguice.activity.RoboAccountAuthenticatorActivity"/>  
      <nodes> 
        <node method="&lt;roboguice.activity.RoboAccountAuthenticatorActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="RoboAccountAuthenticatorActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="RoboAccountAuthenticatorActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.activity.RoboAccountAuthenticatorActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.activity.RoboAccountAuthenticatorActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;,void &lt;init&gt;(int,int,android.content.Intent)"/>  
      <source name="roboguice.activity.RoboAccountAuthenticatorActivity"/>  
      <nodes> 
        <node method="&lt;roboguice.activity.RoboAccountAuthenticatorActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;,void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;,void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;,boolean setPunchButton(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;,boolean setPunchButton(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;,boolean setPunchButton(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;,boolean setPunchButton(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;,boolean setPunchButton(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;,boolean setPunchButton(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;,void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;,boolean setPunchButton(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;,boolean setPunchButton(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;,void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void enableWidgetOnClick(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void enableWidgetOnClick(int)&gt;,void enableWidgetOnClick(int)"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.HomeActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void enableWidgetOnClick(int)&gt;"/>  
        <node method="WidgetServiceImpl enableWidgetOnClick" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl enableWidgetOnClick" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Leu/vranckaert/worktime/activities/HomeActivity;&quot;)"/>  
        <node method="WidgetServiceImpl enableWidgetOnClick" type="PassOutIntent" unit="virtualinvoke $r5.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,void updateWidget2x1ProjectTask(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,void updateWidget2x1ProjectTask(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,void updateWidget2x1ProjectTask(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void enableWidgetOnClick(int)&gt;,void enableWidgetOnClick(int)"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.HomeActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void enableWidgetOnClick(int)&gt;"/>  
        <node method="WidgetServiceImpl enableWidgetOnClick" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl enableWidgetOnClick" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Leu/vranckaert/worktime/activities/HomeActivity;&quot;)"/>  
        <node method="WidgetServiceImpl enableWidgetOnClick" type="PassOutIntent" unit="virtualinvoke $r5.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,void updateWidget2x1ProjectTask(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;,void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,void updateWidget2x1ProjectTask(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,void updateWidget2x1ProjectTask(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;,void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,void updateWidget2x1ProjectTask(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,void updateWidget2x1ProjectTask(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.projects.SelectProjectActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void enableWidgetOnClick(int)&gt;,void enableWidgetOnClick(int)"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.HomeActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void enableWidgetOnClick(int)&gt;"/>  
        <node method="WidgetServiceImpl enableWidgetOnClick" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl enableWidgetOnClick" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Leu/vranckaert/worktime/activities/HomeActivity;&quot;)"/>  
        <node method="WidgetServiceImpl enableWidgetOnClick" type="PassOutIntent" unit="virtualinvoke $r5.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.projects.SelectProjectActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;,void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;,void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;,void updateWidget(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;,void updateWidget(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;,boolean setPunchButton(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;,void updateWidget(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;,void updateWidget(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;,void updateWidget(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;,void updateWidget(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;,void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;,boolean setPunchButton(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;,boolean setPunchButton(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;,void updateWidget(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;,void updateWidget(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;,void updateWidget(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;,void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;,void updateWidget(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;,void updateWidget(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;,boolean setPunchButton(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;,void updateWidget(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;,void updateWidget(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;,void updateWidget(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;,boolean setPunchButton(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;,void updateWidget(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;,void updateWidget(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;,void updateWidget(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;,void updateWidget(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;,boolean setPunchButton(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;,void updateWidget(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;,void updateWidget(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;,void updateWidget(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;,void updateWidget(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;,void updateWidget(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;,void updateWidget(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;,void updateWidget(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;,void updateWidget(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;,void updateWidget(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;,void updateWidget(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;,void updateWidget(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;,boolean setPunchButton(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;,void updateWidget(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;,void updateWidget(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;,boolean setPunchButton(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;,void updateWidget(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;,boolean setPunchButton(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,void updateWidget2x1ProjectTask(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,void updateWidget2x1ProjectTask(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void enableWidgetOnClick(int)&gt;,void enableWidgetOnClick(int)"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.HomeActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void enableWidgetOnClick(int)&gt;"/>  
        <node method="WidgetServiceImpl enableWidgetOnClick" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl enableWidgetOnClick" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Leu/vranckaert/worktime/activities/HomeActivity;&quot;)"/>  
        <node method="WidgetServiceImpl enableWidgetOnClick" type="PassOutIntent" unit="virtualinvoke $r5.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;,void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;,boolean setPunchButton(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;,boolean setPunchButton(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;,void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,void updateWidget2x1ProjectTask(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,void updateWidget2x1ProjectTask(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;,boolean setPunchButton(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,void updateWidget2x1ProjectTask(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,void updateWidget2x1ProjectTask(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;,boolean setPunchButton(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,void updateWidget2x1ProjectTask(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;,boolean setPunchButton(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.projects.SelectProjectActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.projects.SelectProjectActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,void updateWidget2x1ProjectTask(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;,boolean setPunchButton(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;,boolean setPunchButton(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.context.IntentUtil"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,int,int,java.util.List,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,int,int,java.util.List,int)&gt;,&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.util.List,java.lang.String)&gt;,void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.util.List,java.lang.String)"/>  
      <source name="eu.vranckaert.worktime.utils.context.IntentUtil"/>  
      <destinition name="interICC_android.intent.action.SEND_MULTIPLE, "/>  
      <sender action="android.intent.action.SEND_MULTIPLE" type="text/plain"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,int,int,java.util.List,int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.util.List,java.lang.String)&gt;"/>  
        <node method="IntentUtil sendSomething" type="CreateMethod" unit="r5 = new android.content.Intent"/>  
        <node method="IntentUtil sendSomething" type="SetAttribute" unit="specialinvoke r5.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.SEND_MULTIPLE&quot;)"/>  
        <node method="IntentUtil sendSomething" type="SetAttribute" unit="virtualinvoke r5.&lt;android.content.Intent: android.content.Intent setType(java.lang.String)&gt;(&quot;text/plain&quot;)"/>  
        <node method="IntentUtil sendSomething" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.app.Activity: void startActivity(android.content.Intent)&gt;(r5)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.reporting.ReportingCriteriaActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.reporting.ReportingCriteriaActivity: void batchShareDocuments(java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.reporting.ReportingCriteriaActivity: void batchShareDocuments(java.util.List)&gt;,&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,int,int,java.util.List,int)&gt;,&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.util.List,java.lang.String)&gt;,void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.util.List,java.lang.String)"/>  
      <source name="eu.vranckaert.worktime.activities.reporting.ReportingCriteriaActivity"/>  
      <destinition name="interICC_android.intent.action.SEND_MULTIPLE, "/>  
      <sender action="android.intent.action.SEND_MULTIPLE" type="text/plain"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.reporting.ReportingCriteriaActivity: void batchShareDocuments(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,int,int,java.util.List,int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.util.List,java.lang.String)&gt;"/>  
        <node method="IntentUtil sendSomething" type="CreateMethod" unit="r5 = new android.content.Intent"/>  
        <node method="IntentUtil sendSomething" type="SetAttribute" unit="specialinvoke r5.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.SEND_MULTIPLE&quot;)"/>  
        <node method="IntentUtil sendSomething" type="SetAttribute" unit="virtualinvoke r5.&lt;android.content.Intent: android.content.Intent setType(java.lang.String)&gt;(&quot;text/plain&quot;)"/>  
        <node method="IntentUtil sendSomething" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.app.Activity: void startActivity(android.content.Intent)&gt;(r5)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.donations.google.BillingReceiver"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingReceiver"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="BillingReceiver onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingReceiver: void checkResponseCode(android.content.Context,long,int)&gt;,void checkResponseCode(android.content.Context,long,int)"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingReceiver"/>  
      <destinition name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <sender action="com.android.vending.billing.RESPONSE_CODE"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingReceiver: void checkResponseCode(android.content.Context,long,int)&gt;"/>  
        <node method="BillingReceiver checkResponseCode" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="BillingReceiver checkResponseCode" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.android.vending.billing.RESPONSE_CODE&quot;)"/>  
        <node method="BillingReceiver checkResponseCode" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setClass(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Leu/vranckaert/worktime/utils/donations/google/BillingService;&quot;)"/>  
        <node method="BillingReceiver checkResponseCode" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingReceiver"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="BillingReceiver onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingReceiver"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="BillingReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.utils.donations.google.BillingReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingReceiver"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="BillingReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.utils.donations.google.BillingReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingReceiver: void purchaseStateChanged(android.content.Context,java.lang.String,java.lang.String)&gt;,void purchaseStateChanged(android.content.Context,java.lang.String,java.lang.String)"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingReceiver"/>  
      <destinition name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <sender action="com.android.vending.billing.PURCHASE_STATE_CHANGED"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingReceiver: void purchaseStateChanged(android.content.Context,java.lang.String,java.lang.String)&gt;"/>  
        <node method="BillingReceiver purchaseStateChanged" type="CreateMethod" unit="r4 = new android.content.Intent"/>  
        <node method="BillingReceiver purchaseStateChanged" type="SetAttribute" unit="specialinvoke r4.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.android.vending.billing.PURCHASE_STATE_CHANGED&quot;)"/>  
        <node method="BillingReceiver purchaseStateChanged" type="SetAttribute" unit="virtualinvoke r4.&lt;android.content.Intent: android.content.Intent setClass(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Leu/vranckaert/worktime/utils/donations/google/BillingService;&quot;)"/>  
        <node method="BillingReceiver purchaseStateChanged" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;(r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingReceiver: void notify(android.content.Context,java.lang.String)&gt;,void notify(android.content.Context,java.lang.String)"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingReceiver"/>  
      <destinition name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <sender action="com.example.dungeons.GET_PURCHASE_INFORMATION"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingReceiver: void notify(android.content.Context,java.lang.String)&gt;"/>  
        <node method="BillingReceiver notify" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="BillingReceiver notify" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.example.dungeons.GET_PURCHASE_INFORMATION&quot;)"/>  
        <node method="BillingReceiver notify" type="SetAttribute" unit="virtualinvoke r3.&lt;android.content.Intent: android.content.Intent setClass(android.content.Context,java.lang.Class)&gt;($r1, class &quot;Leu/vranckaert/worktime/utils/donations/google/BillingService;&quot;)"/>  
        <node method="BillingReceiver notify" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.content.Context: android.content.ComponentName startService(android.content.Intent)&gt;(r3)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingReceiver"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="BillingReceiver onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingReceiver"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="BillingReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.utils.donations.google.BillingReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingReceiver"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="BillingReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.utils.donations.google.BillingReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingReceiver"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="BillingReceiver onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.context.IntentUtil"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.io.File,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.io.File,java.lang.String)&gt;,&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.util.List,java.lang.String)&gt;,void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.util.List,java.lang.String)"/>  
      <source name="eu.vranckaert.worktime.utils.context.IntentUtil"/>  
      <destinition name="interICC_android.intent.action.SEND_MULTIPLE, "/>  
      <sender action="android.intent.action.SEND_MULTIPLE" type="text/plain"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.io.File,java.lang.String)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.util.List,java.lang.String)&gt;"/>  
        <node method="IntentUtil sendSomething" type="CreateMethod" unit="r5 = new android.content.Intent"/>  
        <node method="IntentUtil sendSomething" type="SetAttribute" unit="specialinvoke r5.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.SEND_MULTIPLE&quot;)"/>  
        <node method="IntentUtil sendSomething" type="SetAttribute" unit="virtualinvoke r5.&lt;android.content.Intent: android.content.Intent setType(java.lang.String)&gt;(&quot;text/plain&quot;)"/>  
        <node method="IntentUtil sendSomething" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.app.Activity: void startActivity(android.content.Intent)&gt;(r5)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.context.IntentUtil"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,int,int,java.io.File,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,int,int,java.io.File,int)&gt;,&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.io.File,java.lang.String)&gt;,&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.util.List,java.lang.String)&gt;,void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.util.List,java.lang.String)"/>  
      <source name="eu.vranckaert.worktime.utils.context.IntentUtil"/>  
      <destinition name="interICC_android.intent.action.SEND_MULTIPLE, "/>  
      <sender action="android.intent.action.SEND_MULTIPLE" type="text/plain"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,int,int,java.io.File,int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.io.File,java.lang.String)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.util.List,java.lang.String)&gt;"/>  
        <node method="IntentUtil sendSomething" type="CreateMethod" unit="r5 = new android.content.Intent"/>  
        <node method="IntentUtil sendSomething" type="SetAttribute" unit="specialinvoke r5.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.SEND_MULTIPLE&quot;)"/>  
        <node method="IntentUtil sendSomething" type="SetAttribute" unit="virtualinvoke r5.&lt;android.content.Intent: android.content.Intent setType(java.lang.String)&gt;(&quot;text/plain&quot;)"/>  
        <node method="IntentUtil sendSomething" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.app.Activity: void startActivity(android.content.Intent)&gt;(r5)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.reporting.ReportingExportActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.reporting.ReportingExportActivity: void sendExportedFileByMail()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.reporting.ReportingExportActivity: void sendExportedFileByMail()&gt;,&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,int,int,java.io.File,int)&gt;,&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.io.File,java.lang.String)&gt;,&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.util.List,java.lang.String)&gt;,void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.util.List,java.lang.String)"/>  
      <source name="eu.vranckaert.worktime.activities.reporting.ReportingExportActivity"/>  
      <destinition name="interICC_android.intent.action.SEND_MULTIPLE, "/>  
      <sender action="android.intent.action.SEND_MULTIPLE" type="text/plain"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.reporting.ReportingExportActivity: void sendExportedFileByMail()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,int,int,java.io.File,int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.io.File,java.lang.String)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.util.List,java.lang.String)&gt;"/>  
        <node method="IntentUtil sendSomething" type="CreateMethod" unit="r5 = new android.content.Intent"/>  
        <node method="IntentUtil sendSomething" type="SetAttribute" unit="specialinvoke r5.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.SEND_MULTIPLE&quot;)"/>  
        <node method="IntentUtil sendSomething" type="SetAttribute" unit="virtualinvoke r5.&lt;android.content.Intent: android.content.Intent setType(java.lang.String)&gt;(&quot;text/plain&quot;)"/>  
        <node method="IntentUtil sendSomething" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.app.Activity: void startActivity(android.content.Intent)&gt;(r5)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.reporting.ReportingExportActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.reporting.ReportingExportActivity: void access$100(eu.vranckaert.worktime.activities.reporting.ReportingExportActivity)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.reporting.ReportingExportActivity: void access$100(eu.vranckaert.worktime.activities.reporting.ReportingExportActivity)&gt;,&lt;eu.vranckaert.worktime.activities.reporting.ReportingExportActivity: void sendExportedFileByMail()&gt;,&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,int,int,java.io.File,int)&gt;,&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.io.File,java.lang.String)&gt;,&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.util.List,java.lang.String)&gt;,void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.util.List,java.lang.String)"/>  
      <source name="eu.vranckaert.worktime.activities.reporting.ReportingExportActivity"/>  
      <destinition name="interICC_android.intent.action.SEND_MULTIPLE, "/>  
      <sender action="android.intent.action.SEND_MULTIPLE" type="text/plain"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.reporting.ReportingExportActivity: void access$100(eu.vranckaert.worktime.activities.reporting.ReportingExportActivity)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.reporting.ReportingExportActivity: void sendExportedFileByMail()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,int,int,java.io.File,int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.io.File,java.lang.String)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.util.List,java.lang.String)&gt;"/>  
        <node method="IntentUtil sendSomething" type="CreateMethod" unit="r5 = new android.content.Intent"/>  
        <node method="IntentUtil sendSomething" type="SetAttribute" unit="specialinvoke r5.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.SEND_MULTIPLE&quot;)"/>  
        <node method="IntentUtil sendSomething" type="SetAttribute" unit="virtualinvoke r5.&lt;android.content.Intent: android.content.Intent setType(java.lang.String)&gt;(&quot;text/plain&quot;)"/>  
        <node method="IntentUtil sendSomething" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.app.Activity: void startActivity(android.content.Intent)&gt;(r5)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.reporting.ReportingExportActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.reporting.ReportingExportActivity$3: void onClick(android.content.DialogInterface,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.reporting.ReportingExportActivity$3: void onClick(android.content.DialogInterface,int)&gt;,&lt;eu.vranckaert.worktime.activities.reporting.ReportingExportActivity: void access$100(eu.vranckaert.worktime.activities.reporting.ReportingExportActivity)&gt;,&lt;eu.vranckaert.worktime.activities.reporting.ReportingExportActivity: void sendExportedFileByMail()&gt;,&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,int,int,java.io.File,int)&gt;,&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.io.File,java.lang.String)&gt;,&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.util.List,java.lang.String)&gt;,void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.util.List,java.lang.String)"/>  
      <source name="eu.vranckaert.worktime.activities.reporting.ReportingExportActivity"/>  
      <destinition name="interICC_android.intent.action.SEND_MULTIPLE, "/>  
      <sender action="android.intent.action.SEND_MULTIPLE" type="text/plain"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.reporting.ReportingExportActivity$3: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.reporting.ReportingExportActivity: void access$100(eu.vranckaert.worktime.activities.reporting.ReportingExportActivity)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.reporting.ReportingExportActivity: void sendExportedFileByMail()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,int,int,java.io.File,int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.io.File,java.lang.String)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.util.List,java.lang.String)&gt;"/>  
        <node method="IntentUtil sendSomething" type="CreateMethod" unit="r5 = new android.content.Intent"/>  
        <node method="IntentUtil sendSomething" type="SetAttribute" unit="specialinvoke r5.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.SEND_MULTIPLE&quot;)"/>  
        <node method="IntentUtil sendSomething" type="SetAttribute" unit="virtualinvoke r5.&lt;android.content.Intent: android.content.Intent setType(java.lang.String)&gt;(&quot;text/plain&quot;)"/>  
        <node method="IntentUtil sendSomething" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.app.Activity: void startActivity(android.content.Intent)&gt;(r5)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.reporting.ReportingCriteriaActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.reporting.ReportingCriteriaActivity: void access$1200(eu.vranckaert.worktime.activities.reporting.ReportingCriteriaActivity,java.util.List)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.reporting.ReportingCriteriaActivity: void access$1200(eu.vranckaert.worktime.activities.reporting.ReportingCriteriaActivity,java.util.List)&gt;,&lt;eu.vranckaert.worktime.activities.reporting.ReportingCriteriaActivity: void batchShareDocuments(java.util.List)&gt;,&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,int,int,java.util.List,int)&gt;,&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.util.List,java.lang.String)&gt;,void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.util.List,java.lang.String)"/>  
      <source name="eu.vranckaert.worktime.activities.reporting.ReportingCriteriaActivity"/>  
      <destinition name="interICC_android.intent.action.SEND_MULTIPLE, "/>  
      <sender action="android.intent.action.SEND_MULTIPLE" type="text/plain"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.reporting.ReportingCriteriaActivity: void access$1200(eu.vranckaert.worktime.activities.reporting.ReportingCriteriaActivity,java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.reporting.ReportingCriteriaActivity: void batchShareDocuments(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,int,int,java.util.List,int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.util.List,java.lang.String)&gt;"/>  
        <node method="IntentUtil sendSomething" type="CreateMethod" unit="r5 = new android.content.Intent"/>  
        <node method="IntentUtil sendSomething" type="SetAttribute" unit="specialinvoke r5.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.SEND_MULTIPLE&quot;)"/>  
        <node method="IntentUtil sendSomething" type="SetAttribute" unit="virtualinvoke r5.&lt;android.content.Intent: android.content.Intent setType(java.lang.String)&gt;(&quot;text/plain&quot;)"/>  
        <node method="IntentUtil sendSomething" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.app.Activity: void startActivity(android.content.Intent)&gt;(r5)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.reporting.ReportingCriteriaActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.reporting.ReportingCriteriaActivity$27: void onClick(android.content.DialogInterface,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.reporting.ReportingCriteriaActivity$27: void onClick(android.content.DialogInterface,int)&gt;,&lt;eu.vranckaert.worktime.activities.reporting.ReportingCriteriaActivity: void access$1200(eu.vranckaert.worktime.activities.reporting.ReportingCriteriaActivity,java.util.List)&gt;,&lt;eu.vranckaert.worktime.activities.reporting.ReportingCriteriaActivity: void batchShareDocuments(java.util.List)&gt;,&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,int,int,java.util.List,int)&gt;,&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.util.List,java.lang.String)&gt;,void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.util.List,java.lang.String)"/>  
      <source name="eu.vranckaert.worktime.activities.reporting.ReportingCriteriaActivity"/>  
      <destinition name="interICC_android.intent.action.SEND_MULTIPLE, "/>  
      <sender action="android.intent.action.SEND_MULTIPLE" type="text/plain"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.reporting.ReportingCriteriaActivity$27: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.reporting.ReportingCriteriaActivity: void access$1200(eu.vranckaert.worktime.activities.reporting.ReportingCriteriaActivity,java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.reporting.ReportingCriteriaActivity: void batchShareDocuments(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,int,int,java.util.List,int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.util.List,java.lang.String)&gt;"/>  
        <node method="IntentUtil sendSomething" type="CreateMethod" unit="r5 = new android.content.Intent"/>  
        <node method="IntentUtil sendSomething" type="SetAttribute" unit="specialinvoke r5.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.SEND_MULTIPLE&quot;)"/>  
        <node method="IntentUtil sendSomething" type="SetAttribute" unit="virtualinvoke r5.&lt;android.content.Intent: android.content.Intent setType(java.lang.String)&gt;(&quot;text/plain&quot;)"/>  
        <node method="IntentUtil sendSomething" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.app.Activity: void startActivity(android.content.Intent)&gt;(r5)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.alarm.AlarmUtil"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;,android.app.PendingIntent getSyncOperation(android.content.Context,int)"/>  
      <source name="eu.vranckaert.worktime.utils.alarm.AlarmUtil"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date)&gt;,void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;, &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.utils.alarm.AlarmUtil"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date)&gt;"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="ReceiveIntentFromRetValue" unit="$r9 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="PassOutIntent" unit="virtualinvoke $r8.&lt;android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)&gt;(0, $l1, 86400000L, $r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date)&gt;,void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;, &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.utils.alarm.AlarmUtil"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;,android.app.PendingIntent getSyncOperation(android.content.Context,int)"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;,void removeAllSyncAlarms(android.content.Context), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;,void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="ReceiveIntentFromRetValue" unit="$r9 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="ReceiveIntentFromRetValue" unit="$r9 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="PassOutIntent" unit="virtualinvoke $r8.&lt;android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)&gt;(0, $l1, 86400000L, $r9)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;,void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="ReceiveIntentFromRetValue" unit="$r7 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="ReceiveIntentFromRetValue" unit="$r7 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="PassOutIntent" unit="virtualinvoke $r6.&lt;android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)&gt;(0, l1, $l0, $r7)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;,void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;,void removeAllSyncAlarms(android.content.Context), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void access$100(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void access$100(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;,void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;, &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void access$100(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void access$100(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void access$100(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;,android.app.PendingIntent getSyncOperation(android.content.Context,int)"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void access$100(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void access$100(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void access$100(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;,void removeAllSyncAlarms(android.content.Context), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void access$100(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void access$100(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void access$100(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date)&gt;,void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;, &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void access$100(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date)&gt;"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="ReceiveIntentFromRetValue" unit="$r9 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="PassOutIntent" unit="virtualinvoke $r8.&lt;android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)&gt;(0, $l1, 86400000L, $r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void access$100(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void access$100(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date)&gt;,void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;, &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void access$100(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void access$100(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void access$100(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;,void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void access$100(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void access$100(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void access$100(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;,void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;, &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void access$100(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="ReceiveIntentFromRetValue" unit="$r7 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="PassOutIntent" unit="virtualinvoke $r6.&lt;android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)&gt;(0, l1, $l0, $r7)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void access$100(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void access$100(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;,void removeAllSyncAlarms(android.content.Context), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void access$100(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void access$100(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void access$100(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;,void access$100(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService), &lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void access$100(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void access$100(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void access$100(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;,void access$100(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService), &lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void access$100(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void access$100(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void access$100(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;,void access$100(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService), &lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void access$100(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$2: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$2: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;,void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;, &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$2: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$2: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$2: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;,void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$2: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="ReceiveIntentFromRetValue" unit="$r9 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="ReceiveIntentFromRetValue" unit="$r9 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="PassOutIntent" unit="virtualinvoke $r8.&lt;android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)&gt;(0, $l1, 86400000L, $r9)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$2: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$2: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date)&gt;,void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;, &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$2: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date)&gt;"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="ReceiveIntentFromRetValue" unit="$r9 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="PassOutIntent" unit="virtualinvoke $r8.&lt;android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)&gt;(0, $l1, 86400000L, $r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$2: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$2: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;,boolean onPreferenceChange(android.preference.Preference,java.lang.Object), &lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void access$100(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$2: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="ReceiveIntentFromRetValue" unit="$r7 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="PassOutIntent" unit="virtualinvoke $r6.&lt;android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)&gt;(0, l1, $l0, $r7)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$2: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$2: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;,boolean onPreferenceChange(android.preference.Preference,java.lang.Object), &lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void access$100(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$2: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="ReceiveIntentFromRetValue" unit="$r9 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="ReceiveIntentFromRetValue" unit="$r9 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="PassOutIntent" unit="virtualinvoke $r8.&lt;android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)&gt;(0, $l1, 86400000L, $r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$2: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$2: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date)&gt;,void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;, &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$2: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$2: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$2: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;,void removeAllSyncAlarms(android.content.Context), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$2: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$2: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$2: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;,android.app.PendingIntent getSyncOperation(android.content.Context,int)"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$2: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$2: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$2: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;,void removeAllSyncAlarms(android.content.Context), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$2: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$2: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$2: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;,void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$2: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="ReceiveIntentFromRetValue" unit="$r7 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="ReceiveIntentFromRetValue" unit="$r7 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="PassOutIntent" unit="virtualinvoke $r6.&lt;android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)&gt;(0, l1, $l0, $r7)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$2: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$2: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;,void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$2: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$2: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$2: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;,void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$2: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$2: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$2: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;,void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;, &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$2: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="ReceiveIntentFromRetValue" unit="$r7 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="PassOutIntent" unit="virtualinvoke $r6.&lt;android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)&gt;(0, l1, $l0, $r7)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$2: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$2: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;,boolean onPreferenceChange(android.preference.Preference,java.lang.Object), &lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void access$100(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$2: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.model.notification.NotificationAction"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.model.notification.NotificationAction: void &lt;init&gt;(java.lang.String,android.content.Intent,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.model.notification.NotificationAction: void &lt;init&gt;(java.lang.String,android.content.Intent,int)&gt;,void &lt;init&gt;(java.lang.String,android.content.Intent,int)"/>  
      <source name="eu.vranckaert.worktime.model.notification.NotificationAction"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.model.notification.NotificationAction: void &lt;init&gt;(java.lang.String,android.content.Intent,int)&gt;"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.model.notification.NotificationAction: void &lt;init&gt;(java.lang.String,android.content.Intent,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.model.notification.NotificationAction: void &lt;init&gt;(java.lang.String,android.content.Intent,int)&gt;,void &lt;init&gt;(java.lang.String,android.content.Intent,int)"/>  
      <source name="eu.vranckaert.worktime.model.notification.NotificationAction"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.model.notification.NotificationAction: void &lt;init&gt;(java.lang.String,android.content.Intent,int)&gt;"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="roboguice.service.RoboIntentService"> 
    <intentSummary> 
      <method value="&lt;roboguice.service.RoboIntentService: void onStart(android.content.Intent,int)&gt;"/>  
      <methodtrace value="&lt;roboguice.service.RoboIntentService: void onStart(android.content.Intent,int)&gt;,void onStart(android.content.Intent,int)"/>  
      <source name="roboguice.service.RoboIntentService"/>  
      <nodes> 
        <node method="&lt;roboguice.service.RoboIntentService: void onStart(android.content.Intent,int)&gt;"/>  
        <node method="RoboIntentService onStart" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.service.RoboIntentService: void onStart(android.content.Intent,int)&gt;"/>  
      <methodtrace value="&lt;roboguice.service.RoboIntentService: void onStart(android.content.Intent,int)&gt;,void onStart(android.content.Intent,int)"/>  
      <source name="roboguice.service.RoboIntentService"/>  
      <nodes> 
        <node method="&lt;roboguice.service.RoboIntentService: void onStart(android.content.Intent,int)&gt;"/>  
        <node method="RoboIntentService onStart" type="ReceiveIntentFromRetValue" unit="$r1 = virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.projects.ManageProjectsActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: void openProjectDetailActivity(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: void openProjectDetailActivity(eu.vranckaert.worktime.model.Project)&gt;,void openProjectDetailActivity(eu.vranckaert.worktime.model.Project)"/>  
      <source name="eu.vranckaert.worktime.activities.projects.ManageProjectsActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: void openProjectDetailActivity(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="ManageProjectsActivity openProjectDetailActivity" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="ManageProjectsActivity openProjectDetailActivity" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/projects/ProjectDetailsActivity;&quot;)"/>  
        <node method="ManageProjectsActivity openProjectDetailActivity" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: void startActivityForResult(android.content.Intent,int)&gt;(r2, 10)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.projects.ManageProjectsActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: boolean onContextItemSelected(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: boolean onContextItemSelected(android.view.MenuItem)&gt;,&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: void openProjectDetailActivity(eu.vranckaert.worktime.model.Project)&gt;,void openProjectDetailActivity(eu.vranckaert.worktime.model.Project)"/>  
      <source name="eu.vranckaert.worktime.activities.projects.ManageProjectsActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: boolean onContextItemSelected(android.view.MenuItem)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: void openProjectDetailActivity(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="ManageProjectsActivity openProjectDetailActivity" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="ManageProjectsActivity openProjectDetailActivity" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/projects/ProjectDetailsActivity;&quot;)"/>  
        <node method="ManageProjectsActivity openProjectDetailActivity" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: void startActivityForResult(android.content.Intent,int)&gt;(r2, 10)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: boolean onContextItemSelected(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: boolean onContextItemSelected(android.view.MenuItem)&gt;,&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: void openAddProjectActivity()&gt;,void openAddProjectActivity()"/>  
      <source name="eu.vranckaert.worktime.activities.projects.ManageProjectsActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.projects.AddEditProjectActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: boolean onContextItemSelected(android.view.MenuItem)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: void openAddProjectActivity()&gt;"/>  
        <node method="ManageProjectsActivity openAddProjectActivity" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="ManageProjectsActivity openAddProjectActivity" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r2, class &quot;Leu/vranckaert/worktime/activities/projects/AddEditProjectActivity;&quot;)"/>  
        <node method="ManageProjectsActivity openAddProjectActivity" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: void startActivityForResult(android.content.Intent,int)&gt;(r1, 6)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: boolean onContextItemSelected(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: boolean onContextItemSelected(android.view.MenuItem)&gt;,&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: void openEditProjectActivity(eu.vranckaert.worktime.model.Project)&gt;,void openEditProjectActivity(eu.vranckaert.worktime.model.Project)"/>  
      <source name="eu.vranckaert.worktime.activities.projects.ManageProjectsActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.projects.AddEditProjectActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: boolean onContextItemSelected(android.view.MenuItem)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: void openEditProjectActivity(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="ManageProjectsActivity openEditProjectActivity" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="ManageProjectsActivity openEditProjectActivity" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Leu/vranckaert/worktime/activities/projects/AddEditProjectActivity;&quot;)"/>  
        <node method="ManageProjectsActivity openEditProjectActivity" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: void startActivityForResult(android.content.Intent,int)&gt;(r2, 8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: boolean onContextItemSelected(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: boolean onContextItemSelected(android.view.MenuItem)&gt;,&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: void openCopyProjectActivity(eu.vranckaert.worktime.model.Project)&gt;,void openCopyProjectActivity(eu.vranckaert.worktime.model.Project)"/>  
      <source name="eu.vranckaert.worktime.activities.projects.ManageProjectsActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.projects.CopyProjectActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: boolean onContextItemSelected(android.view.MenuItem)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: void openCopyProjectActivity(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="ManageProjectsActivity openCopyProjectActivity" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="ManageProjectsActivity openCopyProjectActivity" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Leu/vranckaert/worktime/activities/projects/CopyProjectActivity;&quot;)"/>  
        <node method="ManageProjectsActivity openCopyProjectActivity" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: void startActivityForResult(android.content.Intent,int)&gt;(r2, 12)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.projects.AddEditProjectActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.projects.AddEditProjectActivity$1: void onPostExecute(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.projects.AddEditProjectActivity$1: void onPostExecute(eu.vranckaert.worktime.model.Project)&gt;,void onPostExecute(eu.vranckaert.worktime.model.Project)"/>  
      <source name="eu.vranckaert.worktime.activities.projects.AddEditProjectActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.projects.AddEditProjectActivity$1: void onPostExecute(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="AddEditProjectActivity$1 onPostExecute" type="CreateMethod" unit="r2 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.projects.AddEditProjectActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.projects.AddEditProjectActivity$1: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.projects.AddEditProjectActivity$1: void onPostExecute(java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.activities.projects.AddEditProjectActivity$1: void onPostExecute(eu.vranckaert.worktime.model.Project)&gt;,void onPostExecute(eu.vranckaert.worktime.model.Project)"/>  
      <source name="eu.vranckaert.worktime.activities.projects.AddEditProjectActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.projects.AddEditProjectActivity$1: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.projects.AddEditProjectActivity$1: void onPostExecute(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="AddEditProjectActivity$1 onPostExecute" type="CreateMethod" unit="r2 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.donations.google.BillingService"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void runPendingRequests()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void runPendingRequests()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;,boolean bindToMarketBillingService()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <destinition name="interICC_com.android.vending.billing.MarketBillingService.BIND, "/>  
      <sender action="com.android.vending.billing.MarketBillingService.BIND"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void runPendingRequests()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
        <node method="BillingService bindToMarketBillingService" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="BillingService bindToMarketBillingService" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.android.vending.billing.MarketBillingService.BIND&quot;)"/>  
        <node method="BillingService bindToMarketBillingService" type="PassOutIntent" unit="$z0 = virtualinvoke r0.&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)&gt;($r2, r0, 1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void runPendingRequests()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void runPendingRequests()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;,boolean bindToMarketBillingService()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <sender action="com.android.vending.billing.MarketBillingService.BIND"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void runPendingRequests()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
        <node method="BillingService bindToMarketBillingService" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="BillingService bindToMarketBillingService" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.android.vending.billing.MarketBillingService.BIND&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void runPendingRequests()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void runPendingRequests()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;,boolean bindToMarketBillingService()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void runPendingRequests()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
        <node method="BillingService bindToMarketBillingService" type="CreateMethod" unit="$r2 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.donations.google.BillingService"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void onServiceConnected(android.content.ComponentName,android.os.IBinder)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void onServiceConnected(android.content.ComponentName,android.os.IBinder)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void runPendingRequests()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;,boolean bindToMarketBillingService()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <destinition name="interICC_com.android.vending.billing.MarketBillingService.BIND, "/>  
      <sender action="com.android.vending.billing.MarketBillingService.BIND"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void onServiceConnected(android.content.ComponentName,android.os.IBinder)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void runPendingRequests()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
        <node method="BillingService bindToMarketBillingService" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="BillingService bindToMarketBillingService" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.android.vending.billing.MarketBillingService.BIND&quot;)"/>  
        <node method="BillingService bindToMarketBillingService" type="PassOutIntent" unit="$z0 = virtualinvoke r0.&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)&gt;($r2, r0, 1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void onServiceConnected(android.content.ComponentName,android.os.IBinder)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void onServiceConnected(android.content.ComponentName,android.os.IBinder)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void runPendingRequests()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;,boolean bindToMarketBillingService()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <sender action="com.android.vending.billing.MarketBillingService.BIND"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void onServiceConnected(android.content.ComponentName,android.os.IBinder)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void runPendingRequests()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
        <node method="BillingService bindToMarketBillingService" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="BillingService bindToMarketBillingService" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.android.vending.billing.MarketBillingService.BIND&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void onServiceConnected(android.content.ComponentName,android.os.IBinder)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void onServiceConnected(android.content.ComponentName,android.os.IBinder)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void runPendingRequests()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;,boolean bindToMarketBillingService()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void onServiceConnected(android.content.ComponentName,android.os.IBinder)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void runPendingRequests()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
        <node method="BillingService bindToMarketBillingService" type="CreateMethod" unit="$r2 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.about.AboutListElement"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.about.AboutListElement: void &lt;init&gt;(int,java.lang.String,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.about.AboutListElement: void &lt;init&gt;(int,java.lang.String,android.content.Intent)&gt;,void &lt;init&gt;(int,java.lang.String,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.activities.about.AboutListElement"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.about.AboutListElement: void &lt;init&gt;(int,java.lang.String,android.content.Intent)&gt;"/>  
        <node method="AboutListElement &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="AboutListElement &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="AboutListElement &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="AboutListElement &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.about.AboutListElement: void &lt;init&gt;(int,java.lang.String,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.about.AboutListElement: void &lt;init&gt;(int,java.lang.String,android.content.Intent)&gt;,void &lt;init&gt;(int,java.lang.String,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.activities.about.AboutListElement"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.about.AboutListElement: void &lt;init&gt;(int,java.lang.String,android.content.Intent)&gt;"/>  
        <node method="AboutListElement &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="AboutListElement &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="AboutListElement &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.about.AboutActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.about.AboutActivity: java.util.List createElementList()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.about.AboutActivity: java.util.List createElementList()&gt;,&lt;eu.vranckaert.worktime.activities.about.AboutListElement: void &lt;init&gt;(int,java.lang.String,android.content.Intent)&gt;,void &lt;init&gt;(int,java.lang.String,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.activities.about.AboutActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.about.AboutActivity: java.util.List createElementList()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.about.AboutListElement: void &lt;init&gt;(int,java.lang.String,android.content.Intent)&gt;"/>  
        <node method="AboutListElement &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="AboutListElement &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="AboutListElement &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="AboutListElement &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.about.AboutActivity: java.util.List createElementList()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.about.AboutActivity: java.util.List createElementList()&gt;,java.util.List createElementList(), &lt;eu.vranckaert.worktime.activities.about.AboutListElement: void &lt;init&gt;(int,java.lang.String,android.content.Intent)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.about.AboutActivity"/>  
      <sender action="android.intent.action.VIEW" data="http://www.apache.org/licenses/LICENSE-2.0"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.about.AboutActivity: java.util.List createElementList()&gt;"/>  
        <node method="AboutActivity createElementList" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="AboutActivity createElementList" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="AboutActivity createElementList" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r5)"/>  
        <node method="AboutListElement &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="AboutActivity createElementList" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="AboutActivity createElementList" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.about.AboutActivity: java.util.List createElementList()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.about.AboutActivity: java.util.List createElementList()&gt;,&lt;eu.vranckaert.worktime.activities.about.AboutListElement: void &lt;init&gt;(int,java.lang.String,android.content.Intent)&gt;,void &lt;init&gt;(int,java.lang.String,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.activities.about.AboutActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.about.AboutActivity: java.util.List createElementList()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.about.AboutListElement: void &lt;init&gt;(int,java.lang.String,android.content.Intent)&gt;"/>  
        <node method="AboutListElement &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="AboutListElement &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="AboutListElement &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.about.AboutActivity: java.util.List createElementList()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.about.AboutActivity: java.util.List createElementList()&gt;,java.util.List createElementList(), &lt;eu.vranckaert.worktime.activities.about.AboutListElement: void &lt;init&gt;(int,java.lang.String,android.content.Intent)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.about.AboutActivity"/>  
      <destinition name="eu.vranckaert.worktime.utils.donations.DonationsActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.about.AboutActivity: java.util.List createElementList()&gt;"/>  
        <node method="AboutActivity createElementList" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="AboutActivity createElementList" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/utils/donations/DonationsActivity;&quot;)"/>  
        <node method="AboutListElement &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="AboutActivity createElementList" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="AboutActivity createElementList" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.about.AboutActivity: java.util.List createElementList()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.about.AboutActivity: java.util.List createElementList()&gt;,java.util.List createElementList(), &lt;eu.vranckaert.worktime.activities.about.AboutListElement: void &lt;init&gt;(int,java.lang.String,android.content.Intent)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.about.AboutActivity"/>  
      <sender action="android.intent.action.VIEW" data="http://code.google.com/p/worktime/issues/entry"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.about.AboutActivity: java.util.List createElementList()&gt;"/>  
        <node method="AboutActivity createElementList" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="AboutActivity createElementList" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="AboutActivity createElementList" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r5)"/>  
        <node method="AboutListElement &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="AboutActivity createElementList" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="AboutActivity createElementList" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.about.AboutActivity: java.util.List createElementList()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.about.AboutActivity: java.util.List createElementList()&gt;,java.util.List createElementList(), &lt;eu.vranckaert.worktime.activities.about.AboutListElement: void &lt;init&gt;(int,java.lang.String,android.content.Intent)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.about.AboutActivity"/>  
      <sender action="android.intent.action.VIEW" data="http://code.google.com/p/worktime/"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.about.AboutActivity: java.util.List createElementList()&gt;"/>  
        <node method="AboutActivity createElementList" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="AboutActivity createElementList" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="AboutActivity createElementList" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r5)"/>  
        <node method="AboutListElement &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="AboutActivity createElementList" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="AboutActivity createElementList" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;,boolean setPunchButton(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,void updateWidget2x1ProjectTask(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,void updateWidget2x1ProjectTask(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void enableWidgetOnClick(int)&gt;,void enableWidgetOnClick(int)"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.HomeActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void enableWidgetOnClick(int)&gt;"/>  
        <node method="WidgetServiceImpl enableWidgetOnClick" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl enableWidgetOnClick" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Leu/vranckaert/worktime/activities/HomeActivity;&quot;)"/>  
        <node method="WidgetServiceImpl enableWidgetOnClick" type="PassOutIntent" unit="virtualinvoke $r5.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;,void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;,boolean setPunchButton(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;,boolean setPunchButton(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;,void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,void updateWidget2x1ProjectTask(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,void updateWidget2x1ProjectTask(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;,boolean setPunchButton(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,void updateWidget2x1ProjectTask(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,void updateWidget2x1ProjectTask(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;,boolean setPunchButton(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,void updateWidget2x1ProjectTask(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;,boolean setPunchButton(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.projects.SelectProjectActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.projects.SelectProjectActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,void updateWidget2x1ProjectTask(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;,boolean setPunchButton(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;,boolean setPunchButton(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,void updateWidgetsForTask(eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,void updateWidgetsForTask(eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;,void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,void updateWidgetsForTask(eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,void updateWidget2x1ProjectTask(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,void updateWidgetsForTask(eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;,boolean setPunchButton(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,void updateWidgetsForTask(eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,void updateWidgetsForTask(eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,void updateWidgetsForTask(eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,void updateWidgetsForTask(eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,void updateWidgetsForTask(eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,void updateWidgetsForTask(eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,void updateWidgetsForTask(eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,void updateWidgetsForTask(eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,void updateWidgetsForTask(eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,void updateWidgetsForTask(eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,void updateWidgetsForTask(eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,void updateWidgetsForTask(eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,void updateWidgetsForTask(eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;,boolean setPunchButton(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,void updateWidgetsForTask(eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,void updateWidgetsForTask(eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,void updateWidgetsForTask(eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;,boolean setPunchButton(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,void updateWidgetsForTask(eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,void updateWidget2x1ProjectTask(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,void updateWidget2x1ProjectTask(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void enableWidgetOnClick(int)&gt;,void enableWidgetOnClick(int)"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.HomeActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void enableWidgetOnClick(int)&gt;"/>  
        <node method="WidgetServiceImpl enableWidgetOnClick" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl enableWidgetOnClick" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Leu/vranckaert/worktime/activities/HomeActivity;&quot;)"/>  
        <node method="WidgetServiceImpl enableWidgetOnClick" type="PassOutIntent" unit="virtualinvoke $r5.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;,boolean setPunchButton(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;,boolean setPunchButton(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,void updateWidgetsForTask(eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,void updateWidgetsForTask(eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;,void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,void updateWidgetsForTask(eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,void updateWidgetsForTask(eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,void updateWidget2x1ProjectTask(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,void updateWidgetsForTask(eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,void updateWidgetsForTask(eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;,boolean setPunchButton(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,void updateWidget2x1ProjectTask(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,void updateWidget2x1ProjectTask(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,void updateWidget2x1ProjectTask(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;,boolean setPunchButton(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,void updateWidgetsForTask(eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,void updateWidgetsForTask(eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.projects.SelectProjectActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.projects.SelectProjectActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,void updateWidgetsForTask(eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,void updateWidget2x1ProjectTask(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;,void updateWidgetsForProject(eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForProject(eu.vranckaert.worktime.model.Project)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,void updateWidgetsForTask(eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;,boolean setPunchButton(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;,void updateWidgetsForTask(eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgetsForTask(eu.vranckaert.worktime.model.Task)&gt;"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.jakewharton.notificationcompat2.NotificationCompat2"> 
    <intentSummary> 
      <method value="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$BigPictureStyle: android.app.Notification build()&gt;"/>  
      <methodtrace value="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$BigPictureStyle: android.app.Notification build()&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigPictureStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigPictureStyle)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)"/>  
      <source name="com.jakewharton.notificationcompat2.NotificationCompat2"/>  
      <nodes> 
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$BigPictureStyle: android.app.Notification build()&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigPictureStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigPictureStyle)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;($r8, $z0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$BigPictureStyle: android.app.Notification build()&gt;"/>  
      <methodtrace value="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$BigPictureStyle: android.app.Notification build()&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigPictureStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigPictureStyle)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)"/>  
      <source name="com.jakewharton.notificationcompat2.NotificationCompat2"/>  
      <nodes> 
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$BigPictureStyle: android.app.Notification build()&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigPictureStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigPictureStyle)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setDeleteIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;($r8, $z0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$BigPictureStyle: android.app.Notification build()&gt;"/>  
      <methodtrace value="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$BigPictureStyle: android.app.Notification build()&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigPictureStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigPictureStyle)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)"/>  
      <source name="com.jakewharton.notificationcompat2.NotificationCompat2"/>  
      <nodes> 
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$BigPictureStyle: android.app.Notification build()&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigPictureStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigPictureStyle)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setDeleteIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;($r8, $z0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="roboguice.activity.RoboActivity"> 
    <intentSummary> 
      <method value="&lt;roboguice.activity.RoboActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.activity.RoboActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;,void &lt;init&gt;(int,int,android.content.Intent)"/>  
      <source name="roboguice.activity.RoboActivity"/>  
      <nodes> 
        <node method="&lt;roboguice.activity.RoboActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.activity.RoboActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.activity.RoboActivity: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent), &lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
      <source name="roboguice.activity.RoboActivity"/>  
      <nodes> 
        <node method="&lt;roboguice.activity.RoboActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="RoboActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="RoboActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.activity.RoboActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.activity.RoboActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;,void &lt;init&gt;(int,int,android.content.Intent)"/>  
      <source name="roboguice.activity.RoboActivity"/>  
      <nodes> 
        <node method="&lt;roboguice.activity.RoboActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedWizardActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedWizardActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedWizardActivity: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent), &lt;roboguice.activity.RoboActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <source name="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedWizardActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedWizardActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="SyncLockedWizardActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="RoboActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="SyncLockedWizardActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedWizardActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedWizardActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;roboguice.activity.RoboActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;,void &lt;init&gt;(int,int,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedWizardActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedWizardActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;roboguice.activity.RoboActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedWizardActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedWizardActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;roboguice.activity.RoboActivity: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent), &lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
      <source name="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedWizardActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedWizardActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;roboguice.activity.RoboActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="RoboActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="RoboActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedWizardActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedWizardActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;roboguice.activity.RoboActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;,void &lt;init&gt;(int,int,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedWizardActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedWizardActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;roboguice.activity.RoboActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.notifcationbar.StatusBarOthersActionHandleActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.notifcationbar.StatusBarOthersActionHandleActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.notifcationbar.StatusBarOthersActionHandleActivity: void onCreate(android.os.Bundle)&gt;,&lt;eu.vranckaert.worktime.activities.notifcationbar.StatusBarOthersActionHandleActivity: void launchTimeRegistrationActionsDialog()&gt;,void launchTimeRegistrationActionsDialog()"/>  
      <source name="eu.vranckaert.worktime.activities.notifcationbar.StatusBarOthersActionHandleActivity"/>  
      <destinition name="eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver"/>  
      <sender action="eu.vranckaert.worktime.time_registration_action_dialog"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.notifcationbar.StatusBarOthersActionHandleActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.notifcationbar.StatusBarOthersActionHandleActivity: void launchTimeRegistrationActionsDialog()&gt;"/>  
        <node method="StatusBarOthersActionHandleActivity launchTimeRegistrationActionsDialog" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="StatusBarOthersActionHandleActivity launchTimeRegistrationActionsDialog" type="SetAttribute" unit="virtualinvoke r1.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;eu.vranckaert.worktime.time_registration_action_dialog&quot;)"/>  
        <node method="StatusBarOthersActionHandleActivity launchTimeRegistrationActionsDialog" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.notifcationbar.StatusBarOthersActionHandleActivity: void sendBroadcast(android.content.Intent)&gt;(r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="roboguice.activity.RoboListActivity"> 
    <intentSummary> 
      <method value="&lt;roboguice.activity.RoboListActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.activity.RoboListActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;,void &lt;init&gt;(int,int,android.content.Intent)"/>  
      <source name="roboguice.activity.RoboListActivity"/>  
      <nodes> 
        <node method="&lt;roboguice.activity.RoboListActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.activity.RoboListActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.activity.RoboListActivity: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent), &lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
      <source name="roboguice.activity.RoboListActivity"/>  
      <nodes> 
        <node method="&lt;roboguice.activity.RoboListActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="RoboListActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="RoboListActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.activity.RoboListActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.activity.RoboListActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;,void &lt;init&gt;(int,int,android.content.Intent)"/>  
      <source name="roboguice.activity.RoboListActivity"/>  
      <nodes> 
        <node method="&lt;roboguice.activity.RoboListActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.projects.ManageProjectsActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: void access$200(eu.vranckaert.worktime.activities.projects.ManageProjectsActivity,eu.vranckaert.worktime.model.Project)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: void access$200(eu.vranckaert.worktime.activities.projects.ManageProjectsActivity,eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: void openProjectDetailActivity(eu.vranckaert.worktime.model.Project)&gt;,void openProjectDetailActivity(eu.vranckaert.worktime.model.Project)"/>  
      <source name="eu.vranckaert.worktime.activities.projects.ManageProjectsActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: void access$200(eu.vranckaert.worktime.activities.projects.ManageProjectsActivity,eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: void openProjectDetailActivity(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="ManageProjectsActivity openProjectDetailActivity" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="ManageProjectsActivity openProjectDetailActivity" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/projects/ProjectDetailsActivity;&quot;)"/>  
        <node method="ManageProjectsActivity openProjectDetailActivity" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: void startActivityForResult(android.content.Intent,int)&gt;(r2, 10)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;,void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;, &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;,android.app.PendingIntent getSyncOperation(android.content.Context,int)"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;,void removeAllSyncAlarms(android.content.Context), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date)&gt;,void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;, &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date)&gt;"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="ReceiveIntentFromRetValue" unit="$r9 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="PassOutIntent" unit="virtualinvoke $r8.&lt;android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)&gt;(0, $l1, 86400000L, $r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date)&gt;,void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;, &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;,void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService), &lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="ReceiveIntentFromRetValue" unit="$r9 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="ReceiveIntentFromRetValue" unit="$r9 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="PassOutIntent" unit="virtualinvoke $r8.&lt;android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)&gt;(0, $l1, 86400000L, $r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;,void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;,void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;, &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="ReceiveIntentFromRetValue" unit="$r7 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="PassOutIntent" unit="virtualinvoke $r6.&lt;android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)&gt;(0, l1, $l0, $r7)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;,void removeAllSyncAlarms(android.content.Context), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;,void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService), &lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;,void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService), &lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="ReceiveIntentFromRetValue" unit="$r7 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="ReceiveIntentFromRetValue" unit="$r7 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="PassOutIntent" unit="virtualinvoke $r6.&lt;android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)&gt;(0, l1, $l0, $r7)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.account.AccountLoginActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;,void onPostExecute(java.lang.Void), &lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountLoginActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;,void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;, &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountLoginActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;,&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;,void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountLoginActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="ReceiveIntentFromRetValue" unit="$r9 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="ReceiveIntentFromRetValue" unit="$r9 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="PassOutIntent" unit="virtualinvoke $r8.&lt;android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)&gt;(0, $l1, 86400000L, $r9)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date)&gt;,void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;, &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountLoginActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date)&gt;"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="ReceiveIntentFromRetValue" unit="$r9 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="PassOutIntent" unit="virtualinvoke $r8.&lt;android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)&gt;(0, $l1, 86400000L, $r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date)&gt;,void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;, &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountLoginActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;,void onPostExecute(java.lang.Void), &lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountLoginActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="ReceiveIntentFromRetValue" unit="$r7 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="ReceiveIntentFromRetValue" unit="$r7 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="PassOutIntent" unit="virtualinvoke $r6.&lt;android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)&gt;(0, l1, $l0, $r7)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;,void removeAllSyncAlarms(android.content.Context), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountLoginActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;,void onPostExecute(java.lang.Void), &lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountLoginActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="ReceiveIntentFromRetValue" unit="$r9 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="ReceiveIntentFromRetValue" unit="$r9 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="PassOutIntent" unit="virtualinvoke $r8.&lt;android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)&gt;(0, $l1, 86400000L, $r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;,android.app.PendingIntent getSyncOperation(android.content.Context,int)"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountLoginActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;,void onPostExecute(java.lang.Void), &lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountLoginActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;,void removeAllSyncAlarms(android.content.Context), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountLoginActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;,&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;,void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountLoginActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="ReceiveIntentFromRetValue" unit="$r7 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="ReceiveIntentFromRetValue" unit="$r7 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="PassOutIntent" unit="virtualinvoke $r6.&lt;android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)&gt;(0, l1, $l0, $r7)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;,&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;,void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountLoginActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;,void onPostExecute(java.lang.Void), &lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountLoginActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountProfileActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="AccountLoginActivity$LoginTask onPostExecute" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="AccountLoginActivity$LoginTask onPostExecute" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Leu/vranckaert/worktime/activities/account/AccountProfileActivity;&quot;)"/>  
        <node method="AccountLoginActivity$LoginTask onPostExecute" type="PassOutIntent" unit="virtualinvoke $r3.&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity: void startActivityForResult(android.content.Intent,int)&gt;(r2, 14)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;,void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountLoginActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;,void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;, &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountLoginActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="ReceiveIntentFromRetValue" unit="$r7 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="PassOutIntent" unit="virtualinvoke $r6.&lt;android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)&gt;(0, l1, $l0, $r7)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;,void onPostExecute(java.lang.Void), &lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountLoginActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;,&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: void openEditProjectActivity(eu.vranckaert.worktime.model.Project)&gt;,void openEditProjectActivity(eu.vranckaert.worktime.model.Project)"/>  
      <source name="eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.projects.AddEditProjectActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: void openEditProjectActivity(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="ProjectDetailsActivity openEditProjectActivity" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="ProjectDetailsActivity openEditProjectActivity" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Leu/vranckaert/worktime/activities/projects/AddEditProjectActivity;&quot;)"/>  
        <node method="ProjectDetailsActivity openEditProjectActivity" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: void startActivityForResult(android.content.Intent,int)&gt;(r2, 8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;,&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: void openAddTaskActivity()&gt;,void openAddTaskActivity()"/>  
      <source name="eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.tasks.AddEditTaskActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: void openAddTaskActivity()&gt;"/>  
        <node method="ProjectDetailsActivity openAddTaskActivity" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="ProjectDetailsActivity openAddTaskActivity" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/tasks/AddEditTaskActivity;&quot;)"/>  
        <node method="ProjectDetailsActivity openAddTaskActivity" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: void startActivityForResult(android.content.Intent,int)&gt;(r1, 7)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;,&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: void openReportingCriteriaActivity(eu.vranckaert.worktime.model.Project)&gt;,void openReportingCriteriaActivity(eu.vranckaert.worktime.model.Project)"/>  
      <source name="eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.reporting.ReportingCriteriaActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: void openReportingCriteriaActivity(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="ProjectDetailsActivity openReportingCriteriaActivity" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="ProjectDetailsActivity openReportingCriteriaActivity" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Leu/vranckaert/worktime/activities/reporting/ReportingCriteriaActivity;&quot;)"/>  
        <node method="ProjectDetailsActivity openReportingCriteriaActivity" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.alarm.AlarmUtil"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void addAlarmSyncInFiveMinutes(android.content.Context)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void addAlarmSyncInFiveMinutes(android.content.Context)&gt;,void addAlarmSyncInFiveMinutes(android.content.Context), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.utils.alarm.AlarmUtil"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void addAlarmSyncInFiveMinutes(android.content.Context)&gt;"/>  
        <node method="AlarmUtil addAlarmSyncInFiveMinutes" type="ReceiveIntentFromRetValue" unit="$r4 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/>  
        <node method="AlarmUtil addAlarmSyncInFiveMinutes" type="PassOutIntent" unit="virtualinvoke $r2.&lt;android.app.AlarmManager: void set(int,long,android.app.PendingIntent)&gt;(0, $l0, $r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.account.AccountSyncService"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void handleResult(java.lang.Exception)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void handleResult(java.lang.Exception)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;,android.app.PendingIntent getSyncOperation(android.content.Context,int)"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void handleResult(java.lang.Exception)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void handleResult(java.lang.Exception)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void handleResult(java.lang.Exception)&gt;,void handleResult(java.lang.Exception), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void addAlarmSyncInFiveMinutes(android.content.Context)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void handleResult(java.lang.Exception)&gt;"/>  
        <node method="AlarmUtil addAlarmSyncInFiveMinutes" type="ReceiveIntentFromRetValue" unit="$r4 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil addAlarmSyncInFiveMinutes" type="PassOutIntent" unit="virtualinvoke $r2.&lt;android.app.AlarmManager: void set(int,long,android.app.PendingIntent)&gt;(0, $l0, $r4)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void handleResult(java.lang.Exception)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void handleResult(java.lang.Exception)&gt;,void handleResult(java.lang.Exception), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void addAlarmSyncInFiveMinutes(android.content.Context)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountLoginActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void handleResult(java.lang.Exception)&gt;"/>  
        <node method="AccountSyncService handleResult" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="AccountSyncService handleResult" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountLoginActivity;&quot;)"/>  
        <node method="AccountSyncService handleResult" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void handleResult(java.lang.Exception)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void handleResult(java.lang.Exception)&gt;,void handleResult(java.lang.Exception), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void addAlarmSyncInFiveMinutes(android.content.Context)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void handleResult(java.lang.Exception)&gt;"/>  
        <node method="AlarmUtil addAlarmSyncInFiveMinutes" type="ReceiveIntentFromRetValue" unit="$r4 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil addAlarmSyncInFiveMinutes" type="PassOutIntent" unit="virtualinvoke $r2.&lt;android.app.AlarmManager: void set(int,long,android.app.PendingIntent)&gt;(0, $l0, $r4)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void handleResult(java.lang.Exception)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void handleResult(java.lang.Exception)&gt;,void handleResult(java.lang.Exception)"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountLoginActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void handleResult(java.lang.Exception)&gt;"/>  
        <node method="AccountSyncService handleResult" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="AccountSyncService handleResult" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountLoginActivity;&quot;)"/>  
        <node method="AccountSyncService handleResult" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.account.AccountSyncService"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void startSync()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void startSync()&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void handleResult(java.lang.Exception)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;,android.app.PendingIntent getSyncOperation(android.content.Context,int)"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void startSync()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void handleResult(java.lang.Exception)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void startSync()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void startSync()&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void handleResult(java.lang.Exception)&gt;,void handleResult(java.lang.Exception), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void addAlarmSyncInFiveMinutes(android.content.Context)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void startSync()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void handleResult(java.lang.Exception)&gt;"/>  
        <node method="AlarmUtil addAlarmSyncInFiveMinutes" type="ReceiveIntentFromRetValue" unit="$r4 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil addAlarmSyncInFiveMinutes" type="PassOutIntent" unit="virtualinvoke $r2.&lt;android.app.AlarmManager: void set(int,long,android.app.PendingIntent)&gt;(0, $l0, $r4)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void startSync()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void startSync()&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void handleResult(java.lang.Exception)&gt;,void handleResult(java.lang.Exception), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void addAlarmSyncInFiveMinutes(android.content.Context)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountLoginActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void startSync()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void handleResult(java.lang.Exception)&gt;"/>  
        <node method="AccountSyncService handleResult" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="AccountSyncService handleResult" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountLoginActivity;&quot;)"/>  
        <node method="AccountSyncService handleResult" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void startSync()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void startSync()&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void handleResult(java.lang.Exception)&gt;,void handleResult(java.lang.Exception), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void addAlarmSyncInFiveMinutes(android.content.Context)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void startSync()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void handleResult(java.lang.Exception)&gt;"/>  
        <node method="AlarmUtil addAlarmSyncInFiveMinutes" type="ReceiveIntentFromRetValue" unit="$r4 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil addAlarmSyncInFiveMinutes" type="PassOutIntent" unit="virtualinvoke $r2.&lt;android.app.AlarmManager: void set(int,long,android.app.PendingIntent)&gt;(0, $l0, $r4)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void startSync()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void startSync()&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void handleResult(java.lang.Exception)&gt;,void handleResult(java.lang.Exception)"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountLoginActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void startSync()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void handleResult(java.lang.Exception)&gt;"/>  
        <node method="AccountSyncService handleResult" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="AccountSyncService handleResult" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountLoginActivity;&quot;)"/>  
        <node method="AccountSyncService handleResult" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForBackup(java.lang.String,boolean,java.lang.String,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForBackup(java.lang.String,boolean,java.lang.String,java.lang.String)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder addAction(int,java.lang.CharSequence,android.app.PendingIntent)&gt;,com.jakewharton.notificationcompat2.NotificationCompat2$Builder addAction(int,java.lang.CharSequence,android.app.PendingIntent)"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForBackup(java.lang.String,boolean,java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder addAction(int,java.lang.CharSequence,android.app.PendingIntent)&gt;"/>  
        <node method="NotificationCompat2$Builder addAction" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForBackup(java.lang.String,boolean,java.lang.String,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForBackup(java.lang.String,boolean,java.lang.String,java.lang.String)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;,void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[]), &lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder setContentIntent(android.app.PendingIntent)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForBackup(java.lang.String,boolean,java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromParatMethod" unit="$r4 := @parameter3: android.content.Intent"/>  
        <node method="NotificationCompat2$Builder setContentIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForBackup(java.lang.String,boolean,java.lang.String,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForBackup(java.lang.String,boolean,java.lang.String,java.lang.String)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;,void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[]), &lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder setContentIntent(android.app.PendingIntent)&gt;, &lt;eu.vranckaert.worktime.model.notification.NotificationAction: android.content.Intent getIntent()&gt;, &lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder addAction(int,java.lang.CharSequence,android.app.PendingIntent)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForBackup(java.lang.String,boolean,java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromParatMethod" unit="$r4 := @parameter3: android.content.Intent"/>  
        <node method="NotificationCompat2$Builder setContentIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForBackup(java.lang.String,boolean,java.lang.String,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForBackup(java.lang.String,boolean,java.lang.String,java.lang.String)&gt;,void addStatusBarNotificationForBackup(java.lang.String,boolean,java.lang.String,java.lang.String), &lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForBackup(java.lang.String,boolean,java.lang.String,java.lang.String)&gt;"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForBackup" type="CreateMethod" unit="$r14 = new android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromParatMethod" unit="$r4 := @parameter3: android.content.Intent"/>  
        <node method="NotificationCompat2$Builder setContentIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForBackup" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForBackup" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForBackup" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForBackup" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForBackup" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForBackup" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForBackup" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForBackup" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForBackup" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForBackup(java.lang.String,boolean,java.lang.String,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForBackup(java.lang.String,boolean,java.lang.String,java.lang.String)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;,void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[]), &lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder setContentIntent(android.app.PendingIntent)&gt;, &lt;eu.vranckaert.worktime.model.notification.NotificationAction: android.content.Intent getIntent()&gt;, &lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder addAction(int,java.lang.CharSequence,android.app.PendingIntent)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForBackup(java.lang.String,boolean,java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromRetValue" unit="$r4 = virtualinvoke r9.&lt;eu.vranckaert.worktime.model.notification.NotificationAction: android.content.Intent getIntent()&gt;()"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="NotificationCompat2$Builder addAction" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForBackup(java.lang.String,boolean,java.lang.String,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForBackup(java.lang.String,boolean,java.lang.String,java.lang.String)&gt;,&lt;eu.vranckaert.worktime.model.notification.NotificationAction: android.content.Intent getIntent()&gt;,android.content.Intent getIntent()"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForBackup(java.lang.String,boolean,java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.model.notification.NotificationAction: android.content.Intent getIntent()&gt;"/>  
        <node method="NotificationAction getIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction getIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="NotificationAction getIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="NotificationAction getIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction getIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="NotificationAction getIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction getIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="NotificationAction getIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="NotificationAction getIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction getIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForBackup(java.lang.String,boolean,java.lang.String,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForBackup(java.lang.String,boolean,java.lang.String,java.lang.String)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder setContentIntent(android.app.PendingIntent)&gt;,com.jakewharton.notificationcompat2.NotificationCompat2$Builder setContentIntent(android.app.PendingIntent)"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForBackup(java.lang.String,boolean,java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder setContentIntent(android.app.PendingIntent)&gt;"/>  
        <node method="NotificationCompat2$Builder setContentIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompat2$Builder setContentIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForBackup(java.lang.String,boolean,java.lang.String,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForBackup(java.lang.String,boolean,java.lang.String,java.lang.String)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle: android.app.Notification build()&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigTextStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForBackup(java.lang.String,boolean,java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle: android.app.Notification build()&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigTextStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;($r8, $z0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForBackup(java.lang.String,boolean,java.lang.String,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForBackup(java.lang.String,boolean,java.lang.String,java.lang.String)&gt;,void addStatusBarNotificationForBackup(java.lang.String,boolean,java.lang.String,java.lang.String), &lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForBackup(java.lang.String,boolean,java.lang.String,java.lang.String)&gt;"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForBackup" type="CreateMethod" unit="$r14 = new android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromParatMethod" unit="$r4 := @parameter3: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromRetValue" unit="$r4 = virtualinvoke r9.&lt;eu.vranckaert.worktime.model.notification.NotificationAction: android.content.Intent getIntent()&gt;()"/>  
        <node method="NotificationCompat2$Builder setContentIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForBackup" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForBackup" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForBackup" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForBackup" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForBackup" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForBackup" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="NotificationCompat2$Builder addAction" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.app.PendingIntent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForBackup" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForBackup" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForBackup" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForBackup(java.lang.String,boolean,java.lang.String,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForBackup(java.lang.String,boolean,java.lang.String,java.lang.String)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle: android.app.Notification build()&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigTextStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForBackup(java.lang.String,boolean,java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle: android.app.Notification build()&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigTextStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setDeleteIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;($r8, $z0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForBackup(java.lang.String,boolean,java.lang.String,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForBackup(java.lang.String,boolean,java.lang.String,java.lang.String)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder setContentIntent(android.app.PendingIntent)&gt;,com.jakewharton.notificationcompat2.NotificationCompat2$Builder setContentIntent(android.app.PendingIntent)"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForBackup(java.lang.String,boolean,java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder setContentIntent(android.app.PendingIntent)&gt;"/>  
        <node method="NotificationCompat2$Builder setContentIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompat2$Builder setContentIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForBackup(java.lang.String,boolean,java.lang.String,java.lang.String)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForBackup(java.lang.String,boolean,java.lang.String,java.lang.String)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle: android.app.Notification build()&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigTextStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForBackup(java.lang.String,boolean,java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle: android.app.Notification build()&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigTextStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setDeleteIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;($r8, $z0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="roboguice.activity.RoboPreferenceActivity"> 
    <intentSummary> 
      <method value="&lt;roboguice.activity.RoboPreferenceActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.activity.RoboPreferenceActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;,void &lt;init&gt;(int,int,android.content.Intent)"/>  
      <source name="roboguice.activity.RoboPreferenceActivity"/>  
      <nodes> 
        <node method="&lt;roboguice.activity.RoboPreferenceActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.activity.RoboPreferenceActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.activity.RoboPreferenceActivity: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent), &lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
      <source name="roboguice.activity.RoboPreferenceActivity"/>  
      <nodes> 
        <node method="&lt;roboguice.activity.RoboPreferenceActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="RoboPreferenceActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="RoboPreferenceActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.activity.RoboPreferenceActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.activity.RoboPreferenceActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;,void &lt;init&gt;(int,int,android.content.Intent)"/>  
      <source name="roboguice.activity.RoboPreferenceActivity"/>  
      <nodes> 
        <node method="&lt;roboguice.activity.RoboPreferenceActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchOutActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchOutActivity$1: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchOutActivity$1: void onPostExecute(java.lang.Object)&gt;,void onPostExecute(java.lang.Object)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchOutActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchOutActivity$1: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="TimeRegistrationPunchOutActivity$1 onPostExecute" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="TimeRegistrationPunchOutActivity$1 onPostExecute" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationPunchInActivity;&quot;)"/>  
        <node method="TimeRegistrationPunchOutActivity$1 onPostExecute" type="PassOutIntent" unit="virtualinvoke $r3.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchOutActivity: void startActivityForResult(android.content.Intent,int)&gt;(r2, 4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.reporting.ReportingCriteriaActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.reporting.ReportingCriteriaActivity: void generateReport()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.reporting.ReportingCriteriaActivity: void generateReport()&gt;,void generateReport()"/>  
      <source name="eu.vranckaert.worktime.activities.reporting.ReportingCriteriaActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.reporting.ReportingResultActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.reporting.ReportingCriteriaActivity: void generateReport()&gt;"/>  
        <node method="ReportingCriteriaActivity generateReport" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="ReportingCriteriaActivity generateReport" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/reporting/ReportingResultActivity;&quot;)"/>  
        <node method="ReportingCriteriaActivity generateReport" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.reporting.ReportingCriteriaActivity: void startActivity(android.content.Intent)&gt;(r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity: void showTaskChooser()&gt;,void showTaskChooser()"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.tasks.SelectTaskActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity: void showTaskChooser()&gt;"/>  
        <node method="TimeRegistrationPunchInActivity showTaskChooser" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="TimeRegistrationPunchInActivity showTaskChooser" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/tasks/SelectTaskActivity;&quot;)"/>  
        <node method="TimeRegistrationPunchInActivity showTaskChooser" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity: void startActivityForResult(android.content.Intent,int)&gt;(r1, 13)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="roboguice.receiver.RoboBroadcastReceiver"> 
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;,void onReceive(android.content.Context,android.content.Intent)"/>  
      <source name="roboguice.receiver.RoboBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;roboguice.receiver.RoboBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="RoboBroadcastReceiver onReceive" type="ReceiveIntentFromRetValue" unit="$r2 = virtualinvoke r0.&lt;eu.vranckaert.worktime.broadcastreceiver.ActionDialogBroadCastReceiver: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.notifcationbar.StatusBarPunchOutHandleActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.notifcationbar.StatusBarPunchOutHandleActivity: void launchStopTimeRegistrationActivity()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.notifcationbar.StatusBarPunchOutHandleActivity: void launchStopTimeRegistrationActivity()&gt;,void launchStopTimeRegistrationActivity()"/>  
      <source name="eu.vranckaert.worktime.activities.notifcationbar.StatusBarPunchOutHandleActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.notifcationbar.StatusBarPunchOutHandleActivity: void launchStopTimeRegistrationActivity()&gt;"/>  
        <node method="StatusBarPunchOutHandleActivity launchStopTimeRegistrationActivity" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="StatusBarPunchOutHandleActivity launchStopTimeRegistrationActivity" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r4, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationActionActivity;&quot;)"/>  
        <node method="StatusBarPunchOutHandleActivity launchStopTimeRegistrationActivity" type="SetAttribute" unit="virtualinvoke r1.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(1417674752)"/>  
        <node method="StatusBarPunchOutHandleActivity launchStopTimeRegistrationActivity" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.notifcationbar.StatusBarPunchOutHandleActivity: void startActivityForResult(android.content.Intent,int)&gt;(r1, 2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.notifcationbar.StatusBarPunchOutHandleActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.notifcationbar.StatusBarPunchOutHandleActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.notifcationbar.StatusBarPunchOutHandleActivity: void onCreate(android.os.Bundle)&gt;,&lt;eu.vranckaert.worktime.activities.notifcationbar.StatusBarPunchOutHandleActivity: void launchStopTimeRegistrationActivity()&gt;,void launchStopTimeRegistrationActivity()"/>  
      <source name="eu.vranckaert.worktime.activities.notifcationbar.StatusBarPunchOutHandleActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.notifcationbar.StatusBarPunchOutHandleActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.notifcationbar.StatusBarPunchOutHandleActivity: void launchStopTimeRegistrationActivity()&gt;"/>  
        <node method="StatusBarPunchOutHandleActivity launchStopTimeRegistrationActivity" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="StatusBarPunchOutHandleActivity launchStopTimeRegistrationActivity" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r4, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationActionActivity;&quot;)"/>  
        <node method="StatusBarPunchOutHandleActivity launchStopTimeRegistrationActivity" type="SetAttribute" unit="virtualinvoke r1.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(1417674752)"/>  
        <node method="StatusBarPunchOutHandleActivity launchStopTimeRegistrationActivity" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.notifcationbar.StatusBarPunchOutHandleActivity: void startActivityForResult(android.content.Intent,int)&gt;(r1, 2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.widget.Configuration2x1Activity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.widget.Configuration2x1Activity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.widget.Configuration2x1Activity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="eu.vranckaert.worktime.activities.widget.Configuration2x1Activity"/>  
      <destinition name="eu.vranckaert.worktime.activities.projects.SelectProjectActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.widget.Configuration2x1Activity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="Configuration2x1Activity onCreate" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="Configuration2x1Activity onCreate" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/projects/SelectProjectActivity;&quot;)"/>  
        <node method="Configuration2x1Activity onCreate" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.widget.Configuration2x1Activity: void startActivityForResult(android.content.Intent,int)&gt;(r2, 11)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="roboguice.inject.ContentViewListener"> 
    <intentSummary> 
      <method value="&lt;roboguice.inject.ContentViewListener: void optionallySetContentView(roboguice.activity.event.OnCreateEvent)&gt;"/>  
      <methodtrace value="&lt;roboguice.inject.ContentViewListener: void optionallySetContentView(roboguice.activity.event.OnCreateEvent)&gt;,void optionallySetContentView(roboguice.activity.event.OnCreateEvent)"/>  
      <source name="roboguice.inject.ContentViewListener"/>  
      <nodes> 
        <node method="&lt;roboguice.inject.ContentViewListener: void optionallySetContentView(roboguice.activity.event.OnCreateEvent)&gt;"/>  
        <node method="ContentViewListener optionallySetContentView" type="setContentView" unit="virtualinvoke $r2.&lt;android.app.Activity: void setContentView(int)&gt;($i0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.account.AccountRegisterActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;,void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;, &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountRegisterActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;,void onPostExecute(java.lang.Void), &lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountRegisterActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;,&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;,void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountRegisterActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="ReceiveIntentFromRetValue" unit="$r9 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="ReceiveIntentFromRetValue" unit="$r9 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="PassOutIntent" unit="virtualinvoke $r8.&lt;android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)&gt;(0, $l1, 86400000L, $r9)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date)&gt;,void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;, &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountRegisterActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date)&gt;"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="ReceiveIntentFromRetValue" unit="$r9 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="PassOutIntent" unit="virtualinvoke $r8.&lt;android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)&gt;(0, $l1, 86400000L, $r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date)&gt;,void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;, &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountRegisterActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;,void onPostExecute(java.lang.Void), &lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountRegisterActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="ReceiveIntentFromRetValue" unit="$r7 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="ReceiveIntentFromRetValue" unit="$r7 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="PassOutIntent" unit="virtualinvoke $r6.&lt;android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)&gt;(0, l1, $l0, $r7)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;,void onPostExecute(java.lang.Void), &lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountRegisterActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;,void onPostExecute(java.lang.Void), &lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountRegisterActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;,void removeAllSyncAlarms(android.content.Context), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountRegisterActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;,android.app.PendingIntent getSyncOperation(android.content.Context,int)"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountRegisterActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;,void removeAllSyncAlarms(android.content.Context), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountRegisterActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;,&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;,void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountRegisterActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="ReceiveIntentFromRetValue" unit="$r7 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="ReceiveIntentFromRetValue" unit="$r7 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="PassOutIntent" unit="virtualinvoke $r6.&lt;android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)&gt;(0, l1, $l0, $r7)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;,&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;,void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountRegisterActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;,void onPostExecute(java.lang.Void), &lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountRegisterActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="ReceiveIntentFromRetValue" unit="$r9 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="ReceiveIntentFromRetValue" unit="$r9 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="PassOutIntent" unit="virtualinvoke $r8.&lt;android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)&gt;(0, $l1, 86400000L, $r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;,void onPostExecute(java.lang.Void), &lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountRegisterActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountProfileActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="AccountRegisterActivity$RegisterTask onPostExecute" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="AccountRegisterActivity$RegisterTask onPostExecute" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Leu/vranckaert/worktime/activities/account/AccountProfileActivity;&quot;)"/>  
        <node method="AccountRegisterActivity$RegisterTask onPostExecute" type="PassOutIntent" unit="virtualinvoke $r3.&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity: void startActivityForResult(android.content.Intent,int)&gt;(r2, 14)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;,void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountRegisterActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;,void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;, &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountRegisterActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="ReceiveIntentFromRetValue" unit="$r7 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="PassOutIntent" unit="virtualinvoke $r6.&lt;android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)&gt;(0, l1, $l0, $r7)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.model.notification.NotificationAction"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.model.notification.NotificationAction: void &lt;init&gt;(int,java.lang.String,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.model.notification.NotificationAction: void &lt;init&gt;(int,java.lang.String,android.content.Intent)&gt;,void &lt;init&gt;(int,java.lang.String,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.model.notification.NotificationAction"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.model.notification.NotificationAction: void &lt;init&gt;(int,java.lang.String,android.content.Intent)&gt;"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.model.notification.NotificationAction: void &lt;init&gt;(int,java.lang.String,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.model.notification.NotificationAction: void &lt;init&gt;(int,java.lang.String,android.content.Intent)&gt;,void &lt;init&gt;(int,java.lang.String,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.model.notification.NotificationAction"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.model.notification.NotificationAction: void &lt;init&gt;(int,java.lang.String,android.content.Intent)&gt;"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.preferences.DateTimePreferencesActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.DateTimePreferencesActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.DateTimePreferencesActivity: void onCreate(android.os.Bundle)&gt;,&lt;eu.vranckaert.worktime.utils.activity.GenericPreferencesActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.DateTimePreferencesActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.DateTimePreferencesActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.activity.GenericPreferencesActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="GenericPreferencesActivity onCreate" type="setContentView" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.utils.activity.GenericPreferencesActivity: void setContentView(int)&gt;(2130903054)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.preferences.TimeRegistrationsPreferencesActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.TimeRegistrationsPreferencesActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.TimeRegistrationsPreferencesActivity: void onCreate(android.os.Bundle)&gt;,&lt;eu.vranckaert.worktime.utils.activity.GenericPreferencesActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.TimeRegistrationsPreferencesActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.TimeRegistrationsPreferencesActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.activity.GenericPreferencesActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="GenericPreferencesActivity onCreate" type="setContentView" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.utils.activity.GenericPreferencesActivity: void setContentView(int)&gt;(2130903054)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.model.notification.NotificationAction"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.model.notification.NotificationAction: void &lt;init&gt;(java.lang.String,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.model.notification.NotificationAction: void &lt;init&gt;(java.lang.String,android.content.Intent)&gt;,void &lt;init&gt;(java.lang.String,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.model.notification.NotificationAction"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.model.notification.NotificationAction: void &lt;init&gt;(java.lang.String,android.content.Intent)&gt;"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.model.notification.NotificationAction: void &lt;init&gt;(java.lang.String,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.model.notification.NotificationAction: void &lt;init&gt;(java.lang.String,android.content.Intent)&gt;,void &lt;init&gt;(java.lang.String,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.model.notification.NotificationAction"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.model.notification.NotificationAction: void &lt;init&gt;(java.lang.String,android.content.Intent)&gt;"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.model.notification.NotificationAction"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.model.notification.NotificationAction: void &lt;init&gt;(int,java.lang.String,android.content.Intent,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.model.notification.NotificationAction: void &lt;init&gt;(int,java.lang.String,android.content.Intent,int)&gt;,void &lt;init&gt;(int,java.lang.String,android.content.Intent,int)"/>  
      <source name="eu.vranckaert.worktime.model.notification.NotificationAction"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.model.notification.NotificationAction: void &lt;init&gt;(int,java.lang.String,android.content.Intent,int)&gt;"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.model.notification.NotificationAction: void &lt;init&gt;(int,java.lang.String,android.content.Intent,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.model.notification.NotificationAction: void &lt;init&gt;(int,java.lang.String,android.content.Intent,int)&gt;,void &lt;init&gt;(int,java.lang.String,android.content.Intent,int)"/>  
      <source name="eu.vranckaert.worktime.model.notification.NotificationAction"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.model.notification.NotificationAction: void &lt;init&gt;(int,java.lang.String,android.content.Intent,int)&gt;"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.donations.google.ResponseHandler"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.ResponseHandler: void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.ResponseHandler: void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.PurchaseObserver: void startBuyPageActivity(android.app.PendingIntent,android.content.Intent)&gt;,void startBuyPageActivity(android.app.PendingIntent,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.ResponseHandler"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.ResponseHandler: void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.PurchaseObserver: void startBuyPageActivity(android.app.PendingIntent,android.content.Intent)&gt;"/>  
        <node method="PurchaseObserver startBuyPageActivity" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="PurchaseObserver startBuyPageActivity" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent)&gt;($r7, 0, $r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.ResponseHandler: void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.ResponseHandler: void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)&gt;,void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent), &lt;eu.vranckaert.worktime.utils.donations.google.PurchaseObserver: void startBuyPageActivity(android.app.PendingIntent,android.content.Intent)&gt;"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.ResponseHandler"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.ResponseHandler: void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)&gt;"/>  
        <node method="ResponseHandler buyPageIntentResponse" type="ReceiveIntentFromParatMethod" unit="$r0 := @parameter0: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.ResponseHandler: void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.ResponseHandler: void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)&gt;,void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.ResponseHandler"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.ResponseHandler: void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)&gt;"/>  
        <node method="ResponseHandler buyPageIntentResponse" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.ResponseHandler: void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.ResponseHandler: void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.PurchaseObserver: void startBuyPageActivity(android.app.PendingIntent,android.content.Intent)&gt;,void startBuyPageActivity(android.app.PendingIntent,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.ResponseHandler"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.ResponseHandler: void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.PurchaseObserver: void startBuyPageActivity(android.app.PendingIntent,android.content.Intent)&gt;"/>  
        <node method="PurchaseObserver startBuyPageActivity" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.ResponseHandler: void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.ResponseHandler: void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.PurchaseObserver: void startBuyPageActivity(android.app.PendingIntent,android.content.Intent)&gt;,void startBuyPageActivity(android.app.PendingIntent,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.ResponseHandler"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.ResponseHandler: void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.PurchaseObserver: void startBuyPageActivity(android.app.PendingIntent,android.content.Intent)&gt;"/>  
        <node method="PurchaseObserver startBuyPageActivity" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.ResponseHandler: void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.ResponseHandler: void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)&gt;,void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.ResponseHandler"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.ResponseHandler: void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)&gt;"/>  
        <node method="ResponseHandler buyPageIntentResponse" type="ReceiveIntentFromParatMethod" unit="$r0 := @parameter0: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.ResponseHandler: void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.ResponseHandler: void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)&gt;,void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent), &lt;eu.vranckaert.worktime.utils.donations.google.PurchaseObserver: void startBuyPageActivity(android.app.PendingIntent,android.content.Intent)&gt;"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.ResponseHandler"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.ResponseHandler: void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)&gt;"/>  
        <node method="ResponseHandler buyPageIntentResponse" type="ReceiveIntentFromParatMethod" unit="$r0 := @parameter0: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.ResponseHandler: void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.ResponseHandler: void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)&gt;,void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent), &lt;eu.vranckaert.worktime.utils.donations.google.PurchaseObserver: void startBuyPageActivity(android.app.PendingIntent,android.content.Intent)&gt;"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.ResponseHandler"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.ResponseHandler: void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)&gt;"/>  
        <node method="ResponseHandler buyPageIntentResponse" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PurchaseObserver startBuyPageActivity" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="PurchaseObserver startBuyPageActivity" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="PurchaseObserver startBuyPageActivity" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent)&gt;($r7, 0, $r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.ResponseHandler: void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.ResponseHandler: void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)&gt;,void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent), &lt;eu.vranckaert.worktime.utils.donations.google.PurchaseObserver: void startBuyPageActivity(android.app.PendingIntent,android.content.Intent)&gt;"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.ResponseHandler"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.ResponseHandler: void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)&gt;"/>  
        <node method="ResponseHandler buyPageIntentResponse" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PurchaseObserver startBuyPageActivity" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="PurchaseObserver startBuyPageActivity" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.ResponseHandler: void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.ResponseHandler: void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.PurchaseObserver: void startBuyPageActivity(android.app.PendingIntent,android.content.Intent)&gt;,void startBuyPageActivity(android.app.PendingIntent,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.ResponseHandler"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.ResponseHandler: void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.PurchaseObserver: void startBuyPageActivity(android.app.PendingIntent,android.content.Intent)&gt;"/>  
        <node method="PurchaseObserver startBuyPageActivity" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="PurchaseObserver startBuyPageActivity" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent)&gt;($r7, 0, $r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.donations.google.BillingService"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: long run()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: long run()&gt;,long run()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: long run()&gt;"/>  
        <node method="BillingService$RequestPurchase run" type="CreateMethod" unit="r2 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: long run()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: long run()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.ResponseHandler: void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)&gt;,void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: long run()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.ResponseHandler: void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)&gt;"/>  
        <node method="ResponseHandler buyPageIntentResponse" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: long run()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: long run()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.ResponseHandler: void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)&gt;,void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: long run()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.ResponseHandler: void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)&gt;"/>  
        <node method="ResponseHandler buyPageIntentResponse" type="ReceiveIntentFromParatMethod" unit="$r0 := @parameter0: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: long run()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: long run()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.ResponseHandler: void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)&gt;,void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent), &lt;eu.vranckaert.worktime.utils.donations.google.PurchaseObserver: void startBuyPageActivity(android.app.PendingIntent,android.content.Intent)&gt;"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: long run()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.ResponseHandler: void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)&gt;"/>  
        <node method="ResponseHandler buyPageIntentResponse" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PurchaseObserver startBuyPageActivity" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="PurchaseObserver startBuyPageActivity" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: long run()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: long run()&gt;,long run()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: long run()&gt;"/>  
        <node method="BillingService$RequestPurchase run" type="CreateMethod" unit="r2 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: long run()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: long run()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.ResponseHandler: void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.PurchaseObserver: void startBuyPageActivity(android.app.PendingIntent,android.content.Intent)&gt;,void startBuyPageActivity(android.app.PendingIntent,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: long run()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.ResponseHandler: void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.PurchaseObserver: void startBuyPageActivity(android.app.PendingIntent,android.content.Intent)&gt;"/>  
        <node method="PurchaseObserver startBuyPageActivity" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="PurchaseObserver startBuyPageActivity" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent)&gt;($r7, 0, $r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: long run()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: long run()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.ResponseHandler: void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)&gt;,void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent), &lt;eu.vranckaert.worktime.utils.donations.google.PurchaseObserver: void startBuyPageActivity(android.app.PendingIntent,android.content.Intent)&gt;"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: long run()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.ResponseHandler: void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)&gt;"/>  
        <node method="ResponseHandler buyPageIntentResponse" type="ReceiveIntentFromParatMethod" unit="$r0 := @parameter0: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: long run()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: long run()&gt;,long run(), &lt;eu.vranckaert.worktime.utils.donations.google.ResponseHandler: void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)&gt;"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: long run()&gt;"/>  
        <node method="BillingService$RequestPurchase run" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="ResponseHandler buyPageIntentResponse" type="ReceiveIntentFromParatMethod" unit="$r0 := @parameter0: android.app.PendingIntent"/>  
        <node method="ResponseHandler buyPageIntentResponse" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: long run()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: long run()&gt;,long run(), &lt;eu.vranckaert.worktime.utils.donations.google.ResponseHandler: void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)&gt;"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: long run()&gt;"/>  
        <node method="BillingService$RequestPurchase run" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="ResponseHandler buyPageIntentResponse" type="ReceiveIntentFromParatMethod" unit="$r0 := @parameter0: android.app.PendingIntent"/>  
        <node method="ResponseHandler buyPageIntentResponse" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PurchaseObserver startBuyPageActivity" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="PurchaseObserver startBuyPageActivity" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="PurchaseObserver startBuyPageActivity" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent)&gt;($r7, 0, $r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: long run()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: long run()&gt;,long run(), &lt;eu.vranckaert.worktime.utils.donations.google.ResponseHandler: void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)&gt;"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: long run()&gt;"/>  
        <node method="BillingService$RequestPurchase run" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="ResponseHandler buyPageIntentResponse" type="ReceiveIntentFromParatMethod" unit="$r0 := @parameter0: android.app.PendingIntent"/>  
        <node method="ResponseHandler buyPageIntentResponse" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PurchaseObserver startBuyPageActivity" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="PurchaseObserver startBuyPageActivity" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: long run()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: long run()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.ResponseHandler: void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.PurchaseObserver: void startBuyPageActivity(android.app.PendingIntent,android.content.Intent)&gt;,void startBuyPageActivity(android.app.PendingIntent,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: long run()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.ResponseHandler: void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.PurchaseObserver: void startBuyPageActivity(android.app.PendingIntent,android.content.Intent)&gt;"/>  
        <node method="PurchaseObserver startBuyPageActivity" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: long run()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: long run()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.ResponseHandler: void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.PurchaseObserver: void startBuyPageActivity(android.app.PendingIntent,android.content.Intent)&gt;,void startBuyPageActivity(android.app.PendingIntent,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: long run()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.ResponseHandler: void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.PurchaseObserver: void startBuyPageActivity(android.app.PendingIntent,android.content.Intent)&gt;"/>  
        <node method="PurchaseObserver startBuyPageActivity" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: long run()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: long run()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.ResponseHandler: void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)&gt;,void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent), &lt;eu.vranckaert.worktime.utils.donations.google.PurchaseObserver: void startBuyPageActivity(android.app.PendingIntent,android.content.Intent)&gt;"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: long run()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.ResponseHandler: void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)&gt;"/>  
        <node method="ResponseHandler buyPageIntentResponse" type="ReceiveIntentFromParatMethod" unit="$r0 := @parameter0: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: long run()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: long run()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.ResponseHandler: void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)&gt;,void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent), &lt;eu.vranckaert.worktime.utils.donations.google.PurchaseObserver: void startBuyPageActivity(android.app.PendingIntent,android.content.Intent)&gt;"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: long run()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.ResponseHandler: void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)&gt;"/>  
        <node method="ResponseHandler buyPageIntentResponse" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter1: android.content.Intent"/>  
        <node method="PurchaseObserver startBuyPageActivity" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="PurchaseObserver startBuyPageActivity" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="PurchaseObserver startBuyPageActivity" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent)&gt;($r7, 0, $r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: long run()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: long run()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.ResponseHandler: void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.PurchaseObserver: void startBuyPageActivity(android.app.PendingIntent,android.content.Intent)&gt;,void startBuyPageActivity(android.app.PendingIntent,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: long run()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.ResponseHandler: void buyPageIntentResponse(android.app.PendingIntent,android.content.Intent)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.PurchaseObserver: void startBuyPageActivity(android.app.PendingIntent,android.content.Intent)&gt;"/>  
        <node method="PurchaseObserver startBuyPageActivity" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="PurchaseObserver startBuyPageActivity" type="PassOutIntent" unit="virtualinvoke $r1.&lt;android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent)&gt;($r7, 0, $r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.backup.BackupSendFromSDActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.backup.BackupSendFromSDActivity: void sendFile(java.io.File)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.backup.BackupSendFromSDActivity: void sendFile(java.io.File)&gt;,&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,int,int,java.io.File,int)&gt;,&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.io.File,java.lang.String)&gt;,&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.util.List,java.lang.String)&gt;,void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.util.List,java.lang.String)"/>  
      <source name="eu.vranckaert.worktime.activities.backup.BackupSendFromSDActivity"/>  
      <destinition name="interICC_android.intent.action.SEND_MULTIPLE, "/>  
      <sender action="android.intent.action.SEND_MULTIPLE" type="text/plain"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.backup.BackupSendFromSDActivity: void sendFile(java.io.File)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,int,int,java.io.File,int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.io.File,java.lang.String)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.util.List,java.lang.String)&gt;"/>  
        <node method="IntentUtil sendSomething" type="CreateMethod" unit="r5 = new android.content.Intent"/>  
        <node method="IntentUtil sendSomething" type="SetAttribute" unit="specialinvoke r5.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.SEND_MULTIPLE&quot;)"/>  
        <node method="IntentUtil sendSomething" type="SetAttribute" unit="virtualinvoke r5.&lt;android.content.Intent: android.content.Intent setType(java.lang.String)&gt;(&quot;text/plain&quot;)"/>  
        <node method="IntentUtil sendSomething" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.app.Activity: void startActivity(android.content.Intent)&gt;(r5)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.backup.BackupSendFromSDActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.backup.BackupSendFromSDActivity: void access$200(eu.vranckaert.worktime.activities.backup.BackupSendFromSDActivity,java.io.File)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.backup.BackupSendFromSDActivity: void access$200(eu.vranckaert.worktime.activities.backup.BackupSendFromSDActivity,java.io.File)&gt;,&lt;eu.vranckaert.worktime.activities.backup.BackupSendFromSDActivity: void sendFile(java.io.File)&gt;,&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,int,int,java.io.File,int)&gt;,&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.io.File,java.lang.String)&gt;,&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.util.List,java.lang.String)&gt;,void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.util.List,java.lang.String)"/>  
      <source name="eu.vranckaert.worktime.activities.backup.BackupSendFromSDActivity"/>  
      <destinition name="interICC_android.intent.action.SEND_MULTIPLE, "/>  
      <sender action="android.intent.action.SEND_MULTIPLE" type="text/plain"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.backup.BackupSendFromSDActivity: void access$200(eu.vranckaert.worktime.activities.backup.BackupSendFromSDActivity,java.io.File)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.backup.BackupSendFromSDActivity: void sendFile(java.io.File)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,int,int,java.io.File,int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.io.File,java.lang.String)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.util.List,java.lang.String)&gt;"/>  
        <node method="IntentUtil sendSomething" type="CreateMethod" unit="r5 = new android.content.Intent"/>  
        <node method="IntentUtil sendSomething" type="SetAttribute" unit="specialinvoke r5.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.SEND_MULTIPLE&quot;)"/>  
        <node method="IntentUtil sendSomething" type="SetAttribute" unit="virtualinvoke r5.&lt;android.content.Intent: android.content.Intent setType(java.lang.String)&gt;(&quot;text/plain&quot;)"/>  
        <node method="IntentUtil sendSomething" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.app.Activity: void startActivity(android.content.Intent)&gt;(r5)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.backup.BackupSendFromSDActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.backup.BackupSendFromSDActivity$4: void onClick(android.content.DialogInterface,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.backup.BackupSendFromSDActivity$4: void onClick(android.content.DialogInterface,int)&gt;,&lt;eu.vranckaert.worktime.activities.backup.BackupSendFromSDActivity: void access$200(eu.vranckaert.worktime.activities.backup.BackupSendFromSDActivity,java.io.File)&gt;,&lt;eu.vranckaert.worktime.activities.backup.BackupSendFromSDActivity: void sendFile(java.io.File)&gt;,&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,int,int,java.io.File,int)&gt;,&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.io.File,java.lang.String)&gt;,&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.util.List,java.lang.String)&gt;,void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.util.List,java.lang.String)"/>  
      <source name="eu.vranckaert.worktime.activities.backup.BackupSendFromSDActivity"/>  
      <destinition name="interICC_android.intent.action.SEND_MULTIPLE, "/>  
      <sender action="android.intent.action.SEND_MULTIPLE" type="text/plain"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.backup.BackupSendFromSDActivity$4: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.backup.BackupSendFromSDActivity: void access$200(eu.vranckaert.worktime.activities.backup.BackupSendFromSDActivity,java.io.File)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.backup.BackupSendFromSDActivity: void sendFile(java.io.File)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,int,int,java.io.File,int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.io.File,java.lang.String)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.context.IntentUtil: void sendSomething(android.app.Activity,java.lang.String,java.lang.String,java.util.List,java.lang.String)&gt;"/>  
        <node method="IntentUtil sendSomething" type="CreateMethod" unit="r5 = new android.content.Intent"/>  
        <node method="IntentUtil sendSomething" type="SetAttribute" unit="specialinvoke r5.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.SEND_MULTIPLE&quot;)"/>  
        <node method="IntentUtil sendSomething" type="SetAttribute" unit="virtualinvoke r5.&lt;android.content.Intent: android.content.Intent setType(java.lang.String)&gt;(&quot;text/plain&quot;)"/>  
        <node method="IntentUtil sendSomething" type="PassOutIntent" unit="virtualinvoke $r0.&lt;android.app.Activity: void startActivity(android.content.Intent)&gt;(r5)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.reporting.ReportingResultActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.reporting.ReportingResultActivity: void save()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.reporting.ReportingResultActivity: void save()&gt;,void save()"/>  
      <source name="eu.vranckaert.worktime.activities.reporting.ReportingResultActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.reporting.ReportingExportActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.reporting.ReportingResultActivity: void save()&gt;"/>  
        <node method="ReportingResultActivity save" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="ReportingResultActivity save" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/reporting/ReportingExportActivity;&quot;)"/>  
        <node method="ReportingResultActivity save" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.reporting.ReportingResultActivity: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.reporting.ReportingResultActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.reporting.ReportingResultActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.reporting.ReportingResultActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;,&lt;eu.vranckaert.worktime.activities.reporting.ReportingResultActivity: void save()&gt;,void save()"/>  
      <source name="eu.vranckaert.worktime.activities.reporting.ReportingResultActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.reporting.ReportingExportActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.reporting.ReportingResultActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.reporting.ReportingResultActivity: void save()&gt;"/>  
        <node method="ReportingResultActivity save" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="ReportingResultActivity save" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/reporting/ReportingExportActivity;&quot;)"/>  
        <node method="ReportingResultActivity save" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.reporting.ReportingResultActivity: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="org.acra.ErrorReporter"> 
    <intentSummary> 
      <method value="&lt;org.acra.ErrorReporter: void notifyDialog(java.lang.String)&gt;"/>  
      <methodtrace value="&lt;org.acra.ErrorReporter: void notifyDialog(java.lang.String)&gt;,void notifyDialog(java.lang.String)"/>  
      <source name="org.acra.ErrorReporter"/>  
      <destinition name="org.acra.CrashReportDialog"/>  
      <nodes> 
        <node method="&lt;org.acra.ErrorReporter: void notifyDialog(java.lang.String)&gt;"/>  
        <node method="ErrorReporter notifyDialog" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="ErrorReporter notifyDialog" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r6, class &quot;Lorg/acra/CrashReportDialog;&quot;)"/>  
        <node method="ErrorReporter notifyDialog" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/>  
        <node method="ErrorReporter notifyDialog" type="PassOutIntent" unit="virtualinvoke $r6.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="org.acra.ErrorReporter"> 
    <intentSummary> 
      <method value="&lt;org.acra.ErrorReporter$3: void run()&gt;"/>  
      <methodtrace value="&lt;org.acra.ErrorReporter$3: void run()&gt;,&lt;org.acra.ErrorReporter: void notifyDialog(java.lang.String)&gt;,void notifyDialog(java.lang.String)"/>  
      <source name="org.acra.ErrorReporter"/>  
      <destinition name="org.acra.CrashReportDialog"/>  
      <nodes> 
        <node method="&lt;org.acra.ErrorReporter$3: void run()&gt;"/>  
        <node method="&lt;org.acra.ErrorReporter: void notifyDialog(java.lang.String)&gt;"/>  
        <node method="ErrorReporter notifyDialog" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="ErrorReporter notifyDialog" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r6, class &quot;Lorg/acra/CrashReportDialog;&quot;)"/>  
        <node method="ErrorReporter notifyDialog" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/>  
        <node method="ErrorReporter notifyDialog" type="PassOutIntent" unit="virtualinvoke $r6.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.reporting.ReportingExportActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.reporting.ReportingExportActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.reporting.ReportingExportActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="eu.vranckaert.worktime.activities.reporting.ReportingExportActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.reporting.ReportingExportActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="ReportingExportActivity onCreate" type="setContentView" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.reporting.ReportingExportActivity: void setContentView(int)&gt;(2130903059)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.preferences.ProjectsAndTasksPreferencesActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.ProjectsAndTasksPreferencesActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.ProjectsAndTasksPreferencesActivity: void onCreate(android.os.Bundle)&gt;,&lt;eu.vranckaert.worktime.utils.activity.GenericPreferencesActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.ProjectsAndTasksPreferencesActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.ProjectsAndTasksPreferencesActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.activity.GenericPreferencesActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="GenericPreferencesActivity onCreate" type="setContentView" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.utils.activity.GenericPreferencesActivity: void setContentView(int)&gt;(2130903054)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.donations.google.BillingService"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void onStart(android.content.Intent,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void onStart(android.content.Intent,int)&gt;,void onStart(android.content.Intent,int)"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void onStart(android.content.Intent,int)&gt;"/>  
        <node method="BillingService onStart" type="ReceiveIntentFromRetValue" unit="$r1 = virtualinvoke r0.&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void onStart(android.content.Intent,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void onStart(android.content.Intent,int)&gt;,void onStart(android.content.Intent,int), &lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void handleCommand(android.content.Intent,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void onStart(android.content.Intent,int)&gt;"/>  
        <node method="BillingService onStart" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void onStart(android.content.Intent,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void onStart(android.content.Intent,int)&gt;,void onStart(android.content.Intent,int), &lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void handleCommand(android.content.Intent,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void onStart(android.content.Intent,int)&gt;"/>  
        <node method="BillingService onStart" type="ReceiveIntentFromRetValue" unit="$r1 = virtualinvoke r0.&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void onStart(android.content.Intent,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void onStart(android.content.Intent,int)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void handleCommand(android.content.Intent,int)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean getPurchaseInformation(int,java.lang.String[])&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;,boolean bindToMarketBillingService()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <destinition name="interICC_com.android.vending.billing.MarketBillingService.BIND, "/>  
      <sender action="com.android.vending.billing.MarketBillingService.BIND"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void onStart(android.content.Intent,int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void handleCommand(android.content.Intent,int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean getPurchaseInformation(int,java.lang.String[])&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
        <node method="BillingService bindToMarketBillingService" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="BillingService bindToMarketBillingService" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.android.vending.billing.MarketBillingService.BIND&quot;)"/>  
        <node method="BillingService bindToMarketBillingService" type="PassOutIntent" unit="$z0 = virtualinvoke r0.&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)&gt;($r2, r0, 1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void onStart(android.content.Intent,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void onStart(android.content.Intent,int)&gt;,void onStart(android.content.Intent,int)"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void onStart(android.content.Intent,int)&gt;"/>  
        <node method="BillingService onStart" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void onStart(android.content.Intent,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void onStart(android.content.Intent,int)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void handleCommand(android.content.Intent,int)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean getPurchaseInformation(int,java.lang.String[])&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;,boolean bindToMarketBillingService()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <sender action="com.android.vending.billing.MarketBillingService.BIND"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void onStart(android.content.Intent,int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void handleCommand(android.content.Intent,int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean getPurchaseInformation(int,java.lang.String[])&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
        <node method="BillingService bindToMarketBillingService" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="BillingService bindToMarketBillingService" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.android.vending.billing.MarketBillingService.BIND&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void onStart(android.content.Intent,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void onStart(android.content.Intent,int)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void handleCommand(android.content.Intent,int)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean getPurchaseInformation(int,java.lang.String[])&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;,boolean bindToMarketBillingService()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void onStart(android.content.Intent,int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: void handleCommand(android.content.Intent,int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean getPurchaseInformation(int,java.lang.String[])&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
        <node method="BillingService bindToMarketBillingService" type="CreateMethod" unit="$r2 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForSync(int,int,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForSync(int,int,int)&gt;,void addStatusBarNotificationForSync(int,int,int), &lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncHistoryActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForSync(int,int,int)&gt;"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForSync" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForSync" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncHistoryActivity;&quot;)"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromParatMethod" unit="$r4 := @parameter3: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromRetValue" unit="$r4 = virtualinvoke r9.&lt;eu.vranckaert.worktime.model.notification.NotificationAction: android.content.Intent getIntent()&gt;()"/>  
        <node method="NotificationCompat2$Builder setContentIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForSync" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForSync" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForSync" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForSync" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForSync" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForSync" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="NotificationCompat2$Builder addAction" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.app.PendingIntent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForSync" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForSync" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForSync" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForSync(int,int,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForSync(int,int,int)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder addAction(int,java.lang.CharSequence,android.app.PendingIntent)&gt;,com.jakewharton.notificationcompat2.NotificationCompat2$Builder addAction(int,java.lang.CharSequence,android.app.PendingIntent)"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForSync(int,int,int)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder addAction(int,java.lang.CharSequence,android.app.PendingIntent)&gt;"/>  
        <node method="NotificationCompat2$Builder addAction" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForSync(int,int,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForSync(int,int,int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;,void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[]), &lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder setContentIntent(android.app.PendingIntent)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForSync(int,int,int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromParatMethod" unit="$r4 := @parameter3: android.content.Intent"/>  
        <node method="NotificationCompat2$Builder setContentIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForSync(int,int,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForSync(int,int,int)&gt;,void addStatusBarNotificationForSync(int,int,int), &lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncHistoryActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForSync(int,int,int)&gt;"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForSync" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForSync" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncHistoryActivity;&quot;)"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromParatMethod" unit="$r4 := @parameter3: android.content.Intent"/>  
        <node method="NotificationCompat2$Builder setContentIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForSync" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForSync" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForSync" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForSync" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForSync" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForSync" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForSync" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForSync" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="StatusBarNotificationServiceImpl addStatusBarNotificationForSync" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForSync(int,int,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForSync(int,int,int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;,void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[]), &lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder setContentIntent(android.app.PendingIntent)&gt;, &lt;eu.vranckaert.worktime.model.notification.NotificationAction: android.content.Intent getIntent()&gt;, &lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder addAction(int,java.lang.CharSequence,android.app.PendingIntent)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForSync(int,int,int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromParatMethod" unit="$r4 := @parameter3: android.content.Intent"/>  
        <node method="NotificationCompat2$Builder setContentIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForSync(int,int,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForSync(int,int,int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;,void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[]), &lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder setContentIntent(android.app.PendingIntent)&gt;, &lt;eu.vranckaert.worktime.model.notification.NotificationAction: android.content.Intent getIntent()&gt;, &lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder addAction(int,java.lang.CharSequence,android.app.PendingIntent)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForSync(int,int,int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromRetValue" unit="$r4 = virtualinvoke r9.&lt;eu.vranckaert.worktime.model.notification.NotificationAction: android.content.Intent getIntent()&gt;()"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="NotificationCompat2$Builder addAction" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForSync(int,int,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForSync(int,int,int)&gt;,&lt;eu.vranckaert.worktime.model.notification.NotificationAction: android.content.Intent getIntent()&gt;,android.content.Intent getIntent()"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForSync(int,int,int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.model.notification.NotificationAction: android.content.Intent getIntent()&gt;"/>  
        <node method="NotificationAction getIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction getIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="NotificationAction getIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="NotificationAction getIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction getIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="NotificationAction getIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction getIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="NotificationAction getIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="NotificationAction getIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction getIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForSync(int,int,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForSync(int,int,int)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder setContentIntent(android.app.PendingIntent)&gt;,com.jakewharton.notificationcompat2.NotificationCompat2$Builder setContentIntent(android.app.PendingIntent)"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForSync(int,int,int)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder setContentIntent(android.app.PendingIntent)&gt;"/>  
        <node method="NotificationCompat2$Builder setContentIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompat2$Builder setContentIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForSync(int,int,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForSync(int,int,int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle: android.app.Notification build()&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigTextStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForSync(int,int,int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle: android.app.Notification build()&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigTextStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;($r8, $z0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForSync(int,int,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForSync(int,int,int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle: android.app.Notification build()&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigTextStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForSync(int,int,int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle: android.app.Notification build()&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigTextStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setDeleteIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;($r8, $z0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForSync(int,int,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForSync(int,int,int)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder setContentIntent(android.app.PendingIntent)&gt;,com.jakewharton.notificationcompat2.NotificationCompat2$Builder setContentIntent(android.app.PendingIntent)"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForSync(int,int,int)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder setContentIntent(android.app.PendingIntent)&gt;"/>  
        <node method="NotificationCompat2$Builder setContentIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompat2$Builder setContentIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForSync(int,int,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForSync(int,int,int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle: android.app.Notification build()&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigTextStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addStatusBarNotificationForSync(int,int,int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle: android.app.Notification build()&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigTextStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setDeleteIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;($r8, $z0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="org.acra.sender.EmailIntentSender"> 
    <intentSummary> 
      <method value="&lt;org.acra.sender.EmailIntentSender: void send(org.acra.collector.CrashReportData)&gt;"/>  
      <methodtrace value="&lt;org.acra.sender.EmailIntentSender: void send(org.acra.collector.CrashReportData)&gt;,void send(org.acra.collector.CrashReportData)"/>  
      <source name="org.acra.sender.EmailIntentSender"/>  
      <destinition name="interICC_android.intent.action.SEND, "/>  
      <sender action="android.intent.action.SEND" type="text/plain" flags="FLAG_ACTIVITY_NEW_TASK "/>  
      <nodes> 
        <node method="&lt;org.acra.sender.EmailIntentSender: void send(org.acra.collector.CrashReportData)&gt;"/>  
        <node method="EmailIntentSender send" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="EmailIntentSender send" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.SEND&quot;)"/>  
        <node method="EmailIntentSender send" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(268435456)"/>  
        <node method="EmailIntentSender send" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setType(java.lang.String)&gt;(&quot;text/plain&quot;)"/>  
        <node method="EmailIntentSender send" type="PassOutIntent" unit="virtualinvoke $r4.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="org.acra.ErrorReporter"> 
    <intentSummary> 
      <method value="&lt;org.acra.ErrorReporter: void notifySendReport(java.lang.String)&gt;"/>  
      <methodtrace value="&lt;org.acra.ErrorReporter: void notifySendReport(java.lang.String)&gt;,void notifySendReport(java.lang.String)"/>  
      <source name="org.acra.ErrorReporter"/>  
      <destinition name="org.acra.CrashReportDialog"/>  
      <nodes> 
        <node method="&lt;org.acra.ErrorReporter: void notifySendReport(java.lang.String)&gt;"/>  
        <node method="ErrorReporter notifySendReport" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="ErrorReporter notifySendReport" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r4, class &quot;Lorg/acra/CrashReportDialog;&quot;)"/>  
        <node method="ErrorReporter notifySendReport" type="PassOutIntent" unit="virtualinvoke r2.&lt;android.app.Notification: void setLatestEventInfo(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,android.app.PendingIntent)&gt;($r4, $r8, $r9, $r13)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="org.acra.ErrorReporter"> 
    <intentSummary> 
      <method value="&lt;org.acra.ErrorReporter: void handleException(java.lang.Throwable,org.acra.ReportingInteractionMode,boolean,boolean)&gt;"/>  
      <methodtrace value="&lt;org.acra.ErrorReporter: void handleException(java.lang.Throwable,org.acra.ReportingInteractionMode,boolean,boolean)&gt;,&lt;org.acra.ErrorReporter: void notifySendReport(java.lang.String)&gt;,void notifySendReport(java.lang.String)"/>  
      <source name="org.acra.ErrorReporter"/>  
      <destinition name="org.acra.CrashReportDialog"/>  
      <nodes> 
        <node method="&lt;org.acra.ErrorReporter: void handleException(java.lang.Throwable,org.acra.ReportingInteractionMode,boolean,boolean)&gt;"/>  
        <node method="&lt;org.acra.ErrorReporter: void notifySendReport(java.lang.String)&gt;"/>  
        <node method="ErrorReporter notifySendReport" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="ErrorReporter notifySendReport" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r4, class &quot;Lorg/acra/CrashReportDialog;&quot;)"/>  
        <node method="ErrorReporter notifySendReport" type="PassOutIntent" unit="virtualinvoke r2.&lt;android.app.Notification: void setLatestEventInfo(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,android.app.PendingIntent)&gt;($r4, $r8, $r9, $r13)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;org.acra.ErrorReporter: void handleException(java.lang.Throwable,org.acra.ReportingInteractionMode,boolean,boolean)&gt;"/>  
      <methodtrace value="&lt;org.acra.ErrorReporter: void handleException(java.lang.Throwable,org.acra.ReportingInteractionMode,boolean,boolean)&gt;,&lt;org.acra.ErrorReporter$3: void run()&gt;,&lt;org.acra.ErrorReporter: void notifyDialog(java.lang.String)&gt;,void notifyDialog(java.lang.String)"/>  
      <source name="org.acra.ErrorReporter"/>  
      <destinition name="org.acra.CrashReportDialog"/>  
      <nodes> 
        <node method="&lt;org.acra.ErrorReporter: void handleException(java.lang.Throwable,org.acra.ReportingInteractionMode,boolean,boolean)&gt;"/>  
        <node method="&lt;org.acra.ErrorReporter$3: void run()&gt;"/>  
        <node method="&lt;org.acra.ErrorReporter: void notifyDialog(java.lang.String)&gt;"/>  
        <node method="ErrorReporter notifyDialog" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="ErrorReporter notifyDialog" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r6, class &quot;Lorg/acra/CrashReportDialog;&quot;)"/>  
        <node method="ErrorReporter notifyDialog" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/>  
        <node method="ErrorReporter notifyDialog" type="PassOutIntent" unit="virtualinvoke $r6.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="org.acra.ErrorReporter"> 
    <intentSummary> 
      <method value="&lt;org.acra.ErrorReporter: void handleSilentException(java.lang.Throwable)&gt;"/>  
      <methodtrace value="&lt;org.acra.ErrorReporter: void handleSilentException(java.lang.Throwable)&gt;,&lt;org.acra.ErrorReporter: void handleException(java.lang.Throwable,org.acra.ReportingInteractionMode,boolean,boolean)&gt;,&lt;org.acra.ErrorReporter: void notifySendReport(java.lang.String)&gt;,void notifySendReport(java.lang.String)"/>  
      <source name="org.acra.ErrorReporter"/>  
      <destinition name="org.acra.CrashReportDialog"/>  
      <nodes> 
        <node method="&lt;org.acra.ErrorReporter: void handleSilentException(java.lang.Throwable)&gt;"/>  
        <node method="&lt;org.acra.ErrorReporter: void handleException(java.lang.Throwable,org.acra.ReportingInteractionMode,boolean,boolean)&gt;"/>  
        <node method="&lt;org.acra.ErrorReporter: void notifySendReport(java.lang.String)&gt;"/>  
        <node method="ErrorReporter notifySendReport" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="ErrorReporter notifySendReport" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r4, class &quot;Lorg/acra/CrashReportDialog;&quot;)"/>  
        <node method="ErrorReporter notifySendReport" type="PassOutIntent" unit="virtualinvoke r2.&lt;android.app.Notification: void setLatestEventInfo(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,android.app.PendingIntent)&gt;($r4, $r8, $r9, $r13)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;org.acra.ErrorReporter: void handleSilentException(java.lang.Throwable)&gt;"/>  
      <methodtrace value="&lt;org.acra.ErrorReporter: void handleSilentException(java.lang.Throwable)&gt;,&lt;org.acra.ErrorReporter: void handleException(java.lang.Throwable,org.acra.ReportingInteractionMode,boolean,boolean)&gt;,&lt;org.acra.ErrorReporter$3: void run()&gt;,&lt;org.acra.ErrorReporter: void notifyDialog(java.lang.String)&gt;,void notifyDialog(java.lang.String)"/>  
      <source name="org.acra.ErrorReporter"/>  
      <destinition name="org.acra.CrashReportDialog"/>  
      <nodes> 
        <node method="&lt;org.acra.ErrorReporter: void handleSilentException(java.lang.Throwable)&gt;"/>  
        <node method="&lt;org.acra.ErrorReporter: void handleException(java.lang.Throwable,org.acra.ReportingInteractionMode,boolean,boolean)&gt;"/>  
        <node method="&lt;org.acra.ErrorReporter$3: void run()&gt;"/>  
        <node method="&lt;org.acra.ErrorReporter: void notifyDialog(java.lang.String)&gt;"/>  
        <node method="ErrorReporter notifyDialog" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="ErrorReporter notifyDialog" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r6, class &quot;Lorg/acra/CrashReportDialog;&quot;)"/>  
        <node method="ErrorReporter notifyDialog" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/>  
        <node method="ErrorReporter notifyDialog" type="PassOutIntent" unit="virtualinvoke $r6.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.about.AboutActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.about.AboutActivity$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.about.AboutActivity$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;,void onItemClick(android.widget.AdapterView,android.view.View,int,long), &lt;eu.vranckaert.worktime.activities.about.AboutListElement: android.content.Intent getIntent()&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.about.AboutActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.about.AboutActivity$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
        <node method="AboutActivity$1 onItemClick" type="ReceiveIntentFromRetValue" unit="$r11 = virtualinvoke r10.&lt;eu.vranckaert.worktime.activities.about.AboutListElement: android.content.Intent getIntent()&gt;()"/>  
        <node method="AboutActivity$1 onItemClick" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="AboutActivity$1 onItemClick" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="AboutActivity$1 onItemClick" type="PassOutIntent" unit="virtualinvoke $r3.&lt;eu.vranckaert.worktime.activities.about.AboutActivity: void startActivity(android.content.Intent)&gt;($r11)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.about.AboutActivity$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.about.AboutActivity$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;,void onItemClick(android.widget.AdapterView,android.view.View,int,long), &lt;eu.vranckaert.worktime.activities.about.AboutListElement: android.content.Intent getIntent()&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.about.AboutActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.about.AboutActivity$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
        <node method="AboutActivity$1 onItemClick" type="ReceiveIntentFromRetValue" unit="$r11 = virtualinvoke r10.&lt;eu.vranckaert.worktime.activities.about.AboutListElement: android.content.Intent getIntent()&gt;()"/>  
        <node method="AboutActivity$1 onItemClick" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="AboutActivity$1 onItemClick" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.about.AboutActivity$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.about.AboutActivity$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;,void onItemClick(android.widget.AdapterView,android.view.View,int,long), &lt;eu.vranckaert.worktime.activities.about.AboutListElement: android.content.Intent getIntent()&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.about.AboutActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.about.AboutActivity$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
        <node method="AboutActivity$1 onItemClick" type="ReceiveIntentFromRetValue" unit="$r11 = virtualinvoke r10.&lt;eu.vranckaert.worktime.activities.about.AboutListElement: android.content.Intent getIntent()&gt;()"/>  
        <node method="AboutActivity$1 onItemClick" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="AboutActivity$1 onItemClick" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationListActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationListActivity$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationListActivity$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;,void onItemClick(android.widget.AdapterView,android.view.View,int,long)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationListActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationDetailActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationListActivity$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
        <node method="TimeRegistrationListActivity$1 onItemClick" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="TimeRegistrationListActivity$1 onItemClick" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r4, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationDetailActivity;&quot;)"/>  
        <node method="TimeRegistrationListActivity$1 onItemClick" type="PassOutIntent" unit="virtualinvoke $r4.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationListActivity: void startActivityForResult(android.content.Intent,int)&gt;(r3, 1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.notifcationbar.StatusBarSplitActionHandleActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.notifcationbar.StatusBarSplitActionHandleActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.notifcationbar.StatusBarSplitActionHandleActivity: void onCreate(android.os.Bundle)&gt;,&lt;eu.vranckaert.worktime.activities.notifcationbar.StatusBarSplitActionHandleActivity: void launchTimeRegistrationActionsDialog()&gt;,void launchTimeRegistrationActionsDialog()"/>  
      <source name="eu.vranckaert.worktime.activities.notifcationbar.StatusBarSplitActionHandleActivity"/>  
      <destinition name="eu.vranckaert.worktime.broadcastreceiver.SplitBroadCastReceiver"/>  
      <sender action="eu.vranckaert.worktime.time_registration_action_split"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.notifcationbar.StatusBarSplitActionHandleActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.notifcationbar.StatusBarSplitActionHandleActivity: void launchTimeRegistrationActionsDialog()&gt;"/>  
        <node method="StatusBarSplitActionHandleActivity launchTimeRegistrationActionsDialog" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="StatusBarSplitActionHandleActivity launchTimeRegistrationActionsDialog" type="SetAttribute" unit="virtualinvoke r1.&lt;android.content.Intent: android.content.Intent setAction(java.lang.String)&gt;(&quot;eu.vranckaert.worktime.time_registration_action_split&quot;)"/>  
        <node method="StatusBarSplitActionHandleActivity launchTimeRegistrationActionsDialog" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.notifcationbar.StatusBarSplitActionHandleActivity: void sendBroadcast(android.content.Intent)&gt;(r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="com.jakewharton.notificationcompat2.NotificationCompat2"> 
    <intentSummary> 
      <method value="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$InboxStyle: android.app.Notification build()&gt;"/>  
      <methodtrace value="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$InboxStyle: android.app.Notification build()&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildInboxStyle(com.jakewharton.notificationcompat2.NotificationCompat2$InboxStyle)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)"/>  
      <source name="com.jakewharton.notificationcompat2.NotificationCompat2"/>  
      <nodes> 
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$InboxStyle: android.app.Notification build()&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildInboxStyle(com.jakewharton.notificationcompat2.NotificationCompat2$InboxStyle)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;($r8, $z0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$InboxStyle: android.app.Notification build()&gt;"/>  
      <methodtrace value="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$InboxStyle: android.app.Notification build()&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildInboxStyle(com.jakewharton.notificationcompat2.NotificationCompat2$InboxStyle)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)"/>  
      <source name="com.jakewharton.notificationcompat2.NotificationCompat2"/>  
      <nodes> 
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$InboxStyle: android.app.Notification build()&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildInboxStyle(com.jakewharton.notificationcompat2.NotificationCompat2$InboxStyle)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setDeleteIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;($r8, $z0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$InboxStyle: android.app.Notification build()&gt;"/>  
      <methodtrace value="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$InboxStyle: android.app.Notification build()&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildInboxStyle(com.jakewharton.notificationcompat2.NotificationCompat2$InboxStyle)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)"/>  
      <source name="com.jakewharton.notificationcompat2.NotificationCompat2"/>  
      <nodes> 
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$InboxStyle: android.app.Notification build()&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildInboxStyle(com.jakewharton.notificationcompat2.NotificationCompat2$InboxStyle)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setDeleteIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;($r8, $z0)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationEditProjectAndTaskActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationEditProjectAndTaskActivity$4: void onClick(android.content.DialogInterface,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationEditProjectAndTaskActivity$4: void onClick(android.content.DialogInterface,int)&gt;,void onClick(android.content.DialogInterface,int)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationEditProjectAndTaskActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.tasks.AddEditTaskActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationEditProjectAndTaskActivity$4: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="TimeRegistrationEditProjectAndTaskActivity$4 onClick" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="TimeRegistrationEditProjectAndTaskActivity$4 onClick" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Leu/vranckaert/worktime/activities/tasks/AddEditTaskActivity;&quot;)"/>  
        <node method="TimeRegistrationEditProjectAndTaskActivity$4 onClick" type="PassOutIntent" unit="virtualinvoke $r3.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationEditProjectAndTaskActivity: void startActivityForResult(android.content.Intent,int)&gt;(r2, 7)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.reporting.ReportingResultActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.reporting.ReportingResultActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.reporting.ReportingResultActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="eu.vranckaert.worktime.activities.reporting.ReportingResultActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.reporting.ReportingResultActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="ReportingResultActivity onCreate" type="setContentView" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.reporting.ReportingResultActivity: void setContentView(int)&gt;(2130903060)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockingActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockingActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockingActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockingActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockingActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="SyncLockingActivity onCreate" type="setContentView" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockingActivity: void setContentView(int)&gt;(2130903061)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationEditProjectAndTaskActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationEditProjectAndTaskActivity$2: void onClick(android.content.DialogInterface,int)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationEditProjectAndTaskActivity$2: void onClick(android.content.DialogInterface,int)&gt;,void onClick(android.content.DialogInterface,int)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationEditProjectAndTaskActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.projects.AddEditProjectActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationEditProjectAndTaskActivity$2: void onClick(android.content.DialogInterface,int)&gt;"/>  
        <node method="TimeRegistrationEditProjectAndTaskActivity$2 onClick" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="TimeRegistrationEditProjectAndTaskActivity$2 onClick" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Leu/vranckaert/worktime/activities/projects/AddEditProjectActivity;&quot;)"/>  
        <node method="TimeRegistrationEditProjectAndTaskActivity$2 onClick" type="PassOutIntent" unit="virtualinvoke $r3.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationEditProjectAndTaskActivity: void startActivityForResult(android.content.Intent,int)&gt;(r2, 6)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.projects.ManageProjectsActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;,&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: void access$200(eu.vranckaert.worktime.activities.projects.ManageProjectsActivity,eu.vranckaert.worktime.model.Project)&gt;,&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: void openProjectDetailActivity(eu.vranckaert.worktime.model.Project)&gt;,void openProjectDetailActivity(eu.vranckaert.worktime.model.Project)"/>  
      <source name="eu.vranckaert.worktime.activities.projects.ManageProjectsActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: void access$200(eu.vranckaert.worktime.activities.projects.ManageProjectsActivity,eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: void openProjectDetailActivity(eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="ManageProjectsActivity openProjectDetailActivity" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="ManageProjectsActivity openProjectDetailActivity" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/projects/ProjectDetailsActivity;&quot;)"/>  
        <node method="ManageProjectsActivity openProjectDetailActivity" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: void startActivityForResult(android.content.Intent,int)&gt;(r2, 10)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="roboguice.activity.RoboLauncherActivity"> 
    <intentSummary> 
      <method value="&lt;roboguice.activity.RoboLauncherActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.activity.RoboLauncherActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;,void &lt;init&gt;(int,int,android.content.Intent)"/>  
      <source name="roboguice.activity.RoboLauncherActivity"/>  
      <nodes> 
        <node method="&lt;roboguice.activity.RoboLauncherActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.activity.RoboLauncherActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.activity.RoboLauncherActivity: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent), &lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
      <source name="roboguice.activity.RoboLauncherActivity"/>  
      <nodes> 
        <node method="&lt;roboguice.activity.RoboLauncherActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="RoboLauncherActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="RoboLauncherActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.activity.RoboLauncherActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.activity.RoboLauncherActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;,void &lt;init&gt;(int,int,android.content.Intent)"/>  
      <source name="roboguice.activity.RoboLauncherActivity"/>  
      <nodes> 
        <node method="&lt;roboguice.activity.RoboLauncherActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="roboguice.activity.RoboFragmentActivity"> 
    <intentSummary> 
      <method value="&lt;roboguice.activity.RoboFragmentActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.activity.RoboFragmentActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;,void &lt;init&gt;(int,int,android.content.Intent)"/>  
      <source name="roboguice.activity.RoboFragmentActivity"/>  
      <nodes> 
        <node method="&lt;roboguice.activity.RoboFragmentActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.activity.RoboFragmentActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.activity.RoboFragmentActivity: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent), &lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
      <source name="roboguice.activity.RoboFragmentActivity"/>  
      <nodes> 
        <node method="&lt;roboguice.activity.RoboFragmentActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="RoboFragmentActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="RoboFragmentActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.activity.RoboFragmentActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.activity.RoboFragmentActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;,void &lt;init&gt;(int,int,android.content.Intent)"/>  
      <source name="roboguice.activity.RoboFragmentActivity"/>  
      <nodes> 
        <node method="&lt;roboguice.activity.RoboFragmentActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$1: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$1: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;,void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;, &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$1: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$1: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$1: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;,void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$1: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="ReceiveIntentFromRetValue" unit="$r9 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="ReceiveIntentFromRetValue" unit="$r9 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="PassOutIntent" unit="virtualinvoke $r8.&lt;android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)&gt;(0, $l1, 86400000L, $r9)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$1: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$1: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date)&gt;,void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;, &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$1: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date)&gt;"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="ReceiveIntentFromRetValue" unit="$r9 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="PassOutIntent" unit="virtualinvoke $r8.&lt;android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)&gt;(0, $l1, 86400000L, $r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$1: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$1: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date)&gt;,void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;, &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$1: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$1: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$1: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;,boolean onPreferenceChange(android.preference.Preference,java.lang.Object), &lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void access$100(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$1: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$1: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$1: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;,void removeAllSyncAlarms(android.content.Context), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$1: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$1: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$1: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;,boolean onPreferenceChange(android.preference.Preference,java.lang.Object), &lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void access$100(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$1: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="ReceiveIntentFromRetValue" unit="$r7 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="ReceiveIntentFromRetValue" unit="$r7 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="PassOutIntent" unit="virtualinvoke $r6.&lt;android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)&gt;(0, l1, $l0, $r7)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$1: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$1: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;,android.app.PendingIntent getSyncOperation(android.content.Context,int)"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$1: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$1: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$1: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;,void removeAllSyncAlarms(android.content.Context), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$1: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$1: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$1: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;,void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$1: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="ReceiveIntentFromRetValue" unit="$r7 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="ReceiveIntentFromRetValue" unit="$r7 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="PassOutIntent" unit="virtualinvoke $r6.&lt;android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)&gt;(0, l1, $l0, $r7)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$1: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$1: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;,boolean onPreferenceChange(android.preference.Preference,java.lang.Object), &lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void access$100(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$1: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="ReceiveIntentFromRetValue" unit="$r9 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="ReceiveIntentFromRetValue" unit="$r9 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="PassOutIntent" unit="virtualinvoke $r8.&lt;android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)&gt;(0, $l1, 86400000L, $r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$1: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$1: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;,void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$1: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$1: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$1: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;,void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$1: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$1: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$1: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;,void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;, &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity$1: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="ReceiveIntentFromRetValue" unit="$r7 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="PassOutIntent" unit="virtualinvoke $r6.&lt;android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)&gt;(0, l1, $l0, $r7)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedPreferenceActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedPreferenceActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedPreferenceActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;roboguice.activity.RoboPreferenceActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;,void &lt;init&gt;(int,int,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedPreferenceActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedPreferenceActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;roboguice.activity.RoboPreferenceActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedPreferenceActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedPreferenceActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;roboguice.activity.RoboPreferenceActivity: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent), &lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
      <source name="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedPreferenceActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedPreferenceActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;roboguice.activity.RoboPreferenceActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="RoboPreferenceActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="RoboPreferenceActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedPreferenceActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedPreferenceActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;roboguice.activity.RoboPreferenceActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;,void &lt;init&gt;(int,int,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedPreferenceActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedPreferenceActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;roboguice.activity.RoboPreferenceActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedPreferenceActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedPreferenceActivity: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent), &lt;roboguice.activity.RoboPreferenceActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <source name="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedPreferenceActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedPreferenceActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="SyncLockedPreferenceActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="RoboPreferenceActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="SyncLockedPreferenceActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="roboguice.activity.RoboMapActivity"> 
    <intentSummary> 
      <method value="&lt;roboguice.activity.RoboMapActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.activity.RoboMapActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;,void &lt;init&gt;(int,int,android.content.Intent)"/>  
      <source name="roboguice.activity.RoboMapActivity"/>  
      <nodes> 
        <node method="&lt;roboguice.activity.RoboMapActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.activity.RoboMapActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.activity.RoboMapActivity: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent), &lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
      <source name="roboguice.activity.RoboMapActivity"/>  
      <nodes> 
        <node method="&lt;roboguice.activity.RoboMapActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="RoboMapActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="RoboMapActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.activity.RoboMapActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.activity.RoboMapActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;,void &lt;init&gt;(int,int,android.content.Intent)"/>  
      <source name="roboguice.activity.RoboMapActivity"/>  
      <nodes> 
        <node method="&lt;roboguice.activity.RoboMapActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="roboguice.activity.RoboFragmentActivity"> 
    <intentSummary> 
      <method value="&lt;roboguice.activity.RoboFragmentActivity: void onNewIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.activity.RoboFragmentActivity: void onNewIntent(android.content.Intent)&gt;,void onNewIntent(android.content.Intent)"/>  
      <source name="roboguice.activity.RoboFragmentActivity"/>  
      <nodes> 
        <node method="&lt;roboguice.activity.RoboFragmentActivity: void onNewIntent(android.content.Intent)&gt;"/>  
        <node method="RoboFragmentActivity onNewIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.donations.DonationsFragment"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.DonationsFragment$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.DonationsFragment$1: void onClick(android.view.View)&gt;,&lt;eu.vranckaert.worktime.utils.donations.DonationsFragment: void donateGoogleOnClick(android.view.View)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean requestPurchase(java.lang.String,java.lang.String)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;,boolean bindToMarketBillingService()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.DonationsFragment"/>  
      <destinition name="interICC_com.android.vending.billing.MarketBillingService.BIND, "/>  
      <sender action="com.android.vending.billing.MarketBillingService.BIND"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.DonationsFragment$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.DonationsFragment: void donateGoogleOnClick(android.view.View)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean requestPurchase(java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
        <node method="BillingService bindToMarketBillingService" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="BillingService bindToMarketBillingService" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.android.vending.billing.MarketBillingService.BIND&quot;)"/>  
        <node method="BillingService bindToMarketBillingService" type="PassOutIntent" unit="$z0 = virtualinvoke r0.&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)&gt;($r2, r0, 1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.DonationsFragment$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.DonationsFragment$1: void onClick(android.view.View)&gt;,&lt;eu.vranckaert.worktime.utils.donations.DonationsFragment: void donateGoogleOnClick(android.view.View)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean requestPurchase(java.lang.String,java.lang.String)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;,boolean bindToMarketBillingService()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.DonationsFragment"/>  
      <sender action="com.android.vending.billing.MarketBillingService.BIND"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.DonationsFragment$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.DonationsFragment: void donateGoogleOnClick(android.view.View)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean requestPurchase(java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
        <node method="BillingService bindToMarketBillingService" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="BillingService bindToMarketBillingService" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.android.vending.billing.MarketBillingService.BIND&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.DonationsFragment$1: void onClick(android.view.View)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.DonationsFragment$1: void onClick(android.view.View)&gt;,&lt;eu.vranckaert.worktime.utils.donations.DonationsFragment: void donateGoogleOnClick(android.view.View)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean requestPurchase(java.lang.String,java.lang.String)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;,boolean bindToMarketBillingService()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.DonationsFragment"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.DonationsFragment$1: void onClick(android.view.View)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.DonationsFragment: void donateGoogleOnClick(android.view.View)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean requestPurchase(java.lang.String,java.lang.String)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RequestPurchase: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
        <node method="BillingService bindToMarketBillingService" type="CreateMethod" unit="$r2 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="roboguice.activity.RoboLauncherActivity"> 
    <intentSummary> 
      <method value="&lt;roboguice.activity.RoboLauncherActivity: void onNewIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.activity.RoboLauncherActivity: void onNewIntent(android.content.Intent)&gt;,void onNewIntent(android.content.Intent)"/>  
      <source name="roboguice.activity.RoboLauncherActivity"/>  
      <nodes> 
        <node method="&lt;roboguice.activity.RoboLauncherActivity: void onNewIntent(android.content.Intent)&gt;"/>  
        <node method="RoboLauncherActivity onNewIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;,boolean setPunchButton(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,void updateWidget2x1ProjectTask(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,void updateWidget2x1ProjectTask(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void enableWidgetOnClick(int)&gt;,void enableWidgetOnClick(int)"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.HomeActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void enableWidgetOnClick(int)&gt;"/>  
        <node method="WidgetServiceImpl enableWidgetOnClick" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl enableWidgetOnClick" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Leu/vranckaert/worktime/activities/HomeActivity;&quot;)"/>  
        <node method="WidgetServiceImpl enableWidgetOnClick" type="PassOutIntent" unit="virtualinvoke $r5.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;,void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;,boolean setPunchButton(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;,boolean setPunchButton(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;,void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,void updateWidget2x1ProjectTask(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,void updateWidget2x1ProjectTask(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;,boolean setPunchButton(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,void updateWidget2x1ProjectTask(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,void updateWidget2x1ProjectTask(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;,boolean setPunchButton(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,void updateWidget2x1ProjectTask(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;,boolean setPunchButton(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.projects.SelectProjectActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.projects.SelectProjectActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Task), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;,boolean setPunchButton(int,eu.vranckaert.worktime.model.Project), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;,void updateWidget2x2Project(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void startBackgroundWorkActivity(android.content.Context,int,java.lang.Class,eu.vranckaert.worktime.model.TimeRegistration,eu.vranckaert.worktime.model.Task,int,int[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x2Project(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;,void updateWidget2x1ProjectTask(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget2x1ProjectTask(int)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;,boolean setPunchButton(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Task)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;,boolean setPunchButton(int), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int,eu.vranckaert.worktime.model.Project)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: boolean setPunchButton(int)&gt;"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r1, r2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(343932928)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(i2)"/>  
        <node method="WidgetServiceImpl startBackgroundWorkActivity" type="PassOutIntent" unit="virtualinvoke $r9.&lt;android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)&gt;($i0, $r8)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;,void updateWidgets(java.util.List), &lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidget(int)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateAllWidgets()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.WidgetServiceImpl: void updateWidgets(java.util.List)&gt;"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.account.AccountSyncHistoryActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountSyncHistoryActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountSyncHistoryActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountSyncHistoryActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountSyncHistoryActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="AccountSyncHistoryActivity onCreate" type="setContentView" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.account.AccountSyncHistoryActivity: void setContentView(int)&gt;(2130903046)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.preferences.BackupPreferencesActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.BackupPreferencesActivity$1: boolean onPreferenceClick(android.preference.Preference)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.BackupPreferencesActivity$1: boolean onPreferenceClick(android.preference.Preference)&gt;,boolean onPreferenceClick(android.preference.Preference)"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.BackupPreferencesActivity"/>  
      <destinition name="eu.vranckaert.worktime.utils.file.DirectoryPicker"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.BackupPreferencesActivity$1: boolean onPreferenceClick(android.preference.Preference)&gt;"/>  
        <node method="BackupPreferencesActivity$1 onPreferenceClick" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="BackupPreferencesActivity$1 onPreferenceClick" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r4, class &quot;Leu/vranckaert/worktime/utils/file/DirectoryPicker;&quot;)"/>  
        <node method="BackupPreferencesActivity$1 onPreferenceClick" type="PassOutIntent" unit="virtualinvoke $r4.&lt;eu.vranckaert.worktime.activities.preferences.BackupPreferencesActivity: void startActivityForResult(android.content.Intent,int)&gt;(r2, 43522432)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.tasks.SelectTaskActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.tasks.SelectTaskActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.tasks.SelectTaskActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="eu.vranckaert.worktime.activities.tasks.SelectTaskActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.tasks.SelectTaskActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="SelectTaskActivity onCreate" type="CreateMethod" unit="r2 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="org.acra.ErrorReporter"> 
    <intentSummary> 
      <method value="&lt;org.acra.ErrorReporter: void checkReportsOnApplicationStart()&gt;"/>  
      <methodtrace value="&lt;org.acra.ErrorReporter: void checkReportsOnApplicationStart()&gt;,&lt;org.acra.ErrorReporter: void notifyDialog(java.lang.String)&gt;,void notifyDialog(java.lang.String)"/>  
      <source name="org.acra.ErrorReporter"/>  
      <destinition name="org.acra.CrashReportDialog"/>  
      <nodes> 
        <node method="&lt;org.acra.ErrorReporter: void checkReportsOnApplicationStart()&gt;"/>  
        <node method="&lt;org.acra.ErrorReporter: void notifyDialog(java.lang.String)&gt;"/>  
        <node method="ErrorReporter notifyDialog" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="ErrorReporter notifyDialog" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r6, class &quot;Lorg/acra/CrashReportDialog;&quot;)"/>  
        <node method="ErrorReporter notifyDialog" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/>  
        <node method="ErrorReporter notifyDialog" type="PassOutIntent" unit="virtualinvoke $r6.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;org.acra.ErrorReporter: void checkReportsOnApplicationStart()&gt;"/>  
      <methodtrace value="&lt;org.acra.ErrorReporter: void checkReportsOnApplicationStart()&gt;,&lt;org.acra.ErrorReporter: void notifySendReport(java.lang.String)&gt;,void notifySendReport(java.lang.String)"/>  
      <source name="org.acra.ErrorReporter"/>  
      <destinition name="org.acra.CrashReportDialog"/>  
      <nodes> 
        <node method="&lt;org.acra.ErrorReporter: void checkReportsOnApplicationStart()&gt;"/>  
        <node method="&lt;org.acra.ErrorReporter: void notifySendReport(java.lang.String)&gt;"/>  
        <node method="ErrorReporter notifySendReport" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="ErrorReporter notifySendReport" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r4, class &quot;Lorg/acra/CrashReportDialog;&quot;)"/>  
        <node method="ErrorReporter notifySendReport" type="PassOutIntent" unit="virtualinvoke r2.&lt;android.app.Notification: void setLatestEventInfo(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,android.app.PendingIntent)&gt;($r4, $r8, $r9, $r13)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="org.acra.ErrorReporter"> 
    <intentSummary> 
      <method value="&lt;org.acra.ErrorReporter: void &lt;init&gt;(android.content.Context,android.content.SharedPreferences,boolean)&gt;"/>  
      <methodtrace value="&lt;org.acra.ErrorReporter: void &lt;init&gt;(android.content.Context,android.content.SharedPreferences,boolean)&gt;,&lt;org.acra.ErrorReporter: void checkReportsOnApplicationStart()&gt;,&lt;org.acra.ErrorReporter: void notifyDialog(java.lang.String)&gt;,void notifyDialog(java.lang.String)"/>  
      <source name="org.acra.ErrorReporter"/>  
      <destinition name="org.acra.CrashReportDialog"/>  
      <nodes> 
        <node method="&lt;org.acra.ErrorReporter: void &lt;init&gt;(android.content.Context,android.content.SharedPreferences,boolean)&gt;"/>  
        <node method="&lt;org.acra.ErrorReporter: void checkReportsOnApplicationStart()&gt;"/>  
        <node method="&lt;org.acra.ErrorReporter: void notifyDialog(java.lang.String)&gt;"/>  
        <node method="ErrorReporter notifyDialog" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="ErrorReporter notifyDialog" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r6, class &quot;Lorg/acra/CrashReportDialog;&quot;)"/>  
        <node method="ErrorReporter notifyDialog" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/>  
        <node method="ErrorReporter notifyDialog" type="PassOutIntent" unit="virtualinvoke $r6.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;org.acra.ErrorReporter: void &lt;init&gt;(android.content.Context,android.content.SharedPreferences,boolean)&gt;"/>  
      <methodtrace value="&lt;org.acra.ErrorReporter: void &lt;init&gt;(android.content.Context,android.content.SharedPreferences,boolean)&gt;,&lt;org.acra.ErrorReporter: void checkReportsOnApplicationStart()&gt;,&lt;org.acra.ErrorReporter: void notifySendReport(java.lang.String)&gt;,void notifySendReport(java.lang.String)"/>  
      <source name="org.acra.ErrorReporter"/>  
      <destinition name="org.acra.CrashReportDialog"/>  
      <nodes> 
        <node method="&lt;org.acra.ErrorReporter: void &lt;init&gt;(android.content.Context,android.content.SharedPreferences,boolean)&gt;"/>  
        <node method="&lt;org.acra.ErrorReporter: void checkReportsOnApplicationStart()&gt;"/>  
        <node method="&lt;org.acra.ErrorReporter: void notifySendReport(java.lang.String)&gt;"/>  
        <node method="ErrorReporter notifySendReport" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="ErrorReporter notifySendReport" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r4, class &quot;Lorg/acra/CrashReportDialog;&quot;)"/>  
        <node method="ErrorReporter notifySendReport" type="PassOutIntent" unit="virtualinvoke r2.&lt;android.app.Notification: void setLatestEventInfo(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,android.app.PendingIntent)&gt;($r4, $r8, $r9, $r13)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="roboguice.activity.RoboAccountAuthenticatorActivity"> 
    <intentSummary> 
      <method value="&lt;roboguice.activity.RoboAccountAuthenticatorActivity: void onNewIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.activity.RoboAccountAuthenticatorActivity: void onNewIntent(android.content.Intent)&gt;,void onNewIntent(android.content.Intent)"/>  
      <source name="roboguice.activity.RoboAccountAuthenticatorActivity"/>  
      <nodes> 
        <node method="&lt;roboguice.activity.RoboAccountAuthenticatorActivity: void onNewIntent(android.content.Intent)&gt;"/>  
        <node method="RoboAccountAuthenticatorActivity onNewIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;,void handleReceive(android.content.Context,android.content.Intent), &lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <source name="eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="AlarmSyncInitBroadcastReceiver handleReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;,void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;, &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;,void handleReceive(android.content.Context,android.content.Intent), &lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <source name="eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;,&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;,void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date)&gt;"/>  
      <source name="eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="ReceiveIntentFromRetValue" unit="$r9 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="ReceiveIntentFromRetValue" unit="$r9 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="PassOutIntent" unit="virtualinvoke $r8.&lt;android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)&gt;(0, $l1, 86400000L, $r9)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date)&gt;,void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;, &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date)&gt;"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="ReceiveIntentFromRetValue" unit="$r9 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="PassOutIntent" unit="virtualinvoke $r8.&lt;android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)&gt;(0, $l1, 86400000L, $r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date)&gt;,void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;, &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;,void handleReceive(android.content.Context,android.content.Intent), &lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <source name="eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="AlarmSyncInitBroadcastReceiver handleReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;,void removeAllSyncAlarms(android.content.Context), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;,android.app.PendingIntent getSyncOperation(android.content.Context,int)"/>  
      <source name="eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;,void removeAllSyncAlarms(android.content.Context), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;,&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;,void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
      <source name="eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="ReceiveIntentFromRetValue" unit="$r7 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="ReceiveIntentFromRetValue" unit="$r7 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="PassOutIntent" unit="virtualinvoke $r6.&lt;android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)&gt;(0, l1, $l0, $r7)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;,void handleReceive(android.content.Context,android.content.Intent), &lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <source name="eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="ReceiveIntentFromRetValue" unit="$r9 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="ReceiveIntentFromRetValue" unit="$r9 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="PassOutIntent" unit="virtualinvoke $r8.&lt;android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)&gt;(0, $l1, 86400000L, $r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;,void handleReceive(android.content.Context,android.content.Intent), &lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <source name="eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="AlarmSyncInitBroadcastReceiver handleReceive" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;,&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;,void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
      <source name="eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;,void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;"/>  
      <source name="eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;,void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;, &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="ReceiveIntentFromRetValue" unit="$r7 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="PassOutIntent" unit="virtualinvoke $r6.&lt;android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)&gt;(0, l1, $l0, $r7)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;,void handleReceive(android.content.Context,android.content.Intent), &lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <source name="eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.broadcastreceiver.AlarmSyncInitBroadcastReceiver: void handleReceive(android.content.Context,android.content.Intent)&gt;"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="ReceiveIntentFromRetValue" unit="$r7 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="ReceiveIntentFromRetValue" unit="$r7 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="PassOutIntent" unit="virtualinvoke $r6.&lt;android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)&gt;(0, l1, $l0, $r7)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.about.AboutActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.about.AboutActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.about.AboutActivity: void onCreate(android.os.Bundle)&gt;,&lt;eu.vranckaert.worktime.activities.about.AboutActivity: java.util.List createElementList()&gt;,&lt;eu.vranckaert.worktime.activities.about.AboutListElement: void &lt;init&gt;(int,java.lang.String,android.content.Intent)&gt;,void &lt;init&gt;(int,java.lang.String,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.activities.about.AboutActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.about.AboutActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.about.AboutActivity: java.util.List createElementList()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.about.AboutListElement: void &lt;init&gt;(int,java.lang.String,android.content.Intent)&gt;"/>  
        <node method="AboutListElement &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="AboutListElement &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="AboutListElement &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="AboutListElement &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.about.AboutActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.about.AboutActivity: void onCreate(android.os.Bundle)&gt;,&lt;eu.vranckaert.worktime.activities.about.AboutActivity: java.util.List createElementList()&gt;,java.util.List createElementList(), &lt;eu.vranckaert.worktime.activities.about.AboutListElement: void &lt;init&gt;(int,java.lang.String,android.content.Intent)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.about.AboutActivity"/>  
      <sender action="android.intent.action.VIEW" data="http://www.apache.org/licenses/LICENSE-2.0"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.about.AboutActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.about.AboutActivity: java.util.List createElementList()&gt;"/>  
        <node method="AboutActivity createElementList" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="AboutActivity createElementList" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="AboutActivity createElementList" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r5)"/>  
        <node method="AboutListElement &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="AboutActivity createElementList" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="AboutActivity createElementList" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.about.AboutActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.about.AboutActivity: void onCreate(android.os.Bundle)&gt;,&lt;eu.vranckaert.worktime.activities.about.AboutActivity: java.util.List createElementList()&gt;,&lt;eu.vranckaert.worktime.activities.about.AboutListElement: void &lt;init&gt;(int,java.lang.String,android.content.Intent)&gt;,void &lt;init&gt;(int,java.lang.String,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.activities.about.AboutActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.about.AboutActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.about.AboutActivity: java.util.List createElementList()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.about.AboutListElement: void &lt;init&gt;(int,java.lang.String,android.content.Intent)&gt;"/>  
        <node method="AboutListElement &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="AboutListElement &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="AboutListElement &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.about.AboutActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.about.AboutActivity: void onCreate(android.os.Bundle)&gt;,&lt;eu.vranckaert.worktime.activities.about.AboutActivity: java.util.List createElementList()&gt;,java.util.List createElementList(), &lt;eu.vranckaert.worktime.activities.about.AboutListElement: void &lt;init&gt;(int,java.lang.String,android.content.Intent)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.about.AboutActivity"/>  
      <destinition name="eu.vranckaert.worktime.utils.donations.DonationsActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.about.AboutActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.about.AboutActivity: java.util.List createElementList()&gt;"/>  
        <node method="AboutActivity createElementList" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="AboutActivity createElementList" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/utils/donations/DonationsActivity;&quot;)"/>  
        <node method="AboutListElement &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="AboutActivity createElementList" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="AboutActivity createElementList" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.about.AboutActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.about.AboutActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="eu.vranckaert.worktime.activities.about.AboutActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.about.AboutActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="AboutActivity onCreate" type="setContentView" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.about.AboutActivity: void setContentView(int)&gt;(2130903042)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.about.AboutActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.about.AboutActivity: void onCreate(android.os.Bundle)&gt;,&lt;eu.vranckaert.worktime.activities.about.AboutActivity: java.util.List createElementList()&gt;,java.util.List createElementList(), &lt;eu.vranckaert.worktime.activities.about.AboutListElement: void &lt;init&gt;(int,java.lang.String,android.content.Intent)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.about.AboutActivity"/>  
      <sender action="android.intent.action.VIEW" data="http://code.google.com/p/worktime/issues/entry"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.about.AboutActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.about.AboutActivity: java.util.List createElementList()&gt;"/>  
        <node method="AboutActivity createElementList" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="AboutActivity createElementList" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="AboutActivity createElementList" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r5)"/>  
        <node method="AboutListElement &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="AboutActivity createElementList" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="AboutActivity createElementList" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.about.AboutActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.about.AboutActivity: void onCreate(android.os.Bundle)&gt;,&lt;eu.vranckaert.worktime.activities.about.AboutActivity: java.util.List createElementList()&gt;,java.util.List createElementList(), &lt;eu.vranckaert.worktime.activities.about.AboutListElement: void &lt;init&gt;(int,java.lang.String,android.content.Intent)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.about.AboutActivity"/>  
      <sender action="android.intent.action.VIEW" data="http://code.google.com/p/worktime/"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.about.AboutActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.about.AboutActivity: java.util.List createElementList()&gt;"/>  
        <node method="AboutActivity createElementList" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="AboutActivity createElementList" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;android.intent.action.VIEW&quot;)"/>  
        <node method="AboutActivity createElementList" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setData(android.net.Uri)&gt;($r5)"/>  
        <node method="AboutListElement &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="AboutActivity createElementList" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="AboutActivity createElementList" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="roboguice.activity.RoboTabActivity"> 
    <intentSummary> 
      <method value="&lt;roboguice.activity.RoboTabActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.activity.RoboTabActivity: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent), &lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
      <source name="roboguice.activity.RoboTabActivity"/>  
      <nodes> 
        <node method="&lt;roboguice.activity.RoboTabActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="RoboTabActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="RoboTabActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.activity.RoboTabActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.activity.RoboTabActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;,void &lt;init&gt;(int,int,android.content.Intent)"/>  
      <source name="roboguice.activity.RoboTabActivity"/>  
      <nodes> 
        <node method="&lt;roboguice.activity.RoboTabActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.activity.RoboTabActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.activity.RoboTabActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;,void &lt;init&gt;(int,int,android.content.Intent)"/>  
      <source name="roboguice.activity.RoboTabActivity"/>  
      <nodes> 
        <node method="&lt;roboguice.activity.RoboTabActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationSplitActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationSplitActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationSplitActivity: void onCreate(android.os.Bundle)&gt;,&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedWizardActivity: void onCreate(android.os.Bundle)&gt;,&lt;eu.vranckaert.worktime.utils.wizard.WizardActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationSplitActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationSplitActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedWizardActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.wizard.WizardActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="WizardActivity onCreate" type="setContentView" unit="specialinvoke r0.&lt;eu.vranckaert.worktime.utils.view.actionbar.ActionBarGuiceActivity: void setContentView(int)&gt;(2130903089)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.donations.google.BillingService"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean checkBillingSupported()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean checkBillingSupported()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;,boolean bindToMarketBillingService()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <destinition name="interICC_com.android.vending.billing.MarketBillingService.BIND, "/>  
      <sender action="com.android.vending.billing.MarketBillingService.BIND"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean checkBillingSupported()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
        <node method="BillingService bindToMarketBillingService" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="BillingService bindToMarketBillingService" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.android.vending.billing.MarketBillingService.BIND&quot;)"/>  
        <node method="BillingService bindToMarketBillingService" type="PassOutIntent" unit="$z0 = virtualinvoke r0.&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)&gt;($r2, r0, 1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean checkBillingSupported()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean checkBillingSupported()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;,boolean bindToMarketBillingService()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <sender action="com.android.vending.billing.MarketBillingService.BIND"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean checkBillingSupported()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
        <node method="BillingService bindToMarketBillingService" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="BillingService bindToMarketBillingService" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.android.vending.billing.MarketBillingService.BIND&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean checkBillingSupported()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean checkBillingSupported()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;,boolean bindToMarketBillingService()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean checkBillingSupported()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
        <node method="BillingService bindToMarketBillingService" type="CreateMethod" unit="$r2 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.projects.ManageProjectsActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="eu.vranckaert.worktime.activities.projects.ManageProjectsActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="ManageProjectsActivity onCreate" type="setContentView" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.projects.ManageProjectsActivity: void setContentView(int)&gt;(2130903053)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.projects.CopyProjectActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.projects.CopyProjectActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.projects.CopyProjectActivity: void onCreate(android.os.Bundle)&gt;,&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedWizardActivity: void onCreate(android.os.Bundle)&gt;,&lt;eu.vranckaert.worktime.utils.wizard.WizardActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="eu.vranckaert.worktime.activities.projects.CopyProjectActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.projects.CopyProjectActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedWizardActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.wizard.WizardActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="WizardActivity onCreate" type="setContentView" unit="specialinvoke r0.&lt;eu.vranckaert.worktime.utils.view.actionbar.ActionBarGuiceActivity: void setContentView(int)&gt;(2130903089)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.preferences.PreferencesActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.PreferencesActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.PreferencesActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.PreferencesActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.PreferencesActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="PreferencesActivity onCreate" type="setContentView" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.preferences.PreferencesActivity: void setContentView(int)&gt;(2130903054)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="roboguice.activity.RoboActivity"> 
    <intentSummary> 
      <method value="&lt;roboguice.activity.RoboActivity: void onNewIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.activity.RoboActivity: void onNewIntent(android.content.Intent)&gt;,void onNewIntent(android.content.Intent)"/>  
      <source name="roboguice.activity.RoboActivity"/>  
      <nodes> 
        <node method="&lt;roboguice.activity.RoboActivity: void onNewIntent(android.content.Intent)&gt;"/>  
        <node method="RoboActivity onNewIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGuiceActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGuiceActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGuiceActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;roboguice.activity.RoboActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;,void &lt;init&gt;(int,int,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGuiceActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGuiceActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;roboguice.activity.RoboActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGuiceActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGuiceActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;roboguice.activity.RoboActivity: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent), &lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
      <source name="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGuiceActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGuiceActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;roboguice.activity.RoboActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="RoboActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="RoboActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGuiceActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGuiceActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;roboguice.activity.RoboActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;,void &lt;init&gt;(int,int,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGuiceActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGuiceActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;roboguice.activity.RoboActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGuiceActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGuiceActivity: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent), &lt;roboguice.activity.RoboActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <source name="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGuiceActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGuiceActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="SyncLockedGuiceActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="RoboActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="SyncLockedGuiceActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGenericPreferenceActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGenericPreferenceActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGenericPreferenceActivity: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent), &lt;roboguice.activity.RoboPreferenceActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <source name="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGenericPreferenceActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGenericPreferenceActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="SyncLockedGenericPreferenceActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="RoboPreferenceActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="SyncLockedGenericPreferenceActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGenericPreferenceActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGenericPreferenceActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;roboguice.activity.RoboPreferenceActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;,void &lt;init&gt;(int,int,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGenericPreferenceActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGenericPreferenceActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;roboguice.activity.RoboPreferenceActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGenericPreferenceActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGenericPreferenceActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;roboguice.activity.RoboPreferenceActivity: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent), &lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
      <source name="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGenericPreferenceActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGenericPreferenceActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;roboguice.activity.RoboPreferenceActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="RoboPreferenceActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="RoboPreferenceActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGenericPreferenceActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGenericPreferenceActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;roboguice.activity.RoboPreferenceActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;,void &lt;init&gt;(int,int,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGenericPreferenceActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedGenericPreferenceActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;roboguice.activity.RoboPreferenceActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.reporting.ReportingCriteriaActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.reporting.ReportingCriteriaActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.reporting.ReportingCriteriaActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;,&lt;eu.vranckaert.worktime.activities.reporting.ReportingCriteriaActivity: void generateReport()&gt;,void generateReport()"/>  
      <source name="eu.vranckaert.worktime.activities.reporting.ReportingCriteriaActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.reporting.ReportingResultActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.reporting.ReportingCriteriaActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.reporting.ReportingCriteriaActivity: void generateReport()&gt;"/>  
        <node method="ReportingCriteriaActivity generateReport" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="ReportingCriteriaActivity generateReport" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/reporting/ReportingResultActivity;&quot;)"/>  
        <node method="ReportingCriteriaActivity generateReport" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.reporting.ReportingCriteriaActivity: void startActivity(android.content.Intent)&gt;(r1)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.account.AccountProfileActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountProfileActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountProfileActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;,boolean onOptionsItemSelected(android.view.MenuItem)"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountProfileActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountProfileActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
        <node method="AccountProfileActivity onOptionsItemSelected" type="CreateMethod" unit="r4 = new android.content.Intent"/>  
        <node method="AccountProfileActivity onOptionsItemSelected" type="SetAttribute" unit="specialinvoke r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/>  
        <node method="AccountProfileActivity onOptionsItemSelected" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.account.AccountProfileActivity: android.content.ComponentName startService(android.content.Intent)&gt;(r4)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountProfileActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountProfileActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;,boolean onOptionsItemSelected(android.view.MenuItem)"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountProfileActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountProfileActivity: boolean onOptionsItemSelected(android.view.MenuItem)&gt;"/>  
        <node method="AccountProfileActivity onOptionsItemSelected" type="CreateMethod" unit="r4 = new android.content.Intent"/>  
        <node method="AccountProfileActivity onOptionsItemSelected" type="SetAttribute" unit="specialinvoke r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/preferences/AccountSyncPreferencesActivity;&quot;)"/>  
        <node method="AccountProfileActivity onOptionsItemSelected" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.account.AccountProfileActivity: void startActivity(android.content.Intent)&gt;(r4)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity: void onCreate(android.os.Bundle)&gt;,&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity: void showTaskChooser()&gt;,void showTaskChooser()"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.tasks.SelectTaskActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity: void showTaskChooser()&gt;"/>  
        <node method="TimeRegistrationPunchInActivity showTaskChooser" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="TimeRegistrationPunchInActivity showTaskChooser" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/tasks/SelectTaskActivity;&quot;)"/>  
        <node method="TimeRegistrationPunchInActivity showTaskChooser" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity: void startActivityForResult(android.content.Intent,int)&gt;(r1, 13)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity: void onCreate(android.os.Bundle)&gt;,&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity: void showProjectChooser()&gt;,void showProjectChooser()"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.projects.SelectProjectActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity: void showProjectChooser()&gt;"/>  
        <node method="TimeRegistrationPunchInActivity showProjectChooser" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="TimeRegistrationPunchInActivity showProjectChooser" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/projects/SelectProjectActivity;&quot;)"/>  
        <node method="TimeRegistrationPunchInActivity showProjectChooser" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchInActivity: void startActivityForResult(android.content.Intent,int)&gt;(r1, 11)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.account.AccountLoginActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;,void onPostExecute(java.lang.Void), &lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountLoginActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;,void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;, &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountLoginActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;,&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;,void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountLoginActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="ReceiveIntentFromRetValue" unit="$r9 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="ReceiveIntentFromRetValue" unit="$r9 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="PassOutIntent" unit="virtualinvoke $r8.&lt;android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)&gt;(0, $l1, 86400000L, $r9)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date)&gt;,void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;, &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountLoginActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date)&gt;"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="ReceiveIntentFromRetValue" unit="$r9 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="PassOutIntent" unit="virtualinvoke $r8.&lt;android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)&gt;(0, $l1, 86400000L, $r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date)&gt;,void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;, &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountLoginActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;,void onPostExecute(java.lang.Void), &lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountLoginActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="ReceiveIntentFromRetValue" unit="$r7 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="ReceiveIntentFromRetValue" unit="$r7 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="PassOutIntent" unit="virtualinvoke $r6.&lt;android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)&gt;(0, l1, $l0, $r7)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;,void removeAllSyncAlarms(android.content.Context), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountLoginActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;,void onPostExecute(java.lang.Void), &lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountLoginActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="ReceiveIntentFromRetValue" unit="$r9 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="ReceiveIntentFromRetValue" unit="$r9 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="PassOutIntent" unit="virtualinvoke $r8.&lt;android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)&gt;(0, $l1, 86400000L, $r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;,android.app.PendingIntent getSyncOperation(android.content.Context,int)"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountLoginActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;,void onPostExecute(java.lang.Void), &lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountLoginActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;,void removeAllSyncAlarms(android.content.Context), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountLoginActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;,&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;,void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountLoginActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="ReceiveIntentFromRetValue" unit="$r7 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="ReceiveIntentFromRetValue" unit="$r7 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="PassOutIntent" unit="virtualinvoke $r6.&lt;android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)&gt;(0, l1, $l0, $r7)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;,&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;,void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountLoginActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;,void onPostExecute(java.lang.Void), &lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountLoginActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountProfileActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="AccountLoginActivity$LoginTask onPostExecute" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="AccountLoginActivity$LoginTask onPostExecute" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Leu/vranckaert/worktime/activities/account/AccountProfileActivity;&quot;)"/>  
        <node method="AccountLoginActivity$LoginTask onPostExecute" type="PassOutIntent" unit="virtualinvoke $r3.&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity: void startActivityForResult(android.content.Intent,int)&gt;(r2, 14)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;,void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountLoginActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;,void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;, &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountLoginActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="ReceiveIntentFromRetValue" unit="$r7 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="PassOutIntent" unit="virtualinvoke $r6.&lt;android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)&gt;(0, l1, $l0, $r7)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;,void onPostExecute(java.lang.Void), &lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountLoginActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountLoginActivity$LoginTask: void onPostExecute(java.lang.Void)&gt;"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.HomeActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.HomeActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.HomeActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="eu.vranckaert.worktime.activities.HomeActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.HomeActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="HomeActivity onCreate" type="setContentView" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.HomeActivity: void setContentView(int)&gt;(2130903052)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="roboguice.activity.RoboExpandableListActivity"> 
    <intentSummary> 
      <method value="&lt;roboguice.activity.RoboExpandableListActivity: void onNewIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.activity.RoboExpandableListActivity: void onNewIntent(android.content.Intent)&gt;,void onNewIntent(android.content.Intent)"/>  
      <source name="roboguice.activity.RoboExpandableListActivity"/>  
      <nodes> 
        <node method="&lt;roboguice.activity.RoboExpandableListActivity: void onNewIntent(android.content.Intent)&gt;"/>  
        <node method="RoboExpandableListActivity onNewIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="roboguice.activity.RoboTabActivity"> 
    <intentSummary> 
      <method value="&lt;roboguice.activity.RoboTabActivity: void onNewIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.activity.RoboTabActivity: void onNewIntent(android.content.Intent)&gt;,void onNewIntent(android.content.Intent)"/>  
      <source name="roboguice.activity.RoboTabActivity"/>  
      <nodes> 
        <node method="&lt;roboguice.activity.RoboTabActivity: void onNewIntent(android.content.Intent)&gt;"/>  
        <node method="RoboTabActivity onNewIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.donations.google.BillingService"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RestoreTransactions: boolean runRequest()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RestoreTransactions: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;,boolean bindToMarketBillingService()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <destinition name="interICC_com.android.vending.billing.MarketBillingService.BIND, "/>  
      <sender action="com.android.vending.billing.MarketBillingService.BIND"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RestoreTransactions: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
        <node method="BillingService bindToMarketBillingService" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="BillingService bindToMarketBillingService" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.android.vending.billing.MarketBillingService.BIND&quot;)"/>  
        <node method="BillingService bindToMarketBillingService" type="PassOutIntent" unit="$z0 = virtualinvoke r0.&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)&gt;($r2, r0, 1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RestoreTransactions: boolean runRequest()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RestoreTransactions: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;,boolean bindToMarketBillingService()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <sender action="com.android.vending.billing.MarketBillingService.BIND"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RestoreTransactions: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
        <node method="BillingService bindToMarketBillingService" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="BillingService bindToMarketBillingService" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.android.vending.billing.MarketBillingService.BIND&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RestoreTransactions: boolean runRequest()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RestoreTransactions: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;,boolean bindToMarketBillingService()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RestoreTransactions: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
        <node method="BillingService bindToMarketBillingService" type="CreateMethod" unit="$r2 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;roboguice.activity.RoboActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;,void &lt;init&gt;(int,int,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;roboguice.activity.RoboActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;roboguice.activity.RoboActivity: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent), &lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
      <source name="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;roboguice.activity.RoboActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="RoboActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="RoboActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedActivity: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent), &lt;roboguice.activity.RoboActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <source name="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="SyncLockedActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="RoboActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="SyncLockedActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;roboguice.activity.RoboActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;,void &lt;init&gt;(int,int,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;roboguice.activity.RoboActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="roboguice.activity.RoboActivityGroup"> 
    <intentSummary> 
      <method value="&lt;roboguice.activity.RoboActivityGroup: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.activity.RoboActivityGroup: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent), &lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
      <source name="roboguice.activity.RoboActivityGroup"/>  
      <nodes> 
        <node method="&lt;roboguice.activity.RoboActivityGroup: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="RoboActivityGroup onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="RoboActivityGroup onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.activity.RoboActivityGroup: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.activity.RoboActivityGroup: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;,void &lt;init&gt;(int,int,android.content.Intent)"/>  
      <source name="roboguice.activity.RoboActivityGroup"/>  
      <nodes> 
        <node method="&lt;roboguice.activity.RoboActivityGroup: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.activity.RoboActivityGroup: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.activity.RoboActivityGroup: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;,void &lt;init&gt;(int,int,android.content.Intent)"/>  
      <source name="roboguice.activity.RoboActivityGroup"/>  
      <nodes> 
        <node method="&lt;roboguice.activity.RoboActivityGroup: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="roboguice.activity.RoboExpandableListActivity"> 
    <intentSummary> 
      <method value="&lt;roboguice.activity.RoboExpandableListActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.activity.RoboExpandableListActivity: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent), &lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
      <source name="roboguice.activity.RoboExpandableListActivity"/>  
      <nodes> 
        <node method="&lt;roboguice.activity.RoboExpandableListActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="RoboExpandableListActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="RoboExpandableListActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.activity.RoboExpandableListActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.activity.RoboExpandableListActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;,void &lt;init&gt;(int,int,android.content.Intent)"/>  
      <source name="roboguice.activity.RoboExpandableListActivity"/>  
      <nodes> 
        <node method="&lt;roboguice.activity.RoboExpandableListActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;roboguice.activity.RoboExpandableListActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.activity.RoboExpandableListActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;,void &lt;init&gt;(int,int,android.content.Intent)"/>  
      <source name="roboguice.activity.RoboExpandableListActivity"/>  
      <nodes> 
        <node method="&lt;roboguice.activity.RoboExpandableListActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="roboguice.activity.RoboListActivity"> 
    <intentSummary> 
      <method value="&lt;roboguice.activity.RoboListActivity: void onNewIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.activity.RoboListActivity: void onNewIntent(android.content.Intent)&gt;,void onNewIntent(android.content.Intent)"/>  
      <source name="roboguice.activity.RoboListActivity"/>  
      <nodes> 
        <node method="&lt;roboguice.activity.RoboListActivity: void onNewIntent(android.content.Intent)&gt;"/>  
        <node method="RoboListActivity onNewIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.account.AccountRegisterActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountRegisterActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="AccountRegisterActivity onCreate" type="setContentView" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity: void setContentView(int)&gt;(2130903045)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedListActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedListActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedListActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;roboguice.activity.RoboListActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;,void &lt;init&gt;(int,int,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedListActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedListActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;roboguice.activity.RoboListActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedListActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedListActivity: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent), &lt;roboguice.activity.RoboListActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <source name="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedListActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedListActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="SyncLockedListActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="RoboListActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="SyncLockedListActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedListActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedListActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;roboguice.activity.RoboListActivity: void onActivityResult(int,int,android.content.Intent)&gt;,void onActivityResult(int,int,android.content.Intent), &lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
      <source name="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedListActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedListActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;roboguice.activity.RoboListActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="RoboListActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="RoboListActivity onActivityResult" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedListActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedListActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;roboguice.activity.RoboListActivity: void onActivityResult(int,int,android.content.Intent)&gt;,&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;,void &lt;init&gt;(int,int,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedListActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedListActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;roboguice.activity.RoboListActivity: void onActivityResult(int,int,android.content.Intent)&gt;"/>  
        <node method="&lt;roboguice.activity.event.OnActivityResultEvent: void &lt;init&gt;(int,int,android.content.Intent)&gt;"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/>  
        <node method="OnActivityResultEvent &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.file.DirectoryPicker"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.file.DirectoryPicker: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.file.DirectoryPicker: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="eu.vranckaert.worktime.utils.file.DirectoryPicker"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.file.DirectoryPicker: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="DirectoryPicker onCreate" type="setContentView" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.utils.file.DirectoryPicker: void setContentView(int)&gt;(2130903075)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="roboguice.activity.RoboActivityGroup"> 
    <intentSummary> 
      <method value="&lt;roboguice.activity.RoboActivityGroup: void onNewIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.activity.RoboActivityGroup: void onNewIntent(android.content.Intent)&gt;,void onNewIntent(android.content.Intent)"/>  
      <source name="roboguice.activity.RoboActivityGroup"/>  
      <nodes> 
        <node method="&lt;roboguice.activity.RoboActivityGroup: void onNewIntent(android.content.Intent)&gt;"/>  
        <node method="RoboActivityGroup onNewIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.account.AccountSyncService"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void onHandleIntent(android.content.Intent)&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void startSync()&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void handleResult(java.lang.Exception)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;,android.app.PendingIntent getSyncOperation(android.content.Context,int)"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void startSync()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void handleResult(java.lang.Exception)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void onHandleIntent(android.content.Intent)&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void startSync()&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void handleResult(java.lang.Exception)&gt;,void handleResult(java.lang.Exception), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void addAlarmSyncInFiveMinutes(android.content.Context)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void startSync()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void handleResult(java.lang.Exception)&gt;"/>  
        <node method="AlarmUtil addAlarmSyncInFiveMinutes" type="ReceiveIntentFromRetValue" unit="$r4 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil addAlarmSyncInFiveMinutes" type="PassOutIntent" unit="virtualinvoke $r2.&lt;android.app.AlarmManager: void set(int,long,android.app.PendingIntent)&gt;(0, $l0, $r4)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void onHandleIntent(android.content.Intent)&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void startSync()&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void handleResult(java.lang.Exception)&gt;,void handleResult(java.lang.Exception), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void addAlarmSyncInFiveMinutes(android.content.Context)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountLoginActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void startSync()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void handleResult(java.lang.Exception)&gt;"/>  
        <node method="AccountSyncService handleResult" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="AccountSyncService handleResult" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountLoginActivity;&quot;)"/>  
        <node method="AccountSyncService handleResult" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void onHandleIntent(android.content.Intent)&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void startSync()&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void handleResult(java.lang.Exception)&gt;,void handleResult(java.lang.Exception), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void addAlarmSyncInFiveMinutes(android.content.Context)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void startSync()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void handleResult(java.lang.Exception)&gt;"/>  
        <node method="AlarmUtil addAlarmSyncInFiveMinutes" type="ReceiveIntentFromRetValue" unit="$r4 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil addAlarmSyncInFiveMinutes" type="PassOutIntent" unit="virtualinvoke $r2.&lt;android.app.AlarmManager: void set(int,long,android.app.PendingIntent)&gt;(0, $l0, $r4)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="AccountSyncService onHandleIntent" type="ReceiveIntentFromRetValue" unit="$r1 = virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: android.content.Intent getIntent()&gt;()"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void onHandleIntent(android.content.Intent)&gt;,void onHandleIntent(android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="AccountSyncService onHandleIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void onHandleIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void onHandleIntent(android.content.Intent)&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void startSync()&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void handleResult(java.lang.Exception)&gt;,void handleResult(java.lang.Exception)"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountLoginActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void onHandleIntent(android.content.Intent)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void startSync()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void handleResult(java.lang.Exception)&gt;"/>  
        <node method="AccountSyncService handleResult" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="AccountSyncService handleResult" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountLoginActivity;&quot;)"/>  
        <node method="AccountSyncService handleResult" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.account.AccountSyncService: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="roboguice.activity.RoboPreferenceActivity"> 
    <intentSummary> 
      <method value="&lt;roboguice.activity.RoboPreferenceActivity: void onNewIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.activity.RoboPreferenceActivity: void onNewIntent(android.content.Intent)&gt;,void onNewIntent(android.content.Intent)"/>  
      <source name="roboguice.activity.RoboPreferenceActivity"/>  
      <nodes> 
        <node method="&lt;roboguice.activity.RoboPreferenceActivity: void onNewIntent(android.content.Intent)&gt;"/>  
        <node method="RoboPreferenceActivity onNewIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.account.AccountRegisterActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;,void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;, &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountRegisterActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;,void onPostExecute(java.lang.Void), &lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountRegisterActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;,&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;,void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountRegisterActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="ReceiveIntentFromRetValue" unit="$r9 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="ReceiveIntentFromRetValue" unit="$r9 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="PassOutIntent" unit="virtualinvoke $r8.&lt;android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)&gt;(0, $l1, 86400000L, $r9)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date)&gt;,void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;, &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountRegisterActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date)&gt;"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="ReceiveIntentFromRetValue" unit="$r9 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="PassOutIntent" unit="virtualinvoke $r8.&lt;android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)&gt;(0, $l1, 86400000L, $r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date)&gt;,void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;, &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountRegisterActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycleOnceADay(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,java.util.Date)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;,void onPostExecute(java.lang.Void), &lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountRegisterActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="ReceiveIntentFromRetValue" unit="$r7 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="ReceiveIntentFromRetValue" unit="$r7 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="PassOutIntent" unit="virtualinvoke $r6.&lt;android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)&gt;(0, l1, $l0, $r7)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;,void onPostExecute(java.lang.Void), &lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountRegisterActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;,void onPostExecute(java.lang.Void), &lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountRegisterActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;,void removeAllSyncAlarms(android.content.Context), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountRegisterActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;,android.app.PendingIntent getSyncOperation(android.content.Context,int)"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountRegisterActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;,void removeAllSyncAlarms(android.content.Context), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountRegisterActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;,&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;,void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountRegisterActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="ReceiveIntentFromRetValue" unit="$r7 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="ReceiveIntentFromRetValue" unit="$r7 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="PassOutIntent" unit="virtualinvoke $r6.&lt;android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)&gt;(0, l1, $l0, $r7)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;,&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;,void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountRegisterActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,long,java.util.Date,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;,void onPostExecute(java.lang.Void), &lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountRegisterActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="ReceiveIntentFromRetValue" unit="$r9 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="ReceiveIntentFromRetValue" unit="$r9 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil setAlarmSyncCycleOnceADay" type="PassOutIntent" unit="virtualinvoke $r8.&lt;android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)&gt;(0, $l1, 86400000L, $r9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;,void onPostExecute(java.lang.Void), &lt;eu.vranckaert.worktime.activities.preferences.AccountSyncPreferencesActivity: void scheduleAlarm(android.content.Context,eu.vranckaert.worktime.service.AccountService)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountRegisterActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountProfileActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="AccountRegisterActivity$RegisterTask onPostExecute" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="AccountRegisterActivity$RegisterTask onPostExecute" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r3, class &quot;Leu/vranckaert/worktime/activities/account/AccountProfileActivity;&quot;)"/>  
        <node method="AccountRegisterActivity$RegisterTask onPostExecute" type="PassOutIntent" unit="virtualinvoke $r3.&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity: void startActivityForResult(android.content.Intent,int)&gt;(r2, 14)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;,void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountRegisterActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil removeAllSyncAlarms" type="ReceiveIntentFromRetValue" unit="$r2 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9001)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Object)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Object)&gt;,&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;,&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;,void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long), &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void removeAllSyncAlarms(android.content.Context)&gt;, &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountRegisterActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.account.AccountSyncService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Object)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountRegisterActivity$RegisterTask: void onPostExecute(java.lang.Void)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: void setAlarmSyncCycle(android.content.Context,eu.vranckaert.worktime.model.SyncHistory,long)&gt;"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="ReceiveIntentFromRetValue" unit="$r7 = staticinvoke &lt;eu.vranckaert.worktime.utils.alarm.AlarmUtil: android.app.PendingIntent getSyncOperation(android.content.Context,int)&gt;($r0, 9000)"/>  
        <node method="AlarmUtil getSyncOperation" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="AlarmUtil getSyncOperation" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r0, class &quot;Leu/vranckaert/worktime/activities/account/AccountSyncService;&quot;)"/>  
        <node method="AlarmUtil setAlarmSyncCycle" type="PassOutIntent" unit="virtualinvoke $r6.&lt;android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)&gt;(0, l1, $l0, $r7)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="roboguice.activity.RoboMapActivity"> 
    <intentSummary> 
      <method value="&lt;roboguice.activity.RoboMapActivity: void onNewIntent(android.content.Intent)&gt;"/>  
      <methodtrace value="&lt;roboguice.activity.RoboMapActivity: void onNewIntent(android.content.Intent)&gt;,void onNewIntent(android.content.Intent)"/>  
      <source name="roboguice.activity.RoboMapActivity"/>  
      <nodes> 
        <node method="&lt;roboguice.activity.RoboMapActivity: void onNewIntent(android.content.Intent)&gt;"/>  
        <node method="RoboMapActivity onNewIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.tasks.AddEditTaskActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.tasks.AddEditTaskActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.tasks.AddEditTaskActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="eu.vranckaert.worktime.activities.tasks.AddEditTaskActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.tasks.AddEditTaskActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="AddEditTaskActivity onCreate" type="setContentView" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.tasks.AddEditTaskActivity: void setContentView(int)&gt;(2130903048)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="org.acra.ErrorReporter"> 
    <intentSummary> 
      <method value="&lt;org.acra.ErrorReporter: void handleException(java.lang.Throwable)&gt;"/>  
      <methodtrace value="&lt;org.acra.ErrorReporter: void handleException(java.lang.Throwable)&gt;,&lt;org.acra.ErrorReporter: void handleException(java.lang.Throwable,org.acra.ReportingInteractionMode,boolean,boolean)&gt;,&lt;org.acra.ErrorReporter: void notifySendReport(java.lang.String)&gt;,void notifySendReport(java.lang.String)"/>  
      <source name="org.acra.ErrorReporter"/>  
      <destinition name="org.acra.CrashReportDialog"/>  
      <nodes> 
        <node method="&lt;org.acra.ErrorReporter: void handleException(java.lang.Throwable)&gt;"/>  
        <node method="&lt;org.acra.ErrorReporter: void handleException(java.lang.Throwable,org.acra.ReportingInteractionMode,boolean,boolean)&gt;"/>  
        <node method="&lt;org.acra.ErrorReporter: void notifySendReport(java.lang.String)&gt;"/>  
        <node method="ErrorReporter notifySendReport" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="ErrorReporter notifySendReport" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r4, class &quot;Lorg/acra/CrashReportDialog;&quot;)"/>  
        <node method="ErrorReporter notifySendReport" type="PassOutIntent" unit="virtualinvoke r2.&lt;android.app.Notification: void setLatestEventInfo(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,android.app.PendingIntent)&gt;($r4, $r8, $r9, $r13)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;org.acra.ErrorReporter: void handleException(java.lang.Throwable)&gt;"/>  
      <methodtrace value="&lt;org.acra.ErrorReporter: void handleException(java.lang.Throwable)&gt;,&lt;org.acra.ErrorReporter: void handleException(java.lang.Throwable,org.acra.ReportingInteractionMode,boolean,boolean)&gt;,&lt;org.acra.ErrorReporter$3: void run()&gt;,&lt;org.acra.ErrorReporter: void notifyDialog(java.lang.String)&gt;,void notifyDialog(java.lang.String)"/>  
      <source name="org.acra.ErrorReporter"/>  
      <destinition name="org.acra.CrashReportDialog"/>  
      <nodes> 
        <node method="&lt;org.acra.ErrorReporter: void handleException(java.lang.Throwable)&gt;"/>  
        <node method="&lt;org.acra.ErrorReporter: void handleException(java.lang.Throwable,org.acra.ReportingInteractionMode,boolean,boolean)&gt;"/>  
        <node method="&lt;org.acra.ErrorReporter$3: void run()&gt;"/>  
        <node method="&lt;org.acra.ErrorReporter: void notifyDialog(java.lang.String)&gt;"/>  
        <node method="ErrorReporter notifyDialog" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="ErrorReporter notifyDialog" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r6, class &quot;Lorg/acra/CrashReportDialog;&quot;)"/>  
        <node method="ErrorReporter notifyDialog" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/>  
        <node method="ErrorReporter notifyDialog" type="PassOutIntent" unit="virtualinvoke $r6.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.preferences.BackupPreferencesActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.BackupPreferencesActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.BackupPreferencesActivity: void onCreate(android.os.Bundle)&gt;,&lt;eu.vranckaert.worktime.utils.activity.GenericPreferencesActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.BackupPreferencesActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.BackupPreferencesActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.activity.GenericPreferencesActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="GenericPreferencesActivity onCreate" type="setContentView" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.utils.activity.GenericPreferencesActivity: void setContentView(int)&gt;(2130903054)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.donations.google.BillingService"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean restoreTransactions()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean restoreTransactions()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RestoreTransactions: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;,boolean bindToMarketBillingService()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <destinition name="interICC_com.android.vending.billing.MarketBillingService.BIND, "/>  
      <sender action="com.android.vending.billing.MarketBillingService.BIND"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean restoreTransactions()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RestoreTransactions: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
        <node method="BillingService bindToMarketBillingService" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="BillingService bindToMarketBillingService" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.android.vending.billing.MarketBillingService.BIND&quot;)"/>  
        <node method="BillingService bindToMarketBillingService" type="PassOutIntent" unit="$z0 = virtualinvoke r0.&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)&gt;($r2, r0, 1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean restoreTransactions()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean restoreTransactions()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RestoreTransactions: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;,boolean bindToMarketBillingService()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <sender action="com.android.vending.billing.MarketBillingService.BIND"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean restoreTransactions()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RestoreTransactions: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
        <node method="BillingService bindToMarketBillingService" type="CreateMethod" unit="$r2 = new android.content.Intent"/>  
        <node method="BillingService bindToMarketBillingService" type="SetAttribute" unit="specialinvoke $r2.&lt;android.content.Intent: void &lt;init&gt;(java.lang.String)&gt;(&quot;com.android.vending.billing.MarketBillingService.BIND&quot;)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean restoreTransactions()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean restoreTransactions()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RestoreTransactions: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;,&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;,boolean bindToMarketBillingService()"/>  
      <source name="eu.vranckaert.worktime.utils.donations.google.BillingService"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean restoreTransactions()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$RestoreTransactions: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService$BillingRequest: boolean runRequest()&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean access$000(eu.vranckaert.worktime.utils.donations.google.BillingService)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.donations.google.BillingService: boolean bindToMarketBillingService()&gt;"/>  
        <node method="BillingService bindToMarketBillingService" type="CreateMethod" unit="$r2 = new android.content.Intent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: boolean onContextItemSelected(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: boolean onContextItemSelected(android.view.MenuItem)&gt;,&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: void openReportingCriteriaActivity(eu.vranckaert.worktime.model.Project,eu.vranckaert.worktime.model.Task)&gt;,void openReportingCriteriaActivity(eu.vranckaert.worktime.model.Project,eu.vranckaert.worktime.model.Task)"/>  
      <source name="eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.reporting.ReportingCriteriaActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: boolean onContextItemSelected(android.view.MenuItem)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: void openReportingCriteriaActivity(eu.vranckaert.worktime.model.Project,eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="ProjectDetailsActivity openReportingCriteriaActivity" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="ProjectDetailsActivity openReportingCriteriaActivity" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r4, class &quot;Leu/vranckaert/worktime/activities/reporting/ReportingCriteriaActivity;&quot;)"/>  
        <node method="ProjectDetailsActivity openReportingCriteriaActivity" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: void startActivity(android.content.Intent)&gt;(r3)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: boolean onContextItemSelected(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: boolean onContextItemSelected(android.view.MenuItem)&gt;,&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: void openEditTaskActivity(eu.vranckaert.worktime.model.Task)&gt;,void openEditTaskActivity(eu.vranckaert.worktime.model.Task)"/>  
      <source name="eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.tasks.AddEditTaskActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: boolean onContextItemSelected(android.view.MenuItem)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: void openEditTaskActivity(eu.vranckaert.worktime.model.Task)&gt;"/>  
        <node method="ProjectDetailsActivity openEditTaskActivity" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="ProjectDetailsActivity openEditTaskActivity" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/tasks/AddEditTaskActivity;&quot;)"/>  
        <node method="ProjectDetailsActivity openEditTaskActivity" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: void startActivityForResult(android.content.Intent,int)&gt;(r2, 9)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: boolean onContextItemSelected(android.view.MenuItem)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: boolean onContextItemSelected(android.view.MenuItem)&gt;,&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: void openAddTaskActivity()&gt;,void openAddTaskActivity()"/>  
      <source name="eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.tasks.AddEditTaskActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: boolean onContextItemSelected(android.view.MenuItem)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: void openAddTaskActivity()&gt;"/>  
        <node method="ProjectDetailsActivity openAddTaskActivity" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="ProjectDetailsActivity openAddTaskActivity" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/tasks/AddEditTaskActivity;&quot;)"/>  
        <node method="ProjectDetailsActivity openAddTaskActivity" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: void startActivityForResult(android.content.Intent,int)&gt;(r1, 7)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="org.acra.ErrorReporter"> 
    <intentSummary> 
      <method value="&lt;org.acra.ErrorReporter: void handleException(java.lang.Throwable,boolean)&gt;"/>  
      <methodtrace value="&lt;org.acra.ErrorReporter: void handleException(java.lang.Throwable,boolean)&gt;,&lt;org.acra.ErrorReporter: void handleException(java.lang.Throwable,org.acra.ReportingInteractionMode,boolean,boolean)&gt;,&lt;org.acra.ErrorReporter: void notifySendReport(java.lang.String)&gt;,void notifySendReport(java.lang.String)"/>  
      <source name="org.acra.ErrorReporter"/>  
      <destinition name="org.acra.CrashReportDialog"/>  
      <nodes> 
        <node method="&lt;org.acra.ErrorReporter: void handleException(java.lang.Throwable,boolean)&gt;"/>  
        <node method="&lt;org.acra.ErrorReporter: void handleException(java.lang.Throwable,org.acra.ReportingInteractionMode,boolean,boolean)&gt;"/>  
        <node method="&lt;org.acra.ErrorReporter: void notifySendReport(java.lang.String)&gt;"/>  
        <node method="ErrorReporter notifySendReport" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="ErrorReporter notifySendReport" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r4, class &quot;Lorg/acra/CrashReportDialog;&quot;)"/>  
        <node method="ErrorReporter notifySendReport" type="PassOutIntent" unit="virtualinvoke r2.&lt;android.app.Notification: void setLatestEventInfo(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,android.app.PendingIntent)&gt;($r4, $r8, $r9, $r13)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;org.acra.ErrorReporter: void handleException(java.lang.Throwable,boolean)&gt;"/>  
      <methodtrace value="&lt;org.acra.ErrorReporter: void handleException(java.lang.Throwable,boolean)&gt;,&lt;org.acra.ErrorReporter: void handleException(java.lang.Throwable,org.acra.ReportingInteractionMode,boolean,boolean)&gt;,&lt;org.acra.ErrorReporter$3: void run()&gt;,&lt;org.acra.ErrorReporter: void notifyDialog(java.lang.String)&gt;,void notifyDialog(java.lang.String)"/>  
      <source name="org.acra.ErrorReporter"/>  
      <destinition name="org.acra.CrashReportDialog"/>  
      <nodes> 
        <node method="&lt;org.acra.ErrorReporter: void handleException(java.lang.Throwable,boolean)&gt;"/>  
        <node method="&lt;org.acra.ErrorReporter: void handleException(java.lang.Throwable,org.acra.ReportingInteractionMode,boolean,boolean)&gt;"/>  
        <node method="&lt;org.acra.ErrorReporter$3: void run()&gt;"/>  
        <node method="&lt;org.acra.ErrorReporter: void notifyDialog(java.lang.String)&gt;"/>  
        <node method="ErrorReporter notifyDialog" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="ErrorReporter notifyDialog" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r6, class &quot;Lorg/acra/CrashReportDialog;&quot;)"/>  
        <node method="ErrorReporter notifyDialog" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/>  
        <node method="ErrorReporter notifyDialog" type="PassOutIntent" unit="virtualinvoke $r6.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.preferences.NotificationsPreferencesActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.preferences.NotificationsPreferencesActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.preferences.NotificationsPreferencesActivity: void onCreate(android.os.Bundle)&gt;,&lt;eu.vranckaert.worktime.utils.activity.GenericPreferencesActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="eu.vranckaert.worktime.activities.preferences.NotificationsPreferencesActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.preferences.NotificationsPreferencesActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.activity.GenericPreferencesActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="GenericPreferencesActivity onCreate" type="setContentView" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.utils.activity.GenericPreferencesActivity: void setContentView(int)&gt;(2130903054)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="org.acra.ErrorReporter"> 
    <intentSummary> 
      <method value="&lt;org.acra.ErrorReporter: void uncaughtException(java.lang.Thread,java.lang.Throwable)&gt;"/>  
      <methodtrace value="&lt;org.acra.ErrorReporter: void uncaughtException(java.lang.Thread,java.lang.Throwable)&gt;,&lt;org.acra.ErrorReporter: void handleException(java.lang.Throwable,org.acra.ReportingInteractionMode,boolean,boolean)&gt;,&lt;org.acra.ErrorReporter: void notifySendReport(java.lang.String)&gt;,void notifySendReport(java.lang.String)"/>  
      <source name="org.acra.ErrorReporter"/>  
      <destinition name="org.acra.CrashReportDialog"/>  
      <nodes> 
        <node method="&lt;org.acra.ErrorReporter: void uncaughtException(java.lang.Thread,java.lang.Throwable)&gt;"/>  
        <node method="&lt;org.acra.ErrorReporter: void handleException(java.lang.Throwable,org.acra.ReportingInteractionMode,boolean,boolean)&gt;"/>  
        <node method="&lt;org.acra.ErrorReporter: void notifySendReport(java.lang.String)&gt;"/>  
        <node method="ErrorReporter notifySendReport" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="ErrorReporter notifySendReport" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r4, class &quot;Lorg/acra/CrashReportDialog;&quot;)"/>  
        <node method="ErrorReporter notifySendReport" type="PassOutIntent" unit="virtualinvoke r2.&lt;android.app.Notification: void setLatestEventInfo(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,android.app.PendingIntent)&gt;($r4, $r8, $r9, $r13)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;org.acra.ErrorReporter: void uncaughtException(java.lang.Thread,java.lang.Throwable)&gt;"/>  
      <methodtrace value="&lt;org.acra.ErrorReporter: void uncaughtException(java.lang.Thread,java.lang.Throwable)&gt;,&lt;org.acra.ErrorReporter: void handleException(java.lang.Throwable,org.acra.ReportingInteractionMode,boolean,boolean)&gt;,&lt;org.acra.ErrorReporter$3: void run()&gt;,&lt;org.acra.ErrorReporter: void notifyDialog(java.lang.String)&gt;,void notifyDialog(java.lang.String)"/>  
      <source name="org.acra.ErrorReporter"/>  
      <destinition name="org.acra.CrashReportDialog"/>  
      <nodes> 
        <node method="&lt;org.acra.ErrorReporter: void uncaughtException(java.lang.Thread,java.lang.Throwable)&gt;"/>  
        <node method="&lt;org.acra.ErrorReporter: void handleException(java.lang.Throwable,org.acra.ReportingInteractionMode,boolean,boolean)&gt;"/>  
        <node method="&lt;org.acra.ErrorReporter$3: void run()&gt;"/>  
        <node method="&lt;org.acra.ErrorReporter: void notifyDialog(java.lang.String)&gt;"/>  
        <node method="ErrorReporter notifyDialog" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="ErrorReporter notifyDialog" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r6, class &quot;Lorg/acra/CrashReportDialog;&quot;)"/>  
        <node method="ErrorReporter notifyDialog" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/>  
        <node method="ErrorReporter notifyDialog" type="PassOutIntent" unit="virtualinvoke $r6.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="org.acra.ACRA"> 
    <intentSummary> 
      <method value="&lt;org.acra.ACRA: void init(android.app.Application)&gt;"/>  
      <methodtrace value="&lt;org.acra.ACRA: void init(android.app.Application)&gt;,&lt;org.acra.ErrorReporter: void &lt;init&gt;(android.content.Context,android.content.SharedPreferences,boolean)&gt;,&lt;org.acra.ErrorReporter: void checkReportsOnApplicationStart()&gt;,&lt;org.acra.ErrorReporter: void notifyDialog(java.lang.String)&gt;,void notifyDialog(java.lang.String)"/>  
      <source name="org.acra.ACRA"/>  
      <destinition name="org.acra.CrashReportDialog"/>  
      <nodes> 
        <node method="&lt;org.acra.ACRA: void init(android.app.Application)&gt;"/>  
        <node method="&lt;org.acra.ErrorReporter: void &lt;init&gt;(android.content.Context,android.content.SharedPreferences,boolean)&gt;"/>  
        <node method="&lt;org.acra.ErrorReporter: void checkReportsOnApplicationStart()&gt;"/>  
        <node method="&lt;org.acra.ErrorReporter: void notifyDialog(java.lang.String)&gt;"/>  
        <node method="ErrorReporter notifyDialog" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="ErrorReporter notifyDialog" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r6, class &quot;Lorg/acra/CrashReportDialog;&quot;)"/>  
        <node method="ErrorReporter notifyDialog" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/>  
        <node method="ErrorReporter notifyDialog" type="PassOutIntent" unit="virtualinvoke $r6.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;org.acra.ACRA: void init(android.app.Application)&gt;"/>  
      <methodtrace value="&lt;org.acra.ACRA: void init(android.app.Application)&gt;,&lt;org.acra.ErrorReporter: void &lt;init&gt;(android.content.Context,android.content.SharedPreferences,boolean)&gt;,&lt;org.acra.ErrorReporter: void checkReportsOnApplicationStart()&gt;,&lt;org.acra.ErrorReporter: void notifySendReport(java.lang.String)&gt;,void notifySendReport(java.lang.String)"/>  
      <source name="org.acra.ACRA"/>  
      <destinition name="org.acra.CrashReportDialog"/>  
      <nodes> 
        <node method="&lt;org.acra.ACRA: void init(android.app.Application)&gt;"/>  
        <node method="&lt;org.acra.ErrorReporter: void &lt;init&gt;(android.content.Context,android.content.SharedPreferences,boolean)&gt;"/>  
        <node method="&lt;org.acra.ErrorReporter: void checkReportsOnApplicationStart()&gt;"/>  
        <node method="&lt;org.acra.ErrorReporter: void notifySendReport(java.lang.String)&gt;"/>  
        <node method="ErrorReporter notifySendReport" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="ErrorReporter notifySendReport" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r4, class &quot;Lorg/acra/CrashReportDialog;&quot;)"/>  
        <node method="ErrorReporter notifySendReport" type="PassOutIntent" unit="virtualinvoke r2.&lt;android.app.Notification: void setLatestEventInfo(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,android.app.PendingIntent)&gt;($r4, $r8, $r9, $r13)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.guice.Application"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.guice.Application: void onCreate()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.guice.Application: void onCreate()&gt;,&lt;org.acra.ACRA: void init(android.app.Application)&gt;,&lt;org.acra.ErrorReporter: void &lt;init&gt;(android.content.Context,android.content.SharedPreferences,boolean)&gt;,&lt;org.acra.ErrorReporter: void checkReportsOnApplicationStart()&gt;,&lt;org.acra.ErrorReporter: void notifyDialog(java.lang.String)&gt;,void notifyDialog(java.lang.String)"/>  
      <source name="eu.vranckaert.worktime.guice.Application"/>  
      <destinition name="org.acra.CrashReportDialog"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.guice.Application: void onCreate()&gt;"/>  
        <node method="&lt;org.acra.ACRA: void init(android.app.Application)&gt;"/>  
        <node method="&lt;org.acra.ErrorReporter: void &lt;init&gt;(android.content.Context,android.content.SharedPreferences,boolean)&gt;"/>  
        <node method="&lt;org.acra.ErrorReporter: void checkReportsOnApplicationStart()&gt;"/>  
        <node method="&lt;org.acra.ErrorReporter: void notifyDialog(java.lang.String)&gt;"/>  
        <node method="ErrorReporter notifyDialog" type="CreateMethod" unit="r2 = new android.content.Intent"/>  
        <node method="ErrorReporter notifyDialog" type="SetAttribute" unit="specialinvoke r2.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r6, class &quot;Lorg/acra/CrashReportDialog;&quot;)"/>  
        <node method="ErrorReporter notifyDialog" type="SetAttribute" unit="virtualinvoke r2.&lt;android.content.Intent: android.content.Intent setFlags(int)&gt;(268435456)"/>  
        <node method="ErrorReporter notifyDialog" type="PassOutIntent" unit="virtualinvoke $r6.&lt;android.content.Context: void startActivity(android.content.Intent)&gt;(r2)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.guice.Application: void onCreate()&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.guice.Application: void onCreate()&gt;,&lt;org.acra.ACRA: void init(android.app.Application)&gt;,&lt;org.acra.ErrorReporter: void &lt;init&gt;(android.content.Context,android.content.SharedPreferences,boolean)&gt;,&lt;org.acra.ErrorReporter: void checkReportsOnApplicationStart()&gt;,&lt;org.acra.ErrorReporter: void notifySendReport(java.lang.String)&gt;,void notifySendReport(java.lang.String)"/>  
      <source name="eu.vranckaert.worktime.guice.Application"/>  
      <destinition name="org.acra.CrashReportDialog"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.guice.Application: void onCreate()&gt;"/>  
        <node method="&lt;org.acra.ACRA: void init(android.app.Application)&gt;"/>  
        <node method="&lt;org.acra.ErrorReporter: void &lt;init&gt;(android.content.Context,android.content.SharedPreferences,boolean)&gt;"/>  
        <node method="&lt;org.acra.ErrorReporter: void checkReportsOnApplicationStart()&gt;"/>  
        <node method="&lt;org.acra.ErrorReporter: void notifySendReport(java.lang.String)&gt;"/>  
        <node method="ErrorReporter notifySendReport" type="CreateMethod" unit="r3 = new android.content.Intent"/>  
        <node method="ErrorReporter notifySendReport" type="SetAttribute" unit="specialinvoke r3.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r4, class &quot;Lorg/acra/CrashReportDialog;&quot;)"/>  
        <node method="ErrorReporter notifySendReport" type="PassOutIntent" unit="virtualinvoke r2.&lt;android.app.Notification: void setLatestEventInfo(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,android.app.PendingIntent)&gt;($r4, $r8, $r9, $r13)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationAddActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationAddActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationAddActivity: void onCreate(android.os.Bundle)&gt;,&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedWizardActivity: void onCreate(android.os.Bundle)&gt;,&lt;eu.vranckaert.worktime.utils.wizard.WizardActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationAddActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationAddActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.view.actionbar.synclock.SyncLockedWizardActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.utils.wizard.WizardActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="WizardActivity onCreate" type="setContentView" unit="specialinvoke r0.&lt;eu.vranckaert.worktime.utils.view.actionbar.ActionBarGuiceActivity: void setContentView(int)&gt;(2130903089)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void onCreate(android.os.Bundle)&gt;,&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationPunchOutActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="CreateMethod" unit="r18 = new android.content.Intent"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="SetAttribute" unit="specialinvoke r18.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationPunchOutActivity;&quot;)"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void startActivityForResult(android.content.Intent,int)&gt;(r18, 3)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void onCreate(android.os.Bundle)&gt;,&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationRestartActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="CreateMethod" unit="r18 = new android.content.Intent"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="SetAttribute" unit="specialinvoke r18.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationRestartActivity;&quot;)"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void startActivityForResult(android.content.Intent,int)&gt;(r18, 3)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void onCreate(android.os.Bundle)&gt;,&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationSetCommentActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="CreateMethod" unit="r18 = new android.content.Intent"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="SetAttribute" unit="specialinvoke r18.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationSetCommentActivity;&quot;)"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void startActivityForResult(android.content.Intent,int)&gt;(r18, 3)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void onCreate(android.os.Bundle)&gt;,&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationEditProjectAndTaskActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="CreateMethod" unit="r18 = new android.content.Intent"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="SetAttribute" unit="specialinvoke r18.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationEditProjectAndTaskActivity;&quot;)"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void startActivityForResult(android.content.Intent,int)&gt;(r18, 3)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void onCreate(android.os.Bundle)&gt;,&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationDetailActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="CreateMethod" unit="r18 = new android.content.Intent"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="SetAttribute" unit="specialinvoke r18.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationDetailActivity;&quot;)"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void startActivityForResult(android.content.Intent,int)&gt;(r18, 1)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void onCreate(android.os.Bundle)&gt;,&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationEditEndTimeActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="CreateMethod" unit="r18 = new android.content.Intent"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="SetAttribute" unit="specialinvoke r18.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationEditEndTimeActivity;&quot;)"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void startActivityForResult(android.content.Intent,int)&gt;(r18, 3)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void onCreate(android.os.Bundle)&gt;,&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationEditStartTimeActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="CreateMethod" unit="r18 = new android.content.Intent"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="SetAttribute" unit="specialinvoke r18.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationEditStartTimeActivity;&quot;)"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void startActivityForResult(android.content.Intent,int)&gt;(r18, 3)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void onCreate(android.os.Bundle)&gt;,&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationDeleteActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="CreateMethod" unit="r18 = new android.content.Intent"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="SetAttribute" unit="specialinvoke r18.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationDeleteActivity;&quot;)"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void startActivityForResult(android.content.Intent,int)&gt;(r18, 3)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void onCreate(android.os.Bundle)&gt;,&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationDeleteActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="CreateMethod" unit="r18 = new android.content.Intent"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="SetAttribute" unit="specialinvoke r18.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationDeleteActivity;&quot;)"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void startActivityForResult(android.content.Intent,int)&gt;(r18, 3)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void onCreate(android.os.Bundle)&gt;,&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;,void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity"/>  
      <destinition name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationSplitActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void handleTimeRegistrationAction(eu.vranckaert.worktime.enums.timeregistration.TimeRegistrationAction)&gt;"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="CreateMethod" unit="r18 = new android.content.Intent"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="SetAttribute" unit="specialinvoke r18.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;(r0, class &quot;Leu/vranckaert/worktime/activities/timeregistrations/TimeRegistrationSplitActivity;&quot;)"/>  
        <node method="TimeRegistrationActionActivity handleTimeRegistrationAction" type="PassOutIntent" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationActionActivity: void startActivityForResult(android.content.Intent,int)&gt;(r18, 3)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.account.AccountProfileActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.account.AccountProfileActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.account.AccountProfileActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="eu.vranckaert.worktime.activities.account.AccountProfileActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.account.AccountProfileActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="AccountProfileActivity onCreate" type="setContentView" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.account.AccountProfileActivity: void setContentView(int)&gt;(2130903044)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.projects.AddEditProjectActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.projects.AddEditProjectActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.projects.AddEditProjectActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="eu.vranckaert.worktime.activities.projects.AddEditProjectActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.projects.AddEditProjectActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="AddEditProjectActivity onCreate" type="setContentView" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.projects.AddEditProjectActivity: void setContentView(int)&gt;(2130903047)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;,void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[]), &lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder setContentIntent(android.app.PendingIntent)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromParatMethod" unit="$r4 := @parameter3: android.content.Intent"/>  
        <node method="NotificationCompat2$Builder setContentIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;,void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration), &lt;eu.vranckaert.worktime.model.notification.NotificationAction: void &lt;init&gt;(java.lang.String,android.content.Intent)&gt;, &lt;eu.vranckaert.worktime.model.notification.NotificationAction: void &lt;init&gt;(java.lang.String,android.content.Intent,int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.notifcationbar.StatusBarPunchOutHandleActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r10, class &quot;Leu/vranckaert/worktime/activities/notifcationbar/StatusBarPunchOutHandleActivity;&quot;)"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(1417674752)"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;,&lt;eu.vranckaert.worktime.model.notification.NotificationAction: android.content.Intent getIntent()&gt;,android.content.Intent getIntent()"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.model.notification.NotificationAction: android.content.Intent getIntent()&gt;"/>  
        <node method="NotificationAction getIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction getIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="NotificationAction getIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="NotificationAction getIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction getIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="NotificationAction getIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction getIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="NotificationAction getIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="NotificationAction getIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction getIntent" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle: android.app.Notification build()&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigTextStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle: android.app.Notification build()&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigTextStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;($r8, $z0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;,void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration), &lt;eu.vranckaert.worktime.model.notification.NotificationAction: void &lt;init&gt;(java.lang.String,android.content.Intent)&gt;, &lt;eu.vranckaert.worktime.model.notification.NotificationAction: void &lt;init&gt;(java.lang.String,android.content.Intent,int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.notifcationbar.StatusBarPunchOutHandleActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="CreateMethod" unit="r6 = new android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="SetAttribute" unit="specialinvoke r6.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r10, class &quot;Leu/vranckaert/worktime/activities/notifcationbar/StatusBarPunchOutHandleActivity;&quot;)"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="SetAttribute" unit="virtualinvoke r6.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(1417674752)"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;,void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration), &lt;eu.vranckaert.worktime.model.notification.NotificationAction: void &lt;init&gt;(java.lang.String,android.content.Intent)&gt;, &lt;eu.vranckaert.worktime.model.notification.NotificationAction: void &lt;init&gt;(java.lang.String,android.content.Intent,int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.HomeActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r10, class &quot;Leu/vranckaert/worktime/activities/HomeActivity;&quot;)"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromParatMethod" unit="$r4 := @parameter3: android.content.Intent"/>  
        <node method="NotificationCompat2$Builder setContentIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder setContentIntent(android.app.PendingIntent)&gt;,com.jakewharton.notificationcompat2.NotificationCompat2$Builder setContentIntent(android.app.PendingIntent)"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder setContentIntent(android.app.PendingIntent)&gt;"/>  
        <node method="NotificationCompat2$Builder setContentIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompat2$Builder setContentIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle: android.app.Notification build()&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigTextStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle: android.app.Notification build()&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigTextStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setDeleteIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;($r8, $z0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;,void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration), &lt;eu.vranckaert.worktime.model.notification.NotificationAction: void &lt;init&gt;(java.lang.String,android.content.Intent)&gt;, &lt;eu.vranckaert.worktime.model.notification.NotificationAction: void &lt;init&gt;(java.lang.String,android.content.Intent,int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.notifcationbar.StatusBarSplitActionHandleActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="CreateMethod" unit="r8 = new android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="SetAttribute" unit="specialinvoke r8.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r10, class &quot;Leu/vranckaert/worktime/activities/notifcationbar/StatusBarSplitActionHandleActivity;&quot;)"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="SetAttribute" unit="virtualinvoke r8.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(1417674752)"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder addAction(int,java.lang.CharSequence,android.app.PendingIntent)&gt;,com.jakewharton.notificationcompat2.NotificationCompat2$Builder addAction(int,java.lang.CharSequence,android.app.PendingIntent)"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder addAction(int,java.lang.CharSequence,android.app.PendingIntent)&gt;"/>  
        <node method="NotificationCompat2$Builder addAction" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;,void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[]), &lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder setContentIntent(android.app.PendingIntent)&gt;, &lt;eu.vranckaert.worktime.model.notification.NotificationAction: android.content.Intent getIntent()&gt;, &lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder addAction(int,java.lang.CharSequence,android.app.PendingIntent)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromParatMethod" unit="$r4 := @parameter3: android.content.Intent"/>  
        <node method="NotificationCompat2$Builder setContentIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;,&lt;eu.vranckaert.worktime.model.notification.NotificationAction: void &lt;init&gt;(java.lang.String,android.content.Intent,int)&gt;,void &lt;init&gt;(java.lang.String,android.content.Intent,int)"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.model.notification.NotificationAction: void &lt;init&gt;(java.lang.String,android.content.Intent,int)&gt;"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;,void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration), &lt;eu.vranckaert.worktime.model.notification.NotificationAction: void &lt;init&gt;(java.lang.String,android.content.Intent)&gt;, &lt;eu.vranckaert.worktime.model.notification.NotificationAction: void &lt;init&gt;(java.lang.String,android.content.Intent,int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.notifcationbar.StatusBarOthersActionHandleActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="CreateMethod" unit="r4 = new android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="SetAttribute" unit="specialinvoke r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r10, class &quot;Leu/vranckaert/worktime/activities/notifcationbar/StatusBarOthersActionHandleActivity;&quot;)"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="SetAttribute" unit="virtualinvoke r4.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(1417674752)"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;,&lt;eu.vranckaert.worktime.model.notification.NotificationAction: void &lt;init&gt;(java.lang.String,android.content.Intent,int)&gt;,void &lt;init&gt;(java.lang.String,android.content.Intent,int)"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.model.notification.NotificationAction: void &lt;init&gt;(java.lang.String,android.content.Intent,int)&gt;"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;,&lt;eu.vranckaert.worktime.model.notification.NotificationAction: void &lt;init&gt;(java.lang.String,android.content.Intent)&gt;,void &lt;init&gt;(java.lang.String,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.model.notification.NotificationAction: void &lt;init&gt;(java.lang.String,android.content.Intent)&gt;"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;,void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[]), &lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder setContentIntent(android.app.PendingIntent)&gt;, &lt;eu.vranckaert.worktime.model.notification.NotificationAction: android.content.Intent getIntent()&gt;, &lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder addAction(int,java.lang.CharSequence,android.app.PendingIntent)&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromRetValue" unit="$r4 = virtualinvoke r9.&lt;eu.vranckaert.worktime.model.notification.NotificationAction: android.content.Intent getIntent()&gt;()"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="NotificationCompat2$Builder addAction" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder setContentIntent(android.app.PendingIntent)&gt;,com.jakewharton.notificationcompat2.NotificationCompat2$Builder setContentIntent(android.app.PendingIntent)"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$Builder: com.jakewharton.notificationcompat2.NotificationCompat2$Builder setContentIntent(android.app.PendingIntent)&gt;"/>  
        <node method="NotificationCompat2$Builder setContentIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompat2$Builder setContentIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;,void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration), &lt;eu.vranckaert.worktime.model.notification.NotificationAction: void &lt;init&gt;(java.lang.String,android.content.Intent)&gt;, &lt;eu.vranckaert.worktime.model.notification.NotificationAction: void &lt;init&gt;(java.lang.String,android.content.Intent,int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.notifcationbar.StatusBarOthersActionHandleActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="CreateMethod" unit="r4 = new android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="SetAttribute" unit="specialinvoke r4.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r10, class &quot;Leu/vranckaert/worktime/activities/notifcationbar/StatusBarOthersActionHandleActivity;&quot;)"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="SetAttribute" unit="virtualinvoke r4.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(1417674752)"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;,&lt;eu.vranckaert.worktime.model.notification.NotificationAction: void &lt;init&gt;(java.lang.String,android.content.Intent)&gt;,void &lt;init&gt;(java.lang.String,android.content.Intent)"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.model.notification.NotificationAction: void &lt;init&gt;(java.lang.String,android.content.Intent)&gt;"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;,void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration), &lt;eu.vranckaert.worktime.model.notification.NotificationAction: void &lt;init&gt;(java.lang.String,android.content.Intent)&gt;, &lt;eu.vranckaert.worktime.model.notification.NotificationAction: void &lt;init&gt;(java.lang.String,android.content.Intent,int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.notifcationbar.StatusBarSplitActionHandleActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="CreateMethod" unit="r8 = new android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="SetAttribute" unit="specialinvoke r8.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r10, class &quot;Leu/vranckaert/worktime/activities/notifcationbar/StatusBarSplitActionHandleActivity;&quot;)"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="SetAttribute" unit="virtualinvoke r8.&lt;android.content.Intent: android.content.Intent addFlags(int)&gt;(1417674752)"/>  
        <node method="NotificationAction &lt;init&gt;" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;,&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle: android.app.Notification build()&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigTextStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;,android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;"/>  
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle: android.app.Notification build()&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification buildBigTextStyle(com.jakewharton.notificationcompat2.NotificationCompat2$BigTextStyle)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatJB: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatICS: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="&lt;com.jakewharton.notificationcompat2.NotificationCompatHC: android.app.Notification$Builder createBuilder(com.jakewharton.notificationcompat2.NotificationCompat2$Builder)&gt;"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setDeleteIntent(android.app.PendingIntent)&gt;($r8)"/>  
        <node method="NotificationCompatHC createBuilder" type="PassOutIntent" unit="$r2 = virtualinvoke $r2.&lt;android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)&gt;($r8, $z0)"/> 
      </nodes> 
    </intentSummary>  
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;,void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration), &lt;eu.vranckaert.worktime.model.notification.NotificationAction: void &lt;init&gt;(java.lang.String,android.content.Intent)&gt;, &lt;eu.vranckaert.worktime.model.notification.NotificationAction: void &lt;init&gt;(java.lang.String,android.content.Intent,int)&gt;, &lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void setStatusBarNotification(java.lang.String,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,java.lang.String,int,int,java.lang.Integer,boolean,eu.vranckaert.worktime.model.notification.NotificationAction[])&gt;"/>  
      <source name="eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl"/>  
      <destinition name="eu.vranckaert.worktime.activities.HomeActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.service.ui.impl.StatusBarNotificationServiceImpl: void addOrUpdateNotification(eu.vranckaert.worktime.model.TimeRegistration)&gt;"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="CreateMethod" unit="r1 = new android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="SetAttribute" unit="specialinvoke r1.&lt;android.content.Intent: void &lt;init&gt;(android.content.Context,java.lang.Class)&gt;($r10, class &quot;Leu/vranckaert/worktime/activities/HomeActivity;&quot;)"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromParatMethod" unit="$r4 := @parameter3: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl setStatusBarNotification" type="ReceiveIntentFromRetValue" unit="$r4 = virtualinvoke r9.&lt;eu.vranckaert.worktime.model.notification.NotificationAction: android.content.Intent getIntent()&gt;()"/>  
        <node method="NotificationCompat2$Builder setContentIntent" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter1: android.content.Intent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.content.Intent"/>  
        <node method="NotificationCompat2$Builder addAction" type="ReceiveIntentFromParatMethod" unit="$r2 := @parameter2: android.app.PendingIntent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/>  
        <node method="StatusBarNotificationServiceImpl addOrUpdateNotification" type="ReceiveIntentFromParatMethod" unit="$r1 := @parameter0: android.app.PendingIntent"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="ProjectDetailsActivity onCreate" type="setContentView" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.projects.ProjectDetailsActivity: void setContentView(int)&gt;(2130903055)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationDetailActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationDetailActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationDetailActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationDetailActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationDetailActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="TimeRegistrationDetailActivity onCreate" type="setContentView" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationDetailActivity: void setContentView(int)&gt;(2130903056)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.reporting.ReportingCriteriaActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.reporting.ReportingCriteriaActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.reporting.ReportingCriteriaActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="eu.vranckaert.worktime.activities.reporting.ReportingCriteriaActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.reporting.ReportingCriteriaActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="ReportingCriteriaActivity onCreate" type="setContentView" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.reporting.ReportingCriteriaActivity: void setContentView(int)&gt;(2130903058)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationListActivity"> 
    <intentSummary> 
      <method value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationListActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationListActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationListActivity"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationListActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="TimeRegistrationListActivity onCreate" type="setContentView" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.activities.timeregistrations.TimeRegistrationListActivity: void setContentView(int)&gt;(2130903057)"/> 
      </nodes> 
    </intentSummary> 
  </Component>  
  <Component source="eu.vranckaert.worktime.utils.donations.DonationsActivity"> 
    <FragmentSummary> 
      <method value="&lt;eu.vranckaert.worktime.utils.donations.DonationsActivity: void onCreate(android.os.Bundle)&gt;"/>  
      <methodtrace value="&lt;eu.vranckaert.worktime.utils.donations.DonationsActivity: void onCreate(android.os.Bundle)&gt;,void onCreate(android.os.Bundle)"/>  
      <source name="eu.vranckaert.worktime.utils.donations.DonationsActivity"/>  
      <destinition name="eu.vranckaert.worktime.utils.donations.DonationsFragment"/>  
      <nodes> 
        <node method="&lt;eu.vranckaert.worktime.utils.donations.DonationsActivity: void onCreate(android.os.Bundle)&gt;"/>  
        <node method="DonationsActivity onCreate" type="setContentView" unit="virtualinvoke r0.&lt;eu.vranckaert.worktime.utils.donations.DonationsActivity: void setContentView(int)&gt;(2130903077)"/> 
      </nodes> 
    </FragmentSummary> 
  </Component>
</root>
