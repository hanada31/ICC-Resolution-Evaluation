/*
 * Copyright 2012 Dirk Vranckaert
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package eu.vranckaert.worktime.activities.backup;

import android.app.AlertDialog;
import android.app.Dialog;
import android.content.DialogInterface;
import android.os.Bundle;
import android.text.Html;
import eu.vranckaert.worktime.R;
import eu.vranckaert.worktime.constants.Constants;
import roboguice.activity.RoboActivity;

/**
 * User: DIRK VRANCKAERT
 * Date: 1/02/12
 * Time: 8:34
 */
public class BackupRestoreInfoActivity extends RoboActivity {
    private static final String LOG_TAG = BackupRestoreInfoActivity.class.getSimpleName();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        showDialog(Constants.Dialog.BACKUP_RESTORE_DOCUMENTATION);
    }

    protected Dialog onCreateDialog(int id) {
        Dialog dialog = null;

        switch (id) {
            case Constants.Dialog.BACKUP_RESTORE_DOCUMENTATION: {
                AlertDialog.Builder alertBackupSuccess = new AlertDialog.Builder(this);
                alertBackupSuccess
                        .setTitle(R.string.lbl_backup_restore_documentation_title)
                        .setMessage(Html.fromHtml(
                                "<h1>Backup</h1>" +
                                "<p>Backups will be stored on the SD-card. If no SD-card is available an error will be shown. If your device has an internal and external SD-card it's most likely that the internal SD-card will be used. " +
                                "A backup will contain all your data including projects, tasks and time registrations. " +
                                "<b>NOT</b> included in the backup are the preferences (backup using your Google account) and exports/reports you have generated.<br/>" +
                                "The exports/reports are already stored on the your internal or external SD-card. Using the reporting-module you can share the files via mail or other applications.<br/>" +
                                "For your WorkTime preferences backups are automatically created on the Google Play Store if you enabled backup & restore of Google.</p>" +
                                "<h1>Restore</h1>" +
                                "<p>For restoring backups they need to be available in the directory \"Worktime backups\" on either the internal (if any) or external SD-card of your device.<br/>" +
                                "If the restore was successful you will see a notification message declaring that everything went ok. " +
                                "During the restore process it's possible that the application crashes and shows a dialog (generated by Android) asking you to force close the application. If you see the status bar notification telling you that the restore was successful there is no problem, you can do so. Afterwards you can just restart the application and everything should be fine.</p>" +
                                "<h1>Send Backups</h1>" +
                                "<p>It's possible to share (or send) your backups. " +
                                "All applications that can handel attachments (for example GMail, Mail app,...) will be shown as possible applications to handle your request with. " +
                                "Using GMail we often had the problem that the attachment seems to be added when the mail is sent the attachments seems to be gone. However sometimes GMail works."
                                ))
                        .setCancelable(true)
                        .setPositiveButton(R.string.close, new DialogInterface.OnClickListener() {
                            public void onClick(DialogInterface dialog, int which) {
                                dialog.cancel();
                                finish();
                            }
                        })
                        .setOnCancelListener(new DialogInterface.OnCancelListener() {
                            @Override
                            public void onCancel(DialogInterface dialogInterface) {
                                finish();
                            }
                        });
                dialog = alertBackupSuccess.create();
                break;
            }
        }

        return dialog;
    }
}
